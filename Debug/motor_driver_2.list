
motor_driver_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080081d8  080081d8  000181d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ec  080085ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f4  080085f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080085fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001e0  080087d8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080087d8  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134b4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000363c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234da  00000000  00000000  00038020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127ac  00000000  00000000  0005b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2dcb  00000000  00000000  0006dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  00140ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081bc 	.word	0x080081bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080081bc 	.word	0x080081bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Drv_Motor_Init>:
 *  Created on: Mar 26, 2021
 *      Author: YUWEI, YEH
 */
#include "Driver_layer/drv_motor.h"

void Drv_Motor_Init(Motor* motor){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	// initialize motor
	motor->duty = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
	motor->duty_old = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]

	// initialize encoder
	HAL_TIM_Encoder_Start(motor->ENC_TIM, TIM_CHANNEL_ALL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	213c      	movs	r1, #60	; 0x3c
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 f85c 	bl	8003fb8 <HAL_TIM_Encoder_Start>
	motor->ENC_position = ENC_COUNTER_HALF;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
	motor->ENC_TIM->Instance->CNT = ENC_COUNTER_HALF;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
	motor->velocity = 0;
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	motor->velocity_old = 0;
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	motor->error_velocity = 0;
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	motor->error_velocity_old = 0;
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	motor->position = 0;
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	0000      	movs	r0, r0
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <Drv_Motor_ControlwithWheelVelocity>:

void Drv_Motor_ControlwithWheelVelocity(Motor* motor, ENCODER_STATE REF_velocity){ // control with the velocity of two wheel
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	ed87 0b00 	vstr	d0, [r7]
	motor->error_velocity = REF_velocity - motor->velocity;
 8000f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000f7e:	f7ff f9a3 	bl	80002c8 <__aeabi_dsub>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	motor->duty = (int)(motor->duty_old + 309.409*motor->error_velocity - 296.8012*motor->error_velocity_old);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fae7 	bl	8000564 <__aeabi_i2d>
 8000f96:	4604      	mov	r4, r0
 8000f98:	460d      	mov	r5, r1
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000fa0:	a374      	add	r3, pc, #464	; (adr r3, 8001174 <Drv_Motor_ControlwithWheelVelocity+0x20c>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fb47 	bl	8000638 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	f7ff f98b 	bl	80002cc <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4614      	mov	r4, r2
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000fc4:	a36d      	add	r3, pc, #436	; (adr r3, 800117c <Drv_Motor_ControlwithWheelVelocity+0x214>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb35 	bl	8000638 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff f977 	bl	80002c8 <__aeabi_dsub>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fdd9 	bl	8000b98 <__aeabi_d2iz>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	619a      	str	r2, [r3, #24]
	if(motor->duty > 0){ // if(a>0)? true condition: false condition
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd50      	ble.n	8001096 <Drv_Motor_ControlwithWheelVelocity+0x12e>
		HAL_GPIO_WritePin(motor->INA_port, motor->INA_pin, (motor->direction>0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8899      	ldrh	r1, [r3, #4]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	2b00      	cmp	r3, #0
 8001002:	bfcc      	ite	gt
 8001004:	2301      	movgt	r3, #1
 8001006:	2300      	movle	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	f001 ffb4 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->INB_port, motor->INB_pin, (motor->direction>0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6898      	ldr	r0, [r3, #8]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8999      	ldrh	r1, [r3, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	2b00      	cmp	r3, #0
 800101e:	bfd4      	ite	le
 8001020:	2301      	movle	r3, #1
 8001022:	2300      	movgt	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	f001 ffa6 	bl	8002f78 <HAL_GPIO_WritePin>
		if(motor->duty > 2250){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001034:	4293      	cmp	r3, r2
 8001036:	dd03      	ble.n	8001040 <Drv_Motor_ControlwithWheelVelocity+0xd8>
			motor->duty = 2250;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800103e:	619a      	str	r2, [r3, #24]
		}
		__HAL_TIM_SET_COMPARE(motor->PWM_TIM, motor->PWM_channel, motor->duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d106      	bne.n	8001056 <Drv_Motor_ControlwithWheelVelocity+0xee>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
 8001054:	e075      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d107      	bne.n	800106e <Drv_Motor_ControlwithWheelVelocity+0x106>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6999      	ldr	r1, [r3, #24]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	460b      	mov	r3, r1
 800106a:	6393      	str	r3, [r2, #56]	; 0x38
 800106c:	e069      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2b08      	cmp	r3, #8
 8001074:	d107      	bne.n	8001086 <Drv_Motor_ControlwithWheelVelocity+0x11e>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6999      	ldr	r1, [r3, #24]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	460b      	mov	r3, r1
 8001082:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001084:	e05d      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6999      	ldr	r1, [r3, #24]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	460b      	mov	r3, r1
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	e055      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
	}
	else if(motor->duty < 0){
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da51      	bge.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
		HAL_GPIO_WritePin(motor->INA_port, motor->INA_pin, (motor->direction>0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8899      	ldrh	r1, [r3, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bfd4      	ite	le
 80010ae:	2301      	movle	r3, #1
 80010b0:	2300      	movgt	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	f001 ff5f 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->INB_port, motor->INB_pin, (motor->direction>0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6898      	ldr	r0, [r3, #8]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	8999      	ldrh	r1, [r3, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfcc      	ite	gt
 80010ca:	2301      	movgt	r3, #1
 80010cc:	2300      	movle	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	f001 ff51 	bl	8002f78 <HAL_GPIO_WritePin>
		if(motor->duty < -2250){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <Drv_Motor_ControlwithWheelVelocity+0x208>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	da02      	bge.n	80010e6 <Drv_Motor_ControlwithWheelVelocity+0x17e>
			motor->duty = -2250;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a23      	ldr	r2, [pc, #140]	; (8001170 <Drv_Motor_ControlwithWheelVelocity+0x208>)
 80010e4:	619a      	str	r2, [r3, #24]
		}
		__HAL_TIM_SET_COMPARE(motor->PWM_TIM, motor->PWM_channel, -1*motor->duty);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d107      	bne.n	80010fe <Drv_Motor_ControlwithWheelVelocity+0x196>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	425a      	negs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
 80010fc:	e021      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d108      	bne.n	8001118 <Drv_Motor_ControlwithWheelVelocity+0x1b0>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4259      	negs	r1, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	460b      	mov	r3, r1
 8001114:	6393      	str	r3, [r2, #56]	; 0x38
 8001116:	e014      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d108      	bne.n	8001132 <Drv_Motor_ControlwithWheelVelocity+0x1ca>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4259      	negs	r1, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	460b      	mov	r3, r1
 800112e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001130:	e007      	b.n	8001142 <Drv_Motor_ControlwithWheelVelocity+0x1da>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4259      	negs	r1, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	460b      	mov	r3, r1
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
	}
	HAL_TIM_PWM_Start(motor->PWM_TIM,  motor->PWM_channel);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f002 fdc5 	bl	8003cdc <HAL_TIM_PWM_Start>
	motor->duty_old = motor->duty;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	61da      	str	r2, [r3, #28]
	motor->error_velocity_old = motor->error_velocity;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001160:	68f9      	ldr	r1, [r7, #12]
 8001162:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bdb0      	pop	{r4, r5, r7, pc}
 800116e:	bf00      	nop
 8001170:	fffff736 	.word	0xfffff736
 8001174:	43958106 	.word	0x43958106
 8001178:	4073568b 	.word	0x4073568b
 800117c:	b71758e2 	.word	0xb71758e2
 8001180:	40728cd1 	.word	0x40728cd1
 8001184:	00000000 	.word	0x00000000

08001188 <Drv_Motor_ReadVelocity>:

void Drv_Motor_ReadVelocity(Motor* motor){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	motor->ENC_position = motor->ENC_TIM->Instance->CNT;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
	motor->ENC_TIM->Instance->CNT = ENC_COUNTER_HALF;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
	// distinguish the direction of rotation
	int Enc_Pos_diff = motor->ENC_position - ENC_COUNTER_HALF;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80011b0:	60fb      	str	r3, [r7, #12]
	if(Enc_Pos_diff > 0){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dd27      	ble.n	8001208 <Drv_Motor_ReadVelocity+0x80>
		// CNT2*M_PI/(delta_t*(enc_resolution*4)(one turn)*gear ratio (rad/s)
		motor->velocity = motor->direction*(double)Enc_Pos_diff*M_TWOPI/(INT_TIM_DT*ENC_RESOLUTION*4.0f*GEAR_RATIO);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9d1 	bl	8000564 <__aeabi_i2d>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff f9cc 	bl	8000564 <__aeabi_i2d>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff fa30 	bl	8000638 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	a327      	add	r3, pc, #156	; (adr r3, 8001280 <Drv_Motor_ReadVelocity+0xf8>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa27 	bl	8000638 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	a325      	add	r3, pc, #148	; (adr r3, 8001288 <Drv_Motor_ReadVelocity+0x100>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fb48 	bl	800088c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001206:	e031      	b.n	800126c <Drv_Motor_ReadVelocity+0xe4>
	}
	else if(Enc_Pos_diff < 0){
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	da27      	bge.n	800125e <Drv_Motor_ReadVelocity+0xd6>
		motor->velocity = motor->direction*(double)Enc_Pos_diff*M_TWOPI/(INT_TIM_DT*ENC_RESOLUTION*4.0f*GEAR_RATIO);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9a6 	bl	8000564 <__aeabi_i2d>
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_i2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff fa05 	bl	8000638 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a312      	add	r3, pc, #72	; (adr r3, 8001280 <Drv_Motor_ReadVelocity+0xf8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9fc 	bl	8000638 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a30f      	add	r3, pc, #60	; (adr r3, 8001288 <Drv_Motor_ReadVelocity+0x100>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fb1d 	bl	800088c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800125c:	e006      	b.n	800126c <Drv_Motor_ReadVelocity+0xe4>
	}
	else{
		motor->velocity = 0.0;
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
	Drv_Motor_ReadPosition(motor);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f80f 	bl	8001290 <Drv_Motor_ReadPosition>
//	motor->velocity_old = motor->velocity;
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54442d18 	.word	0x54442d18
 8001284:	401921fb 	.word	0x401921fb
 8001288:	1bda511a 	.word	0x1bda511a
 800128c:	4052617c 	.word	0x4052617c

08001290 <Drv_Motor_ReadPosition>:

void Drv_Motor_ReadPosition(Motor* motor){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	motor->position += motor->wheel_size*motor->velocity*INT_TIM_DT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012a4:	f7ff f9c8 	bl	8000638 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	a30b      	add	r3, pc, #44	; (adr r3, 80012e0 <Drv_Motor_ReadPosition+0x50>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80012c8:	f7ff f800 	bl	80002cc <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80012e4:	3f50624d 	.word	0x3f50624d

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_DMA_Init+0x4c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_DMA_Init+0x4c>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_DMA_Init+0x4c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	200c      	movs	r0, #12
 8001310:	f001 f8f7 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001314:	200c      	movs	r0, #12
 8001316:	f001 f910 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2010      	movs	r0, #16
 8001320:	f001 f8ef 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001324:	2010      	movs	r0, #16
 8001326:	f001 f908 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0xec>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a33      	ldr	r2, [pc, #204]	; (8001424 <MX_GPIO_Init+0xec>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_GPIO_Init+0xec>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0xec>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <MX_GPIO_Init+0xec>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_GPIO_Init+0xec>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0xec>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <MX_GPIO_Init+0xec>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_GPIO_Init+0xec>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, moter_R_INB_Pin|moter_R_INA_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2160      	movs	r1, #96	; 0x60
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_GPIO_Init+0xf0>)
 80013a8:	f001 fde6 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, moter_L_INA_Pin|moter_L_INB_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013b2:	481e      	ldr	r0, [pc, #120]	; (800142c <MX_GPIO_Init+0xf4>)
 80013b4:	f001 fde0 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = moter_R_INB_Pin|moter_R_INA_Pin;
 80013b8:	2360      	movs	r3, #96	; 0x60
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <MX_GPIO_Init+0xf0>)
 80013d0:	f001 fc3e 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_GPIO_Init+0xf8>)
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <MX_GPIO_Init+0xfc>)
 80013ea:	f001 fc31 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = moter_L_INA_Pin|moter_L_INB_Pin;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_GPIO_Init+0xf4>)
 8001408:	f001 fc22 	bl	8002c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2028      	movs	r0, #40	; 0x28
 8001412:	f001 f876 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001416:	2028      	movs	r0, #40	; 0x28
 8001418:	f001 f88f 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400
 8001430:	10110000 	.word	0x10110000
 8001434:	40020000 	.word	0x40020000

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f000 ff13 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f8bb 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f7ff ff77 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f7ff ff4d 	bl	80012e8 <MX_DMA_Init>
  MX_TIM1_Init();
 800144e:	f000 fb63 	bl	8001b18 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001452:	f000 fbb9 	bl	8001bc8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001456:	f000 fc1b 	bl	8001c90 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800145a:	f000 fda3 	bl	8001fa4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800145e:	f000 fc6b 	bl	8001d38 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001462:	f000 fdc9 	bl	8001ff8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2,uart2_rx_buffer,rx_buffer_size);
 8001466:	2320      	movs	r3, #32
 8001468:	b29b      	uxth	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4946      	ldr	r1, [pc, #280]	; (8001588 <main+0x150>)
 800146e:	4847      	ldr	r0, [pc, #284]	; (800158c <main+0x154>)
 8001470:	f003 fc03 	bl	8004c7a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3,uart3_rx_buffer,rx_buffer_size);
 8001474:	2320      	movs	r3, #32
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4945      	ldr	r1, [pc, #276]	; (8001590 <main+0x158>)
 800147c:	4845      	ldr	r0, [pc, #276]	; (8001594 <main+0x15c>)
 800147e:	f003 fbfc 	bl	8004c7a <HAL_UART_Receive_DMA>
  Robot_init(&robot);
 8001482:	4845      	ldr	r0, [pc, #276]	; (8001598 <main+0x160>)
 8001484:	f000 f980 	bl	8001788 <Robot_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	memset(pos_info, 0, 32);
 8001488:	2220      	movs	r2, #32
 800148a:	2100      	movs	r1, #0
 800148c:	4843      	ldr	r0, [pc, #268]	; (800159c <main+0x164>)
 800148e:	f003 ffe3 	bl	8005458 <memset>
	snprintf(pos_info, 32, "%4.4lf %4.4lf\r\n", robot.motor_L.velocity, robot.motor_R.velocity );
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <main+0x160>)
 8001494:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001498:	493f      	ldr	r1, [pc, #252]	; (8001598 <main+0x160>)
 800149a:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 800149e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014a2:	e9cd 2300 	strd	r2, r3, [sp]
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <main+0x168>)
 80014a8:	2120      	movs	r1, #32
 80014aa:	483c      	ldr	r0, [pc, #240]	; (800159c <main+0x164>)
 80014ac:	f004 fc46 	bl	8005d3c <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)&pos_info, 32, 10);
 80014b0:	230a      	movs	r3, #10
 80014b2:	2220      	movs	r2, #32
 80014b4:	4939      	ldr	r1, [pc, #228]	; (800159c <main+0x164>)
 80014b6:	4837      	ldr	r0, [pc, #220]	; (8001594 <main+0x15c>)
 80014b8:	f003 fb4d 	bl	8004b56 <HAL_UART_Transmit>
//	uart2_rx_byte = readSerialByte(&huart2, uart2_rx_buffer, &uart2_buf_index, rx_buffer_size);
	uart3_rx_byte = readSerialByte(&huart3, uart3_rx_buffer, &uart3_buf_index, rx_buffer_size);
 80014bc:	2320      	movs	r3, #32
 80014be:	4a39      	ldr	r2, [pc, #228]	; (80015a4 <main+0x16c>)
 80014c0:	4933      	ldr	r1, [pc, #204]	; (8001590 <main+0x158>)
 80014c2:	4834      	ldr	r0, [pc, #208]	; (8001594 <main+0x15c>)
 80014c4:	f000 f8ec 	bl	80016a0 <readSerialByte>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <main+0x170>)
 80014ce:	701a      	strb	r2, [r3, #0]
//	if ( uart2_rx_byte != 0){
////		HAL_UART_Transmit(&huart2, &uart2_rx_byte, 1, 10);
//		HAL_UART_Transmit(&huart3, &uart2_rx_byte, 1, 10);
//	}
	if ( uart3_rx_byte != 0){
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <main+0x170>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0d7      	beq.n	8001488 <main+0x50>
//		HAL_UART_Transmit(&huart2, &uart3_rx_byte, 1, 10);
//		HAL_UART_Transmit(&huart3, &uart3_rx_byte, 1, 10);
		int motor = uart3_rx_byte & motor_check ? 1:0;
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <main+0x170>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	60fb      	str	r3, [r7, #12]
		int dir   = uart3_rx_byte & dir_check ? 1:0; // 0 for negative, 1 for positive
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <main+0x170>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	60bb      	str	r3, [r7, #8]
		int value = uart3_rx_byte & value_check;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <main+0x170>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	233f      	movs	r3, #63	; 0x3f
 800150c:	4013      	ands	r3, r2
 800150e:	607b      	str	r3, [r7, #4]
 		if (motor) {
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d018      	beq.n	8001548 <main+0x110>
			// true for left
			lspeed = dir ? value : -value;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <main+0xea>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	425b      	negs	r3, r3
 8001520:	e000      	b.n	8001524 <main+0xec>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <main+0x174>)
 8001526:	6013      	str	r3, [r2, #0]
			dlspeed = lspeed * spd_ratio;
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <main+0x174>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f819 	bl	8000564 <__aeabi_i2d>
 8001532:	a313      	add	r3, pc, #76	; (adr r3, 8001580 <main+0x148>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f87e 	bl	8000638 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	491b      	ldr	r1, [pc, #108]	; (80015b0 <main+0x178>)
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
 8001546:	e79f      	b.n	8001488 <main+0x50>
		} else {
			// false for right
			rspeed = dir ? value : -value;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <main+0x11c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	425b      	negs	r3, r3
 8001552:	e000      	b.n	8001556 <main+0x11e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <main+0x17c>)
 8001558:	6013      	str	r3, [r2, #0]
			drspeed = rspeed * spd_ratio;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <main+0x17c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f800 	bl	8000564 <__aeabi_i2d>
 8001564:	a306      	add	r3, pc, #24	; (adr r3, 8001580 <main+0x148>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f865 	bl	8000638 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4911      	ldr	r1, [pc, #68]	; (80015b8 <main+0x180>)
 8001574:	e9c1 2300 	strd	r2, r3, [r1]
	memset(pos_info, 0, 32);
 8001578:	e786      	b.n	8001488 <main+0x50>
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fb99999 	.word	0x3fb99999
 8001588:	200001fc 	.word	0x200001fc
 800158c:	2000058c 	.word	0x2000058c
 8001590:	2000021c 	.word	0x2000021c
 8001594:	20000548 	.word	0x20000548
 8001598:	20000270 	.word	0x20000270
 800159c:	20000348 	.word	0x20000348
 80015a0:	080081d8 	.word	0x080081d8
 80015a4:	2000023c 	.word	0x2000023c
 80015a8:	20000240 	.word	0x20000240
 80015ac:	20000244 	.word	0x20000244
 80015b0:	20000250 	.word	0x20000250
 80015b4:	20000248 	.word	0x20000248
 80015b8:	20000258 	.word	0x20000258

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2234      	movs	r2, #52	; 0x34
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 ff44 	bl	8005458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <SystemClock_Config+0xdc>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <SystemClock_Config+0xdc>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <SystemClock_Config+0xdc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <SystemClock_Config+0xe0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <SystemClock_Config+0xe0>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <SystemClock_Config+0xe0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800162c:	2308      	movs	r3, #8
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001630:	23b4      	movs	r3, #180	; 0xb4
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4618      	mov	r0, r3
 8001646:	f001 ff9b 	bl	8003580 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001650:	f000 f892 	bl	8001778 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001654:	f001 fcce 	bl	8002ff4 <HAL_PWREx_EnableOverDrive>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800165e:	f000 f88b 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800166e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2105      	movs	r1, #5
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fd07 	bl	8003094 <HAL_RCC_ClockConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800168c:	f000 f874 	bl	8001778 <Error_Handler>
  }
}
 8001690:	bf00      	nop
 8001692:	3750      	adds	r7, #80	; 0x50
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <readSerialByte>:

/* USER CODE BEGIN 4 */
uint8_t readSerialByte( UART_HandleTypeDef *huart, uint8_t* buf, int* buf_index, const int buf_size){
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
	uint8_t data = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	77fb      	strb	r3, [r7, #31]

	int index = huart->hdmarx->Instance->NDTR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	617b      	str	r3, [r7, #20]
	index = buf_size - index;
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]

	int remainData = index - *buf_index;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	61bb      	str	r3, [r7, #24]
	if (remainData < 0) remainData+= buf_size;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da03      	bge.n	80016dc <readSerialByte+0x3c>
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

	if (remainData > 0) {
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	dd13      	ble.n	800170a <readSerialByte+0x6a>
		data = buf[*buf_index];
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	77fb      	strb	r3, [r7, #31]
		*buf_index += 1;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
		if (*buf_index == buf_size) *buf_index = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d102      	bne.n	800170a <readSerialByte+0x6a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	}

	return data;
 800170a:	7ffb      	ldrb	r3, [r7, #31]

}
 800170c:	4618      	mov	r0, r3
 800170e:	3724      	adds	r7, #36	; 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_TIM_PeriodElapsedCallback>:
//		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)pTxData, (uint8_t*)pRxData, sizeof(pTxData), 1);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	if(htim == robot.INT_TIM){
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001722:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	d119      	bne.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x48>
		Drv_Motor_ReadVelocity(&robot.motor_L);
 800172c:	480e      	ldr	r0, [pc, #56]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800172e:	f7ff fd2b 	bl	8001188 <Drv_Motor_ReadVelocity>
		Drv_Motor_ReadVelocity(&robot.motor_R);
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001734:	f7ff fd28 	bl	8001188 <Drv_Motor_ReadVelocity>
		Drv_Motor_ControlwithWheelVelocity(&robot.motor_L, dlspeed);
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800173a:	ed93 7b00 	vldr	d7, [r3]
 800173e:	eeb0 0a47 	vmov.f32	s0, s14
 8001742:	eef0 0a67 	vmov.f32	s1, s15
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001748:	f7ff fc0e 	bl	8000f68 <Drv_Motor_ControlwithWheelVelocity>
		Drv_Motor_ControlwithWheelVelocity(&robot.motor_R, drspeed);
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800174e:	ed93 7b00 	vldr	d7, [r3]
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	eef0 0a67 	vmov.f32	s1, s15
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800175c:	f7ff fc04 	bl	8000f68 <Drv_Motor_ControlwithWheelVelocity>
//		snprintf(msg, sizeof(msg), "v: %.4f, ref: %.4f, duty: %d\r\n", velocityR, ref_velocityR, dutyR);
//		snprintf(msg, sizeof(msg), "v: %.4f, duty: %d\r\n", velocityR, dutyR);
//		snprintf(msg, sizeof(msg), "%.4f, %.4f\r\n", velocityR, ref_velocityR);
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 1);
	}
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000270 	.word	0x20000270
 800176c:	200002d0 	.word	0x200002d0
 8001770:	20000250 	.word	0x20000250
 8001774:	20000258 	.word	0x20000258

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <Robot_init>:
 *      Author: YUWEI, YEH
 */

#include "robot_control.h"

void Robot_init(Robot* robot){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	// Pin setting for motor_L
	robot->motor_L.INA_port = GPIOB;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <Robot_init+0xc8>)
 8001794:	601a      	str	r2, [r3, #0]
	robot->motor_L.INA_pin = GPIO_PIN_8;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179c:	809a      	strh	r2, [r3, #4]
	robot->motor_L.INB_port = GPIOB;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <Robot_init+0xc8>)
 80017a2:	609a      	str	r2, [r3, #8]
	robot->motor_L.INB_pin = GPIO_PIN_9;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017aa:	819a      	strh	r2, [r3, #12]
	robot->motor_L.PWM_TIM = &htim3;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <Robot_init+0xcc>)
 80017b0:	611a      	str	r2, [r3, #16]
	robot->motor_L.PWM_channel = TIM_CHANNEL_4;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	220c      	movs	r2, #12
 80017b6:	615a      	str	r2, [r3, #20]
	// Pin setting for encoder_L
	robot->motor_L.ENC_TIM = &htim5;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a27      	ldr	r2, [pc, #156]	; (8001858 <Robot_init+0xd0>)
 80017bc:	621a      	str	r2, [r3, #32]
	robot->motor_L.direction = 1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
	robot->motor_L.wheel_size = 0.0475;
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	a320      	add	r3, pc, #128	; (adr r3, 8001848 <Robot_init+0xc0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Drv_Motor_Init(&robot->motor_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fb84 	bl	8000ee0 <Drv_Motor_Init>

	// Pin setting for motor_R
	robot->motor_R.INA_port = GPIOC;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <Robot_init+0xd4>)
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60
	robot->motor_R.INA_pin = GPIO_PIN_6;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	robot->motor_R.INB_port = GPIOC;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <Robot_init+0xd4>)
 80017ea:	669a      	str	r2, [r3, #104]	; 0x68
	robot->motor_R.INB_pin = GPIO_PIN_5;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	robot->motor_R.PWM_TIM = &htim3;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <Robot_init+0xcc>)
 80017f8:	671a      	str	r2, [r3, #112]	; 0x70
	robot->motor_R.PWM_channel = TIM_CHANNEL_3;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2208      	movs	r2, #8
 80017fe:	675a      	str	r2, [r3, #116]	; 0x74
	// Pin setting for encoder_R
	robot->motor_R.ENC_TIM = &htim1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <Robot_init+0xd8>)
 8001804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	robot->motor_R.direction = -1;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800180e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	robot->motor_R.wheel_size = 0.0475;
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	a30c      	add	r3, pc, #48	; (adr r3, 8001848 <Robot_init+0xc0>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Drv_Motor_Init(&robot->motor_R);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3360      	adds	r3, #96	; 0x60
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb5c 	bl	8000ee0 <Drv_Motor_Init>

	// Setting for internal interrupt timer
	robot->INT_TIM = &htim6;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <Robot_init+0xdc>)
 800182c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	HAL_TIM_Base_Start_IT(robot->INT_TIM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001836:	4618      	mov	r0, r3
 8001838:	f002 f990 	bl	8003b5c <HAL_TIM_Base_Start_IT>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	851eb852 	.word	0x851eb852
 800184c:	3fa851eb 	.word	0x3fa851eb
 8001850:	40020400 	.word	0x40020400
 8001854:	200003b0 	.word	0x200003b0
 8001858:	20000368 	.word	0x20000368
 800185c:	40020800 	.word	0x40020800
 8001860:	20000440 	.word	0x20000440
 8001864:	200003f8 	.word	0x200003f8

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 fcfe 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA1_Stream1_IRQHandler+0x10>)
 800191a:	f000 ff2f 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200004e8 	.word	0x200004e8

08001928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA1_Stream5_IRQHandler+0x10>)
 800192e:	f000 ff25 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000488 	.word	0x20000488

0800193c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001940:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001944:	f001 fb32 	bl	8002fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM6_DAC_IRQHandler+0x10>)
 8001952:	f002 fbbf 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200003f8 	.word	0x200003f8

08001960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_kill>:

int _kill(int pid, int sig)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800197a:	f003 fd43 	bl	8005404 <__errno>
 800197e:	4603      	mov	r3, r0
 8001980:	2216      	movs	r2, #22
 8001982:	601a      	str	r2, [r3, #0]
	return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_exit>:

void _exit (int status)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe7 	bl	8001970 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019a2:	e7fe      	b.n	80019a2 <_exit+0x12>

080019a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00a      	b.n	80019cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	4601      	mov	r1, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf0      	blt.n	80019b6 <_read+0x12>
	}

return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e009      	b.n	8001a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf1      	blt.n	80019f0 <_write+0x12>
	}
	return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_close>:

int _close(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_isatty>:

int _isatty(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	return 1;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f003 fca8 	bl	8005404 <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20020000 	.word	0x20020000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	20000260 	.word	0x20000260
 8001ae8:	200005e8 	.word	0x200005e8

08001aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <SystemInit+0x28>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <SystemInit+0x28>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SystemInit+0x28>)
 8001b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b06:	609a      	str	r2, [r3, #8]
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc96 	bl	8005458 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <MX_TIM1_Init+0xac>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b60:	2303      	movs	r3, #3
 8001b62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001b8c:	f002 f96e 	bl	8003e6c <HAL_TIM_Encoder_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b96:	f7ff fdef 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_TIM1_Init+0xa8>)
 8001ba8:	f002 fef8 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bb2:	f7ff fde1 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000440 	.word	0x20000440
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bea:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <MX_TIM3_Init+0xc4>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2250;
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001bfe:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c10:	481d      	ldr	r0, [pc, #116]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c12:	f002 f813 	bl	8003c3c <HAL_TIM_PWM_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c1c:	f7ff fdac 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4816      	ldr	r0, [pc, #88]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c30:	f002 feb4 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c3a:	f7ff fd9d 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	; 0x60
 8001c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2208      	movs	r2, #8
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c56:	f002 fb45 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c60:	f7ff fd8a 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	220c      	movs	r2, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c6c:	f002 fb3a 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c76:	f7ff fd7f 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_TIM3_Init+0xc0>)
 8001c7c:	f000 f958 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200003b0 	.word	0x200003b0
 8001c8c:	40000400 	.word	0x40000400

08001c90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	2224      	movs	r2, #36	; 0x24
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fbda 	bl	8005458 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <MX_TIM5_Init+0xa4>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001cfe:	f002 f8b5 	bl	8003e6c <HAL_TIM_Encoder_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001d08:	f7ff fd36 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_TIM5_Init+0xa0>)
 8001d1a:	f002 fe3f 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001d24:	f7ff fd28 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000368 	.word	0x20000368
 8001d34:	40000c00 	.word	0x40000c00

08001d38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d4e:	2259      	movs	r2, #89	; 0x59
 8001d50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d68:	f001 fea8 	bl	8003abc <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d72:	f7ff fd01 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d84:	f002 fe0a 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d8e:	f7ff fcf3 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003f8 	.word	0x200003f8
 8001da0:	40001000 	.word	0x40001000

08001da4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12d      	bne.n	8001e22 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = encoder_R_A_Pin|encoder_R_B_Pin;
 8001dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481e      	ldr	r0, [pc, #120]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e1c:	f000 ff18 	bl	8002c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e20:	e030      	b.n	8001e84 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM5)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d12b      	bne.n	8001e84 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = encoder_L_A_Pin|encoder_L_B_Pin;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e74:	2302      	movs	r3, #2
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e80:	f000 fee6 	bl	8002c50 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40000c00 	.word	0x40000c00

08001e9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10d      	bne.n	8001eca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_TIM_PWM_MspInit+0x40>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_TIM_PWM_MspInit+0x40>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_TIM_PWM_MspInit+0x40>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2036      	movs	r0, #54	; 0x36
 8001f14:	f000 faf5 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f18:	2036      	movs	r0, #54	; 0x36
 8001f1a:	f000 fb0e 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40001000 	.word	0x40001000
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11e      	bne.n	8001f90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_TIM_MspPostInit+0x6c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_TIM_MspPostInit+0x6c>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_TIM_MspPostInit+0x6c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = moter_R_PWM_Pin|moter_L_PWM_Pin;
 8001f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_TIM_MspPostInit+0x70>)
 8001f8c:	f000 fe60 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020800 	.word	0x40020800

08001fa4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f002 fd6e 	bl	8004abc <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f7ff fbc7 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000058c 	.word	0x2000058c
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_USART3_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002030:	f002 fd44 	bl	8004abc <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f7ff fb9d 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000548 	.word	0x20000548
 8002048:	40004800 	.word	0x40004800

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a61      	ldr	r2, [pc, #388]	; (80021f0 <HAL_UART_MspInit+0x1a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d15b      	bne.n	8002126 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a5f      	ldr	r2, [pc, #380]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a6:	230c      	movs	r3, #12
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b6:	2307      	movs	r3, #7
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	484d      	ldr	r0, [pc, #308]	; (80021f8 <HAL_UART_MspInit+0x1ac>)
 80020c2:	f000 fdc5 	bl	8002c50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_UART_MspInit+0x1b4>)
 80020ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80020cc:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d4:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020da:	4b48      	ldr	r3, [pc, #288]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e0:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e8:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ee:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002108:	483c      	ldr	r0, [pc, #240]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 800210a:	f000 fa31 	bl	8002570 <HAL_DMA_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002114:	f7ff fb30 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a38      	ldr	r2, [pc, #224]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
 800211e:	4a37      	ldr	r2, [pc, #220]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002124:	e060      	b.n	80021e8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d15b      	bne.n	80021e8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800217a:	2307      	movs	r3, #7
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4820      	ldr	r0, [pc, #128]	; (8002208 <HAL_UART_MspInit+0x1bc>)
 8002186:	f000 fd63 	bl	8002c50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_UART_MspInit+0x1c0>)
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_UART_MspInit+0x1c4>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_UART_MspInit+0x1c0>)
 8002192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002196:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0x1c0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021be:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021ce:	f000 f9cf 	bl	8002570 <HAL_DMA_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80021d8:	f7ff face 	bl	8001778 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_UART_MspInit+0x1c0>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40004400 	.word	0x40004400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	20000488 	.word	0x20000488
 8002200:	40026088 	.word	0x40026088
 8002204:	40004800 	.word	0x40004800
 8002208:	40020800 	.word	0x40020800
 800220c:	200004e8 	.word	0x200004e8
 8002210:	40026028 	.word	0x40026028

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221a:	e003      	b.n	8002224 <LoopCopyDataInit>

0800221c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800221e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002222:	3104      	adds	r1, #4

08002224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800222c:	d3f6      	bcc.n	800221c <CopyDataInit>
  ldr  r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002230:	e002      	b.n	8002238 <LoopFillZerobss>

08002232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002234:	f842 3b04 	str.w	r3, [r2], #4

08002238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800223c:	d3f9      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223e:	f7ff fc55 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f003 f8e5 	bl	8005410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff f8f7 	bl	8001438 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800224c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002250:	080085fc 	.word	0x080085fc
  ldr  r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002258:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800225c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002260:	200005e4 	.word	0x200005e4

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f92b 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f808 	bl	80022ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fae4 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x54>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x58>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f943 	bl	8002556 <HAL_SYSTICK_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00e      	b.n	80022f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d80a      	bhi.n	80022f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e8:	f000 f90b 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <HAL_InitTick+0x5c>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000000 	.word	0x20000000
 8002304:	20000008 	.word	0x20000008
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008
 8002330:	200005d0 	.word	0x200005d0

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200005d0 	.word	0x200005d0

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff29 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff3e 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff31 	bl	80023b0 <__NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffa2 	bl	80024a8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff feda 	bl	8002334 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e099      	b.n	80026c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fec1 	bl	8002334 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_DMA_Init+0x158>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa6f 	bl	8002b58 <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa26 	bl	8002aec <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	f010803f 	.word	0xf010803f

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Start_IT+0x26>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e040      	b.n	8002774 <HAL_DMA_Start_IT+0xa8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12f      	bne.n	8002766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9b8 	bl	8002a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0216 	orr.w	r2, r2, #22
 800273a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e005      	b.n	8002772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_DMA_IRQHandler+0x258>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_DMA_IRQHandler+0x25c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2208      	movs	r2, #8
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2204      	movs	r2, #4
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2210      	movs	r2, #16
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d043      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2210      	movs	r2, #16
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d018      	beq.n	80028be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d108      	bne.n	80028ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e01f      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e016      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0208 	bic.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2220      	movs	r2, #32
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808e 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8086 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2220      	movs	r2, #32
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d136      	bne.n	8002994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0216 	bic.w	r2, r2, #22
 8002934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_DMA_IRQHandler+0x1da>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0208 	bic.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	223f      	movs	r2, #63	; 0x3f
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
        }
        return;
 8002992:	e078      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d030      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e02b      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e022      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
 80029d4:	20000000 	.word	0x20000000
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d307      	bcc.n	8002a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x2ca>
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a86:	bf00      	nop
    }
  }
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d108      	bne.n	8002ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ace:	e007      	b.n	8002ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b10      	subs	r3, #16
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <DMA_CalcBaseAndBitshift+0x64>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <DMA_CalcBaseAndBitshift+0x68>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d909      	bls.n	8002b2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2c:	e007      	b.n	8002b3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	aaaaaaab 	.word	0xaaaaaaab
 8002b54:	08008200 	.word	0x08008200

08002b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0x5a>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d856      	bhi.n	8002c26 <DMA_CheckFifoParam+0xce>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <DMA_CheckFifoParam+0x28>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002ba3 	.word	0x08002ba3
 8002b88:	08002b91 	.word	0x08002b91
 8002b8c:	08002c27 	.word	0x08002c27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d046      	beq.n	8002c2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e043      	b.n	8002c2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002baa:	d140      	bne.n	8002c2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e03d      	b.n	8002c2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d121      	bne.n	8002c00 <DMA_CheckFifoParam+0xa8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d837      	bhi.n	8002c32 <DMA_CheckFifoParam+0xda>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <DMA_CheckFifoParam+0x70>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bdf 	.word	0x08002bdf
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	08002bf1 	.word	0x08002bf1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e030      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d025      	beq.n	8002c36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e022      	b.n	8002c36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfe:	e01c      	b.n	8002c3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d903      	bls.n	8002c0e <DMA_CheckFifoParam+0xb6>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d003      	beq.n	8002c14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c0c:	e018      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      break;
 8002c12:	e015      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e00b      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c26:	bf00      	nop
 8002c28:	e00a      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e008      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e006      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e165      	b.n	8002f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8154 	bne.w	8002f32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d005      	beq.n	8002ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d130      	bne.n	8002d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 0201 	and.w	r2, r3, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d123      	bne.n	8002d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80ae 	beq.w	8002f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df2:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_GPIO_Init+0x308>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d025      	beq.n	8002e6a <HAL_GPIO_Init+0x21a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <HAL_GPIO_Init+0x30c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01f      	beq.n	8002e66 <HAL_GPIO_Init+0x216>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_GPIO_Init+0x310>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d019      	beq.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00d      	beq.n	8002e5a <HAL_GPIO_Init+0x20a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <HAL_GPIO_Init+0x206>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_GPIO_Init+0x202>
 8002e4e:	2306      	movs	r3, #6
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e52:	2307      	movs	r3, #7
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x21c>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eae:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae96 	bls.w	8002c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f806 	bl	8002fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_PWREx_EnableOverDrive+0x90>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_PWREx_EnableOverDrive+0x90>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_PWREx_EnableOverDrive+0x90>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_PWREx_EnableOverDrive+0x94>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003020:	f7ff f988 	bl	8002334 <HAL_GetTick>
 8003024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003026:	e009      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003028:	f7ff f984 	bl	8002334 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003036:	d901      	bls.n	800303c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e01f      	b.n	800307c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_PWREx_EnableOverDrive+0x98>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d1ee      	bne.n	8003028 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003050:	f7ff f970 	bl	8002334 <HAL_GetTick>
 8003054:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003056:	e009      	b.n	800306c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003058:	f7ff f96c 	bl	8002334 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003066:	d901      	bls.n	800306c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e007      	b.n	800307c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_PWREx_EnableOverDrive+0x98>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003078:	d1ee      	bne.n	8003058 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	420e0040 	.word	0x420e0040
 800308c:	40007000 	.word	0x40007000
 8003090:	420e0044 	.word	0x420e0044

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cc      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d119      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e067      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4934      	ldr	r1, [pc, #208]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7ff f8d6 	bl	8002334 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7ff f8d2 	bl	8002334 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d20c      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f855 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f836 	bl	80022ac <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	080081e8 	.word	0x080081e8
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	080081f8 	.word	0x080081f8

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	080081f8 	.word	0x080081f8

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032cc:	b087      	sub	sp, #28
 80032ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032d0:	2600      	movs	r6, #0
 80032d2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80032d4:	2600      	movs	r6, #0
 80032d6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80032d8:	2600      	movs	r6, #0
 80032da:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80032dc:	2600      	movs	r6, #0
 80032de:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032e0:	2600      	movs	r6, #0
 80032e2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e4:	4ea3      	ldr	r6, [pc, #652]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80032e6:	68b6      	ldr	r6, [r6, #8]
 80032e8:	f006 060c 	and.w	r6, r6, #12
 80032ec:	2e0c      	cmp	r6, #12
 80032ee:	f200 8137 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x298>
 80032f2:	f20f 0c08 	addw	ip, pc, #8
 80032f6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003561 	.word	0x08003561
 8003304:	08003561 	.word	0x08003561
 8003308:	08003561 	.word	0x08003561
 800330c:	08003337 	.word	0x08003337
 8003310:	08003561 	.word	0x08003561
 8003314:	08003561 	.word	0x08003561
 8003318:	08003561 	.word	0x08003561
 800331c:	0800333d 	.word	0x0800333d
 8003320:	08003561 	.word	0x08003561
 8003324:	08003561 	.word	0x08003561
 8003328:	08003561 	.word	0x08003561
 800332c:	08003453 	.word	0x08003453
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003332:	613b      	str	r3, [r7, #16]
       break;
 8003334:	e117      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b91      	ldr	r3, [pc, #580]	; (800357c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003338:	613b      	str	r3, [r7, #16]
      break;
 800333a:	e114      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b8b      	ldr	r3, [pc, #556]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003362:	f04f 0500 	mov.w	r5, #0
 8003366:	ea02 0004 	and.w	r0, r2, r4
 800336a:	ea03 0105 	and.w	r1, r3, r5
 800336e:	4b83      	ldr	r3, [pc, #524]	; (800357c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003370:	fb03 f201 	mul.w	r2, r3, r1
 8003374:	2300      	movs	r3, #0
 8003376:	fb03 f300 	mul.w	r3, r3, r0
 800337a:	4413      	add	r3, r2
 800337c:	4a7f      	ldr	r2, [pc, #508]	; (800357c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800337e:	fba0 0102 	umull	r0, r1, r0, r2
 8003382:	440b      	add	r3, r1
 8003384:	4619      	mov	r1, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	461a      	mov	r2, r3
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f7fd fc2b 	bl	8000be8 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4613      	mov	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e04c      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339c:	4b75      	ldr	r3, [pc, #468]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	ea02 0800 	and.w	r8, r2, r0
 80033b4:	ea03 0901 	and.w	r9, r3, r1
 80033b8:	4640      	mov	r0, r8
 80033ba:	4649      	mov	r1, r9
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	014b      	lsls	r3, r1, #5
 80033c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ca:	0142      	lsls	r2, r0, #5
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	ebb0 0008 	subs.w	r0, r0, r8
 80033d4:	eb61 0109 	sbc.w	r1, r1, r9
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033e6:	0182      	lsls	r2, r0, #6
 80033e8:	1a12      	subs	r2, r2, r0
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fc:	00d0      	lsls	r0, r2, #3
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	eb12 0208 	adds.w	r2, r2, r8
 8003406:	eb43 0309 	adc.w	r3, r3, r9
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	0299      	lsls	r1, r3, #10
 8003414:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003418:	0290      	lsls	r0, r2, #10
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f7fd fbdd 	bl	8000be8 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4613      	mov	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003436:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	3301      	adds	r3, #1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	613b      	str	r3, [r7, #16]
      break;
 8003450:	e089      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003452:	4948      	ldr	r1, [pc, #288]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003454:	6849      	ldr	r1, [r1, #4]
 8003456:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800345a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345c:	4945      	ldr	r1, [pc, #276]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800345e:	6849      	ldr	r1, [r1, #4]
 8003460:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003464:	2900      	cmp	r1, #0
 8003466:	d024      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4942      	ldr	r1, [pc, #264]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800346a:	6849      	ldr	r1, [r1, #4]
 800346c:	0989      	lsrs	r1, r1, #6
 800346e:	4608      	mov	r0, r1
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003478:	f04f 0500 	mov.w	r5, #0
 800347c:	ea00 0204 	and.w	r2, r0, r4
 8003480:	ea01 0305 	and.w	r3, r1, r5
 8003484:	493d      	ldr	r1, [pc, #244]	; (800357c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003486:	fb01 f003 	mul.w	r0, r1, r3
 800348a:	2100      	movs	r1, #0
 800348c:	fb01 f102 	mul.w	r1, r1, r2
 8003490:	1844      	adds	r4, r0, r1
 8003492:	493a      	ldr	r1, [pc, #232]	; (800357c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003494:	fba2 0101 	umull	r0, r1, r2, r1
 8003498:	1863      	adds	r3, r4, r1
 800349a:	4619      	mov	r1, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f7fd fba0 	bl	8000be8 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e04a      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	461a      	mov	r2, r3
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	ea02 0400 	and.w	r4, r2, r0
 80034ca:	ea03 0501 	and.w	r5, r3, r1
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	014b      	lsls	r3, r1, #5
 80034dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034e0:	0142      	lsls	r2, r0, #5
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	1b00      	subs	r0, r0, r4
 80034e8:	eb61 0105 	sbc.w	r1, r1, r5
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	018b      	lsls	r3, r1, #6
 80034f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034fa:	0182      	lsls	r2, r0, #6
 80034fc:	1a12      	subs	r2, r2, r0
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	00d9      	lsls	r1, r3, #3
 800350c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003510:	00d0      	lsls	r0, r2, #3
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	1912      	adds	r2, r2, r4
 8003518:	eb45 0303 	adc.w	r3, r5, r3
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0299      	lsls	r1, r3, #10
 8003526:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800352a:	0290      	lsls	r0, r2, #10
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f7fd fb54 	bl	8000be8 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0f1b      	lsrs	r3, r3, #28
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	613b      	str	r3, [r7, #16]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003562:	613b      	str	r3, [r7, #16]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	693b      	ldr	r3, [r7, #16]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	017d7840 	.word	0x017d7840

08003580 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e28d      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8083 	beq.w	80036a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035a0:	4b94      	ldr	r3, [pc, #592]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d019      	beq.n	80035e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035ac:	4b91      	ldr	r3, [pc, #580]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b8:	4b8e      	ldr	r3, [pc, #568]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d00c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c6:	4b8b      	ldr	r3, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d112      	bne.n	80035f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035de:	d10b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d05b      	beq.n	80036a4 <HAL_RCC_OscConfig+0x124>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d157      	bne.n	80036a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e25a      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d106      	bne.n	8003610 <HAL_RCC_OscConfig+0x90>
 8003602:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7b      	ldr	r2, [pc, #492]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e01d      	b.n	800364c <HAL_RCC_OscConfig+0xcc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0xb4>
 800361a:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a72      	ldr	r2, [pc, #456]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0xcc>
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6b      	ldr	r2, [pc, #428]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fe6e 	bl	8002334 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fe6a 	bl	8002334 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e21f      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0xdc>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fe5a 	bl	8002334 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fe56 	bl	8002334 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e20b      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x104>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d06f      	beq.n	8003792 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036b2:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036be:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ca:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d11c      	bne.n	800371c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x186>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1d3      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	e03a      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <HAL_RCC_OscConfig+0x278>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fe03 	bl	8002334 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe fdff 	bl	8002334 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1b4      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4925      	ldr	r1, [pc, #148]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
 8003764:	e015      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_OscConfig+0x278>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fde2 	bl	8002334 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003774:	f7fe fdde 	bl	8002334 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e193      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d036      	beq.n	800380c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <HAL_RCC_OscConfig+0x27c>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe fdc2 	bl	8002334 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fe fdbe 	bl	8002334 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e173      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x234>
 80037d2:	e01b      	b.n	800380c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_OscConfig+0x27c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7fe fdab 	bl	8002334 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e0:	e00e      	b.n	8003800 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fe fda7 	bl	8002334 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d907      	bls.n	8003800 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e15c      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
 80037f4:	40023800 	.word	0x40023800
 80037f8:	42470000 	.word	0x42470000
 80037fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ea      	bne.n	80037e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8097 	beq.w	8003948 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	4b7f      	ldr	r3, [pc, #508]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a7e      	ldr	r2, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <HAL_RCC_OscConfig+0x4b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d118      	bne.n	8003888 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x4b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x4b0>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003862:	f7fe fd67 	bl	8002334 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386a:	f7fe fd63 	bl	8002334 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e118      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x4b0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x31e>
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	e01c      	b.n	80038d8 <HAL_RCC_OscConfig+0x358>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x340>
 80038a6:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a5d      	ldr	r2, [pc, #372]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0x358>
 80038c0:	4b5a      	ldr	r3, [pc, #360]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a59      	ldr	r2, [pc, #356]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
 80038cc:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a56      	ldr	r2, [pc, #344]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80038d2:	f023 0304 	bic.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fd28 	bl	8002334 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fe fd24 	bl	8002334 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0d7      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ee      	beq.n	80038e8 <HAL_RCC_OscConfig+0x368>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fd12 	bl	8002334 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe fd0e 	bl	8002334 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e0c1      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ee      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80ad 	beq.w	8003aac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b08      	cmp	r3, #8
 800395c:	d060      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d145      	bne.n	80039f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <HAL_RCC_OscConfig+0x4b4>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fce2 	bl	8002334 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fcde 	bl	8002334 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e093      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	019b      	lsls	r3, r3, #6
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	491b      	ldr	r1, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4b4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fe fcb3 	bl	8002334 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fcaf 	bl	8002334 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e064      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x452>
 80039f0:	e05c      	b.n	8003aac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_RCC_OscConfig+0x4b4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fc9c 	bl	8002334 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe fc98 	bl	8002334 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e04d      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x480>
 8003a1e:	e045      	b.n	8003aac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e040      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a38:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <HAL_RCC_OscConfig+0x538>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d030      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d129      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d122      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d119      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	3b01      	subs	r3, #1
 8003a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d10f      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e041      	b.n	8003b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f9fc 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f000 fcd8 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e04e      	b.n	8003c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d01d      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d010      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	e007      	b.n	8003c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40010400 	.word	0x40010400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40001800 	.word	0x40001800

08003c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e041      	b.n	8003cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe f91a 	bl	8001e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 fc18 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e022      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e015      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07c      	b.n	8003e48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x82>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x92>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdde 	bl	8004950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <HAL_TIM_PWM_Start+0x174>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_PWM_Start+0xcc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_TIM_PWM_Start+0x178>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_PWM_Start+0xd0>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_TIM_PWM_Start+0xd2>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <HAL_TIM_PWM_Start+0x174>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_TIM_PWM_Start+0x17c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_TIM_PWM_Start+0x180>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_TIM_PWM_Start+0x184>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIM_PWM_Start+0x178>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_TIM_PWM_Start+0x188>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x136>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_TIM_PWM_Start+0x18c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d111      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d010      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	e007      	b.n	8003e46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40001800 	.word	0x40001800

08003e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e097      	b.n	8003fb0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd ff85 	bl	8001da4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb0:	f023 0307 	bic.w	r3, r3, #7
 8003eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 faf5 	bl	80044b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	4313      	orrs	r3, r2
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f0c:	f023 030c 	bic.w	r3, r3, #12
 8003f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	031b      	lsls	r3, r3, #12
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fe0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d110      	bne.n	800400a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d001      	beq.n	8003ff8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e069      	b.n	80040cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	e031      	b.n	800406e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d110      	bne.n	8004032 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004010:	7bbb      	ldrb	r3, [r7, #14]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004016:	7b3b      	ldrb	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d001      	beq.n	8004020 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e055      	b.n	80040cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004030:	e01d      	b.n	800406e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d108      	bne.n	800404a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800403e:	7b7b      	ldrb	r3, [r7, #13]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004044:	7b3b      	ldrb	r3, [r7, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03e      	b.n	80040cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_TIM_Encoder_Start+0xc4>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b04      	cmp	r3, #4
 8004078:	d008      	beq.n	800408c <HAL_TIM_Encoder_Start+0xd4>
 800407a:	e00f      	b.n	800409c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fc63 	bl	8004950 <TIM_CCxChannelCmd>
      break;
 800408a:	e016      	b.n	80040ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2201      	movs	r2, #1
 8004092:	2104      	movs	r1, #4
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc5b 	bl	8004950 <TIM_CCxChannelCmd>
      break;
 800409a:	e00e      	b.n	80040ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fc53 	bl	8004950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	2104      	movs	r1, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fc4c 	bl	8004950 <TIM_CCxChannelCmd>
      break;
 80040b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9ac 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f99e 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9af 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0204 	mvn.w	r2, #4
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f982 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f974 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f985 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0208 	mvn.w	r2, #8
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2204      	movs	r2, #4
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f958 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f94a 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f95b 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2208      	movs	r2, #8
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f92e 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f920 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f931 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0201 	mvn.w	r2, #1
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fa60 	bl	8001718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fc12 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8f6 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fbdc 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0ac      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x174>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	f200 809f 	bhi.w	800444c <HAL_TIM_PWM_ConfigChannel+0x168>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004349 	.word	0x08004349
 8004318:	0800444d 	.word	0x0800444d
 800431c:	0800444d 	.word	0x0800444d
 8004320:	0800444d 	.word	0x0800444d
 8004324:	08004389 	.word	0x08004389
 8004328:	0800444d 	.word	0x0800444d
 800432c:	0800444d 	.word	0x0800444d
 8004330:	0800444d 	.word	0x0800444d
 8004334:	080043cb 	.word	0x080043cb
 8004338:	0800444d 	.word	0x0800444d
 800433c:	0800444d 	.word	0x0800444d
 8004340:	0800444d 	.word	0x0800444d
 8004344:	0800440b 	.word	0x0800440b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f94e 	bl	80045f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0208 	orr.w	r2, r2, #8
 8004362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0204 	bic.w	r2, r2, #4
 8004372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
      break;
 8004386:	e062      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f99e 	bl	80046d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	619a      	str	r2, [r3, #24]
      break;
 80043c8:	e041      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f9f3 	bl	80047bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0208 	orr.w	r2, r2, #8
 80043e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0204 	bic.w	r2, r2, #4
 80043f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69d9      	ldr	r1, [r3, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	61da      	str	r2, [r3, #28]
      break;
 8004408:	e021      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fa47 	bl	80048a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	61da      	str	r2, [r3, #28]
      break;
 800444a:	e000      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800444c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0302 	bic.w	r3, r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_OC1_SetConfig+0x64>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10c      	bne.n	800466e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0308 	bic.w	r3, r3, #8
 800465a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC1_SetConfig+0x8e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d111      	bne.n	80046a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0x68>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC2_SetConfig+0x94>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d113      	bne.n	800478c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_OC3_SetConfig+0x66>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10d      	bne.n	800483e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC3_SetConfig+0x92>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400

080048a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <TIM_OC4_SetConfig+0xa4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC4_SetConfig+0x68>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <TIM_OC4_SetConfig+0xa8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40010400 	.word	0x40010400

08004950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2201      	movs	r2, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e05a      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d01d      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d018      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40010400 	.word	0x40010400
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e03f      	b.n	8004b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd fab2 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fab7 	bl	8005074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08a      	sub	sp, #40	; 0x28
 8004b5a:	af02      	add	r7, sp, #8
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d17c      	bne.n	8004c70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_UART_Transmit+0x2c>
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e075      	b.n	8004c72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x3e>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e06e      	b.n	8004c72 <HAL_UART_Transmit+0x11c>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2221      	movs	r2, #33	; 0x21
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004baa:	f7fd fbc3 	bl	8002334 <HAL_GetTick>
 8004bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d108      	bne.n	8004bd8 <HAL_UART_Transmit+0x82>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e003      	b.n	8004be0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004be8:	e02a      	b.n	8004c40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f94a 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e036      	b.n	8004c72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e007      	b.n	8004c32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1cf      	bne.n	8004bea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2140      	movs	r1, #64	; 0x40
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f91a 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d11d      	bne.n	8004cd0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_UART_Receive_DMA+0x26>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e016      	b.n	8004cd2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Receive_DMA+0x38>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e00f      	b.n	8004cd2 <HAL_UART_Receive_DMA+0x58>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f92c 	bl	8004f24 <UART_Start_Receive_DMA>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d12a      	bne.n	8004da0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0210 	bic.w	r2, r2, #16
 8004d9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dac:	4619      	mov	r1, r3
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ffb1 	bl	8004d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004db4:	e002      	b.n	8004dbc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff ff8f 	bl	8004cda <HAL_UART_RxCpltCallback>
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d108      	bne.n	8004dec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4619      	mov	r1, r3
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff ff96 	bl	8004d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dea:	e002      	b.n	8004df2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ff7e 	bl	8004cee <HAL_UART_RxHalfCpltCallback>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b21      	cmp	r3, #33	; 0x21
 8004e2c:	d108      	bne.n	8004e40 <UART_DMAError+0x46>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e3a:	68b8      	ldr	r0, [r7, #8]
 8004e3c:	f000 f8d6 	bl	8004fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b22      	cmp	r3, #34	; 0x22
 8004e60:	d108      	bne.n	8004e74 <UART_DMAError+0x7a>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f000 f8d2 	bl	8005018 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f7ff ff3e 	bl	8004d02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	e02c      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	d028      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8004eae:	f7fd fa41 	bl	8002334 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d21d      	bcs.n	8004efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e00f      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d0c3      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2222      	movs	r2, #34	; 0x22
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <UART_Start_Receive_DMA+0xbc>)
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <UART_Start_Receive_DMA+0xc0>)
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <UART_Start_Receive_DMA+0xc4>)
 8004f62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	2200      	movs	r2, #0
 8004f6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	f7fd fba2 	bl	80026cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	08004d2f 	.word	0x08004d2f
 8004fe4:	08004dc5 	.word	0x08004dc5
 8004fe8:	08004dfb 	.word	0x08004dfb

08004fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005002:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800502e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0210 	bic.w	r2, r2, #16
 8005056:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005078:	b09f      	sub	sp, #124	; 0x7c
 800507a:	af00      	add	r7, sp, #0
 800507c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	ea40 0301 	orr.w	r3, r0, r1
 8005094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b8:	f021 010c 	bic.w	r1, r1, #12
 80050bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050c2:	430b      	orrs	r3, r1
 80050c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	6999      	ldr	r1, [r3, #24]
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	ea40 0301 	orr.w	r3, r0, r1
 80050dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4bc5      	ldr	r3, [pc, #788]	; (80053f8 <UART_SetConfig+0x384>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d004      	beq.n	80050f2 <UART_SetConfig+0x7e>
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4bc3      	ldr	r3, [pc, #780]	; (80053fc <UART_SetConfig+0x388>)
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d103      	bne.n	80050fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050f2:	f7fe f8d5 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 80050f6:	6778      	str	r0, [r7, #116]	; 0x74
 80050f8:	e002      	b.n	8005100 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050fa:	f7fe f8bd 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80050fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	f040 80b6 	bne.w	8005278 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800510c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510e:	461c      	mov	r4, r3
 8005110:	f04f 0500 	mov.w	r5, #0
 8005114:	4622      	mov	r2, r4
 8005116:	462b      	mov	r3, r5
 8005118:	1891      	adds	r1, r2, r2
 800511a:	6439      	str	r1, [r7, #64]	; 0x40
 800511c:	415b      	adcs	r3, r3
 800511e:	647b      	str	r3, [r7, #68]	; 0x44
 8005120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005124:	1912      	adds	r2, r2, r4
 8005126:	eb45 0303 	adc.w	r3, r5, r3
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	00d9      	lsls	r1, r3, #3
 8005134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005138:	00d0      	lsls	r0, r2, #3
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	1911      	adds	r1, r2, r4
 8005140:	6639      	str	r1, [r7, #96]	; 0x60
 8005142:	416b      	adcs	r3, r5
 8005144:	667b      	str	r3, [r7, #100]	; 0x64
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	1891      	adds	r1, r2, r2
 8005152:	63b9      	str	r1, [r7, #56]	; 0x38
 8005154:	415b      	adcs	r3, r3
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800515c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005160:	f7fb fd42 	bl	8000be8 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <UART_SetConfig+0x38c>)
 800516a:	fba3 2302 	umull	r2, r3, r3, r2
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	011e      	lsls	r6, r3, #4
 8005172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005174:	461c      	mov	r4, r3
 8005176:	f04f 0500 	mov.w	r5, #0
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	1891      	adds	r1, r2, r2
 8005180:	6339      	str	r1, [r7, #48]	; 0x30
 8005182:	415b      	adcs	r3, r3
 8005184:	637b      	str	r3, [r7, #52]	; 0x34
 8005186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800518a:	1912      	adds	r2, r2, r4
 800518c:	eb45 0303 	adc.w	r3, r5, r3
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	00d9      	lsls	r1, r3, #3
 800519a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519e:	00d0      	lsls	r0, r2, #3
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	1911      	adds	r1, r2, r4
 80051a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80051a8:	416b      	adcs	r3, r5
 80051aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	461a      	mov	r2, r3
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80051ba:	415b      	adcs	r3, r3
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051c6:	f7fb fd0f 	bl	8000be8 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4b8c      	ldr	r3, [pc, #560]	; (8005400 <UART_SetConfig+0x38c>)
 80051d0:	fba3 1302 	umull	r1, r3, r3, r2
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2164      	movs	r1, #100	; 0x64
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	3332      	adds	r3, #50	; 0x32
 80051e2:	4a87      	ldr	r2, [pc, #540]	; (8005400 <UART_SetConfig+0x38c>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f0:	441e      	add	r6, r3
 80051f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f4:	4618      	mov	r0, r3
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	1894      	adds	r4, r2, r2
 8005200:	623c      	str	r4, [r7, #32]
 8005202:	415b      	adcs	r3, r3
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800520a:	1812      	adds	r2, r2, r0
 800520c:	eb41 0303 	adc.w	r3, r1, r3
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	f04f 0500 	mov.w	r5, #0
 8005218:	00dd      	lsls	r5, r3, #3
 800521a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800521e:	00d4      	lsls	r4, r2, #3
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	1814      	adds	r4, r2, r0
 8005226:	653c      	str	r4, [r7, #80]	; 0x50
 8005228:	414b      	adcs	r3, r1
 800522a:	657b      	str	r3, [r7, #84]	; 0x54
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	461a      	mov	r2, r3
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	1891      	adds	r1, r2, r2
 8005238:	61b9      	str	r1, [r7, #24]
 800523a:	415b      	adcs	r3, r3
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005242:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005246:	f7fb fccf 	bl	8000be8 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <UART_SetConfig+0x38c>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	; 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	3332      	adds	r3, #50	; 0x32
 8005262:	4a67      	ldr	r2, [pc, #412]	; (8005400 <UART_SetConfig+0x38c>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 0207 	and.w	r2, r3, #7
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4432      	add	r2, r6
 8005274:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005276:	e0b9      	b.n	80053ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527a:	461c      	mov	r4, r3
 800527c:	f04f 0500 	mov.w	r5, #0
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	1891      	adds	r1, r2, r2
 8005286:	6139      	str	r1, [r7, #16]
 8005288:	415b      	adcs	r3, r3
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005290:	1912      	adds	r2, r2, r4
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	00d9      	lsls	r1, r3, #3
 80052a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a4:	00d0      	lsls	r0, r2, #3
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	eb12 0804 	adds.w	r8, r2, r4
 80052ae:	eb43 0905 	adc.w	r9, r3, r5
 80052b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	008b      	lsls	r3, r1, #2
 80052c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ca:	0082      	lsls	r2, r0, #2
 80052cc:	4640      	mov	r0, r8
 80052ce:	4649      	mov	r1, r9
 80052d0:	f7fb fc8a 	bl	8000be8 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4b49      	ldr	r3, [pc, #292]	; (8005400 <UART_SetConfig+0x38c>)
 80052da:	fba3 2302 	umull	r2, r3, r3, r2
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	011e      	lsls	r6, r3, #4
 80052e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e4:	4618      	mov	r0, r3
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	1894      	adds	r4, r2, r2
 80052f0:	60bc      	str	r4, [r7, #8]
 80052f2:	415b      	adcs	r3, r3
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052fa:	1812      	adds	r2, r2, r0
 80052fc:	eb41 0303 	adc.w	r3, r1, r3
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	f04f 0500 	mov.w	r5, #0
 8005308:	00dd      	lsls	r5, r3, #3
 800530a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800530e:	00d4      	lsls	r4, r2, #3
 8005310:	4622      	mov	r2, r4
 8005312:	462b      	mov	r3, r5
 8005314:	1814      	adds	r4, r2, r0
 8005316:	64bc      	str	r4, [r7, #72]	; 0x48
 8005318:	414b      	adcs	r3, r1
 800531a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	008b      	lsls	r3, r1, #2
 8005330:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005334:	0082      	lsls	r2, r0, #2
 8005336:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800533a:	f7fb fc55 	bl	8000be8 <__aeabi_uldivmod>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <UART_SetConfig+0x38c>)
 8005344:	fba3 1302 	umull	r1, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	2164      	movs	r1, #100	; 0x64
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	3332      	adds	r3, #50	; 0x32
 8005356:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <UART_SetConfig+0x38c>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005362:	441e      	add	r6, r3
 8005364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005366:	4618      	mov	r0, r3
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	1894      	adds	r4, r2, r2
 8005372:	603c      	str	r4, [r7, #0]
 8005374:	415b      	adcs	r3, r3
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800537c:	1812      	adds	r2, r2, r0
 800537e:	eb41 0303 	adc.w	r3, r1, r3
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	f04f 0500 	mov.w	r5, #0
 800538a:	00dd      	lsls	r5, r3, #3
 800538c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005390:	00d4      	lsls	r4, r2, #3
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	eb12 0a00 	adds.w	sl, r2, r0
 800539a:	eb43 0b01 	adc.w	fp, r3, r1
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b6:	0082      	lsls	r2, r0, #2
 80053b8:	4650      	mov	r0, sl
 80053ba:	4659      	mov	r1, fp
 80053bc:	f7fb fc14 	bl	8000be8 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <UART_SetConfig+0x38c>)
 80053c6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2164      	movs	r1, #100	; 0x64
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <UART_SetConfig+0x38c>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4432      	add	r2, r6
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	377c      	adds	r7, #124	; 0x7c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	bf00      	nop
 80053f8:	40011000 	.word	0x40011000
 80053fc:	40011400 	.word	0x40011400
 8005400:	51eb851f 	.word	0x51eb851f

08005404 <__errno>:
 8005404:	4b01      	ldr	r3, [pc, #4]	; (800540c <__errno+0x8>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000000c 	.word	0x2000000c

08005410 <__libc_init_array>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4d0d      	ldr	r5, [pc, #52]	; (8005448 <__libc_init_array+0x38>)
 8005414:	4c0d      	ldr	r4, [pc, #52]	; (800544c <__libc_init_array+0x3c>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	2600      	movs	r6, #0
 800541c:	42a6      	cmp	r6, r4
 800541e:	d109      	bne.n	8005434 <__libc_init_array+0x24>
 8005420:	4d0b      	ldr	r5, [pc, #44]	; (8005450 <__libc_init_array+0x40>)
 8005422:	4c0c      	ldr	r4, [pc, #48]	; (8005454 <__libc_init_array+0x44>)
 8005424:	f002 feca 	bl	80081bc <_init>
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	2600      	movs	r6, #0
 800542e:	42a6      	cmp	r6, r4
 8005430:	d105      	bne.n	800543e <__libc_init_array+0x2e>
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	f855 3b04 	ldr.w	r3, [r5], #4
 8005438:	4798      	blx	r3
 800543a:	3601      	adds	r6, #1
 800543c:	e7ee      	b.n	800541c <__libc_init_array+0xc>
 800543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005442:	4798      	blx	r3
 8005444:	3601      	adds	r6, #1
 8005446:	e7f2      	b.n	800542e <__libc_init_array+0x1e>
 8005448:	080085f4 	.word	0x080085f4
 800544c:	080085f4 	.word	0x080085f4
 8005450:	080085f4 	.word	0x080085f4
 8005454:	080085f8 	.word	0x080085f8

08005458 <memset>:
 8005458:	4402      	add	r2, r0
 800545a:	4603      	mov	r3, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	d100      	bne.n	8005462 <memset+0xa>
 8005460:	4770      	bx	lr
 8005462:	f803 1b01 	strb.w	r1, [r3], #1
 8005466:	e7f9      	b.n	800545c <memset+0x4>

08005468 <__cvt>:
 8005468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	ec55 4b10 	vmov	r4, r5, d0
 8005470:	2d00      	cmp	r5, #0
 8005472:	460e      	mov	r6, r1
 8005474:	4619      	mov	r1, r3
 8005476:	462b      	mov	r3, r5
 8005478:	bfbb      	ittet	lt
 800547a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800547e:	461d      	movlt	r5, r3
 8005480:	2300      	movge	r3, #0
 8005482:	232d      	movlt	r3, #45	; 0x2d
 8005484:	700b      	strb	r3, [r1, #0]
 8005486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005488:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800548c:	4691      	mov	r9, r2
 800548e:	f023 0820 	bic.w	r8, r3, #32
 8005492:	bfbc      	itt	lt
 8005494:	4622      	movlt	r2, r4
 8005496:	4614      	movlt	r4, r2
 8005498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800549c:	d005      	beq.n	80054aa <__cvt+0x42>
 800549e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054a2:	d100      	bne.n	80054a6 <__cvt+0x3e>
 80054a4:	3601      	adds	r6, #1
 80054a6:	2102      	movs	r1, #2
 80054a8:	e000      	b.n	80054ac <__cvt+0x44>
 80054aa:	2103      	movs	r1, #3
 80054ac:	ab03      	add	r3, sp, #12
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	ab02      	add	r3, sp, #8
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	ec45 4b10 	vmov	d0, r4, r5
 80054b8:	4653      	mov	r3, sl
 80054ba:	4632      	mov	r2, r6
 80054bc:	f000 fd00 	bl	8005ec0 <_dtoa_r>
 80054c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054c4:	4607      	mov	r7, r0
 80054c6:	d102      	bne.n	80054ce <__cvt+0x66>
 80054c8:	f019 0f01 	tst.w	r9, #1
 80054cc:	d022      	beq.n	8005514 <__cvt+0xac>
 80054ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054d2:	eb07 0906 	add.w	r9, r7, r6
 80054d6:	d110      	bne.n	80054fa <__cvt+0x92>
 80054d8:	783b      	ldrb	r3, [r7, #0]
 80054da:	2b30      	cmp	r3, #48	; 0x30
 80054dc:	d10a      	bne.n	80054f4 <__cvt+0x8c>
 80054de:	2200      	movs	r2, #0
 80054e0:	2300      	movs	r3, #0
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	f7fb fb0f 	bl	8000b08 <__aeabi_dcmpeq>
 80054ea:	b918      	cbnz	r0, 80054f4 <__cvt+0x8c>
 80054ec:	f1c6 0601 	rsb	r6, r6, #1
 80054f0:	f8ca 6000 	str.w	r6, [sl]
 80054f4:	f8da 3000 	ldr.w	r3, [sl]
 80054f8:	4499      	add	r9, r3
 80054fa:	2200      	movs	r2, #0
 80054fc:	2300      	movs	r3, #0
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fb fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8005506:	b108      	cbz	r0, 800550c <__cvt+0xa4>
 8005508:	f8cd 900c 	str.w	r9, [sp, #12]
 800550c:	2230      	movs	r2, #48	; 0x30
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	454b      	cmp	r3, r9
 8005512:	d307      	bcc.n	8005524 <__cvt+0xbc>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005518:	1bdb      	subs	r3, r3, r7
 800551a:	4638      	mov	r0, r7
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	b004      	add	sp, #16
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	9103      	str	r1, [sp, #12]
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e7f0      	b.n	800550e <__cvt+0xa6>

0800552c <__exponent>:
 800552c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552e:	4603      	mov	r3, r0
 8005530:	2900      	cmp	r1, #0
 8005532:	bfb8      	it	lt
 8005534:	4249      	neglt	r1, r1
 8005536:	f803 2b02 	strb.w	r2, [r3], #2
 800553a:	bfb4      	ite	lt
 800553c:	222d      	movlt	r2, #45	; 0x2d
 800553e:	222b      	movge	r2, #43	; 0x2b
 8005540:	2909      	cmp	r1, #9
 8005542:	7042      	strb	r2, [r0, #1]
 8005544:	dd2a      	ble.n	800559c <__exponent+0x70>
 8005546:	f10d 0407 	add.w	r4, sp, #7
 800554a:	46a4      	mov	ip, r4
 800554c:	270a      	movs	r7, #10
 800554e:	46a6      	mov	lr, r4
 8005550:	460a      	mov	r2, r1
 8005552:	fb91 f6f7 	sdiv	r6, r1, r7
 8005556:	fb07 1516 	mls	r5, r7, r6, r1
 800555a:	3530      	adds	r5, #48	; 0x30
 800555c:	2a63      	cmp	r2, #99	; 0x63
 800555e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005562:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005566:	4631      	mov	r1, r6
 8005568:	dcf1      	bgt.n	800554e <__exponent+0x22>
 800556a:	3130      	adds	r1, #48	; 0x30
 800556c:	f1ae 0502 	sub.w	r5, lr, #2
 8005570:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005574:	1c44      	adds	r4, r0, #1
 8005576:	4629      	mov	r1, r5
 8005578:	4561      	cmp	r1, ip
 800557a:	d30a      	bcc.n	8005592 <__exponent+0x66>
 800557c:	f10d 0209 	add.w	r2, sp, #9
 8005580:	eba2 020e 	sub.w	r2, r2, lr
 8005584:	4565      	cmp	r5, ip
 8005586:	bf88      	it	hi
 8005588:	2200      	movhi	r2, #0
 800558a:	4413      	add	r3, r2
 800558c:	1a18      	subs	r0, r3, r0
 800558e:	b003      	add	sp, #12
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005596:	f804 2f01 	strb.w	r2, [r4, #1]!
 800559a:	e7ed      	b.n	8005578 <__exponent+0x4c>
 800559c:	2330      	movs	r3, #48	; 0x30
 800559e:	3130      	adds	r1, #48	; 0x30
 80055a0:	7083      	strb	r3, [r0, #2]
 80055a2:	70c1      	strb	r1, [r0, #3]
 80055a4:	1d03      	adds	r3, r0, #4
 80055a6:	e7f1      	b.n	800558c <__exponent+0x60>

080055a8 <_printf_float>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	ed2d 8b02 	vpush	{d8}
 80055b0:	b08d      	sub	sp, #52	; 0x34
 80055b2:	460c      	mov	r4, r1
 80055b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055b8:	4616      	mov	r6, r2
 80055ba:	461f      	mov	r7, r3
 80055bc:	4605      	mov	r5, r0
 80055be:	f001 fa6b 	bl	8006a98 <_localeconv_r>
 80055c2:	f8d0 a000 	ldr.w	sl, [r0]
 80055c6:	4650      	mov	r0, sl
 80055c8:	f7fa fe22 	bl	8000210 <strlen>
 80055cc:	2300      	movs	r3, #0
 80055ce:	930a      	str	r3, [sp, #40]	; 0x28
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	f8d8 3000 	ldr.w	r3, [r8]
 80055d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055dc:	3307      	adds	r3, #7
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	f103 0208 	add.w	r2, r3, #8
 80055e6:	f8c8 2000 	str.w	r2, [r8]
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005600:	ee08 0a10 	vmov	s16, r0
 8005604:	4b9f      	ldr	r3, [pc, #636]	; (8005884 <_printf_float+0x2dc>)
 8005606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560e:	f7fb faad 	bl	8000b6c <__aeabi_dcmpun>
 8005612:	bb88      	cbnz	r0, 8005678 <_printf_float+0xd0>
 8005614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005618:	4b9a      	ldr	r3, [pc, #616]	; (8005884 <_printf_float+0x2dc>)
 800561a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561e:	f7fb fa87 	bl	8000b30 <__aeabi_dcmple>
 8005622:	bb48      	cbnz	r0, 8005678 <_printf_float+0xd0>
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	4640      	mov	r0, r8
 800562a:	4649      	mov	r1, r9
 800562c:	f7fb fa76 	bl	8000b1c <__aeabi_dcmplt>
 8005630:	b110      	cbz	r0, 8005638 <_printf_float+0x90>
 8005632:	232d      	movs	r3, #45	; 0x2d
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005638:	4b93      	ldr	r3, [pc, #588]	; (8005888 <_printf_float+0x2e0>)
 800563a:	4894      	ldr	r0, [pc, #592]	; (800588c <_printf_float+0x2e4>)
 800563c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005640:	bf94      	ite	ls
 8005642:	4698      	movls	r8, r3
 8005644:	4680      	movhi	r8, r0
 8005646:	2303      	movs	r3, #3
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	9b05      	ldr	r3, [sp, #20]
 800564c:	f023 0204 	bic.w	r2, r3, #4
 8005650:	6022      	str	r2, [r4, #0]
 8005652:	f04f 0900 	mov.w	r9, #0
 8005656:	9700      	str	r7, [sp, #0]
 8005658:	4633      	mov	r3, r6
 800565a:	aa0b      	add	r2, sp, #44	; 0x2c
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f9d8 	bl	8005a14 <_printf_common>
 8005664:	3001      	adds	r0, #1
 8005666:	f040 8090 	bne.w	800578a <_printf_float+0x1e2>
 800566a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800566e:	b00d      	add	sp, #52	; 0x34
 8005670:	ecbd 8b02 	vpop	{d8}
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7fb fa74 	bl	8000b6c <__aeabi_dcmpun>
 8005684:	b140      	cbz	r0, 8005698 <_printf_float+0xf0>
 8005686:	464b      	mov	r3, r9
 8005688:	2b00      	cmp	r3, #0
 800568a:	bfbc      	itt	lt
 800568c:	232d      	movlt	r3, #45	; 0x2d
 800568e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005692:	487f      	ldr	r0, [pc, #508]	; (8005890 <_printf_float+0x2e8>)
 8005694:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <_printf_float+0x2ec>)
 8005696:	e7d1      	b.n	800563c <_printf_float+0x94>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800569e:	9206      	str	r2, [sp, #24]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	d13f      	bne.n	8005724 <_printf_float+0x17c>
 80056a4:	2306      	movs	r3, #6
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	9b05      	ldr	r3, [sp, #20]
 80056aa:	6861      	ldr	r1, [r4, #4]
 80056ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056b0:	2300      	movs	r3, #0
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	ab0a      	add	r3, sp, #40	; 0x28
 80056b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056ba:	ab09      	add	r3, sp, #36	; 0x24
 80056bc:	ec49 8b10 	vmov	d0, r8, r9
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	6022      	str	r2, [r4, #0]
 80056c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056c8:	4628      	mov	r0, r5
 80056ca:	f7ff fecd 	bl	8005468 <__cvt>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056d2:	2b47      	cmp	r3, #71	; 0x47
 80056d4:	4680      	mov	r8, r0
 80056d6:	d108      	bne.n	80056ea <_printf_float+0x142>
 80056d8:	1cc8      	adds	r0, r1, #3
 80056da:	db02      	blt.n	80056e2 <_printf_float+0x13a>
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	4299      	cmp	r1, r3
 80056e0:	dd41      	ble.n	8005766 <_printf_float+0x1be>
 80056e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80056e6:	fa5f fb8b 	uxtb.w	fp, fp
 80056ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056ee:	d820      	bhi.n	8005732 <_printf_float+0x18a>
 80056f0:	3901      	subs	r1, #1
 80056f2:	465a      	mov	r2, fp
 80056f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056f8:	9109      	str	r1, [sp, #36]	; 0x24
 80056fa:	f7ff ff17 	bl	800552c <__exponent>
 80056fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005700:	1813      	adds	r3, r2, r0
 8005702:	2a01      	cmp	r2, #1
 8005704:	4681      	mov	r9, r0
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	dc02      	bgt.n	8005710 <_printf_float+0x168>
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	07d2      	lsls	r2, r2, #31
 800570e:	d501      	bpl.n	8005714 <_printf_float+0x16c>
 8005710:	3301      	adds	r3, #1
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005718:	2b00      	cmp	r3, #0
 800571a:	d09c      	beq.n	8005656 <_printf_float+0xae>
 800571c:	232d      	movs	r3, #45	; 0x2d
 800571e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005722:	e798      	b.n	8005656 <_printf_float+0xae>
 8005724:	9a06      	ldr	r2, [sp, #24]
 8005726:	2a47      	cmp	r2, #71	; 0x47
 8005728:	d1be      	bne.n	80056a8 <_printf_float+0x100>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1bc      	bne.n	80056a8 <_printf_float+0x100>
 800572e:	2301      	movs	r3, #1
 8005730:	e7b9      	b.n	80056a6 <_printf_float+0xfe>
 8005732:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005736:	d118      	bne.n	800576a <_printf_float+0x1c2>
 8005738:	2900      	cmp	r1, #0
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	dd0b      	ble.n	8005756 <_printf_float+0x1ae>
 800573e:	6121      	str	r1, [r4, #16]
 8005740:	b913      	cbnz	r3, 8005748 <_printf_float+0x1a0>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	07d0      	lsls	r0, r2, #31
 8005746:	d502      	bpl.n	800574e <_printf_float+0x1a6>
 8005748:	3301      	adds	r3, #1
 800574a:	440b      	add	r3, r1
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005750:	f04f 0900 	mov.w	r9, #0
 8005754:	e7de      	b.n	8005714 <_printf_float+0x16c>
 8005756:	b913      	cbnz	r3, 800575e <_printf_float+0x1b6>
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	07d2      	lsls	r2, r2, #31
 800575c:	d501      	bpl.n	8005762 <_printf_float+0x1ba>
 800575e:	3302      	adds	r3, #2
 8005760:	e7f4      	b.n	800574c <_printf_float+0x1a4>
 8005762:	2301      	movs	r3, #1
 8005764:	e7f2      	b.n	800574c <_printf_float+0x1a4>
 8005766:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800576a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576c:	4299      	cmp	r1, r3
 800576e:	db05      	blt.n	800577c <_printf_float+0x1d4>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	6121      	str	r1, [r4, #16]
 8005774:	07d8      	lsls	r0, r3, #31
 8005776:	d5ea      	bpl.n	800574e <_printf_float+0x1a6>
 8005778:	1c4b      	adds	r3, r1, #1
 800577a:	e7e7      	b.n	800574c <_printf_float+0x1a4>
 800577c:	2900      	cmp	r1, #0
 800577e:	bfd4      	ite	le
 8005780:	f1c1 0202 	rsble	r2, r1, #2
 8005784:	2201      	movgt	r2, #1
 8005786:	4413      	add	r3, r2
 8005788:	e7e0      	b.n	800574c <_printf_float+0x1a4>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	055a      	lsls	r2, r3, #21
 800578e:	d407      	bmi.n	80057a0 <_printf_float+0x1f8>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	4642      	mov	r2, r8
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	d12c      	bne.n	80057f8 <_printf_float+0x250>
 800579e:	e764      	b.n	800566a <_printf_float+0xc2>
 80057a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057a4:	f240 80e0 	bls.w	8005968 <_printf_float+0x3c0>
 80057a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057ac:	2200      	movs	r2, #0
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7fb f9aa 	bl	8000b08 <__aeabi_dcmpeq>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d034      	beq.n	8005822 <_printf_float+0x27a>
 80057b8:	4a37      	ldr	r2, [pc, #220]	; (8005898 <_printf_float+0x2f0>)
 80057ba:	2301      	movs	r3, #1
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f af51 	beq.w	800566a <_printf_float+0xc2>
 80057c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057cc:	429a      	cmp	r2, r3
 80057ce:	db02      	blt.n	80057d6 <_printf_float+0x22e>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07d8      	lsls	r0, r3, #31
 80057d4:	d510      	bpl.n	80057f8 <_printf_float+0x250>
 80057d6:	ee18 3a10 	vmov	r3, s16
 80057da:	4652      	mov	r2, sl
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f af41 	beq.w	800566a <_printf_float+0xc2>
 80057e8:	f04f 0800 	mov.w	r8, #0
 80057ec:	f104 091a 	add.w	r9, r4, #26
 80057f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4543      	cmp	r3, r8
 80057f6:	dc09      	bgt.n	800580c <_printf_float+0x264>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	079b      	lsls	r3, r3, #30
 80057fc:	f100 8105 	bmi.w	8005a0a <_printf_float+0x462>
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005804:	4298      	cmp	r0, r3
 8005806:	bfb8      	it	lt
 8005808:	4618      	movlt	r0, r3
 800580a:	e730      	b.n	800566e <_printf_float+0xc6>
 800580c:	2301      	movs	r3, #1
 800580e:	464a      	mov	r2, r9
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	f43f af27 	beq.w	800566a <_printf_float+0xc2>
 800581c:	f108 0801 	add.w	r8, r8, #1
 8005820:	e7e6      	b.n	80057f0 <_printf_float+0x248>
 8005822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	dc39      	bgt.n	800589c <_printf_float+0x2f4>
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <_printf_float+0x2f0>)
 800582a:	2301      	movs	r3, #1
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f af19 	beq.w	800566a <_printf_float+0xc2>
 8005838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800583c:	4313      	orrs	r3, r2
 800583e:	d102      	bne.n	8005846 <_printf_float+0x29e>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	07d9      	lsls	r1, r3, #31
 8005844:	d5d8      	bpl.n	80057f8 <_printf_float+0x250>
 8005846:	ee18 3a10 	vmov	r3, s16
 800584a:	4652      	mov	r2, sl
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f af09 	beq.w	800566a <_printf_float+0xc2>
 8005858:	f04f 0900 	mov.w	r9, #0
 800585c:	f104 0a1a 	add.w	sl, r4, #26
 8005860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005862:	425b      	negs	r3, r3
 8005864:	454b      	cmp	r3, r9
 8005866:	dc01      	bgt.n	800586c <_printf_float+0x2c4>
 8005868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586a:	e792      	b.n	8005792 <_printf_float+0x1ea>
 800586c:	2301      	movs	r3, #1
 800586e:	4652      	mov	r2, sl
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f aef7 	beq.w	800566a <_printf_float+0xc2>
 800587c:	f109 0901 	add.w	r9, r9, #1
 8005880:	e7ee      	b.n	8005860 <_printf_float+0x2b8>
 8005882:	bf00      	nop
 8005884:	7fefffff 	.word	0x7fefffff
 8005888:	0800820c 	.word	0x0800820c
 800588c:	08008210 	.word	0x08008210
 8005890:	08008218 	.word	0x08008218
 8005894:	08008214 	.word	0x08008214
 8005898:	0800821c 	.word	0x0800821c
 800589c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800589e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a0:	429a      	cmp	r2, r3
 80058a2:	bfa8      	it	ge
 80058a4:	461a      	movge	r2, r3
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	4691      	mov	r9, r2
 80058aa:	dc37      	bgt.n	800591c <_printf_float+0x374>
 80058ac:	f04f 0b00 	mov.w	fp, #0
 80058b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b4:	f104 021a 	add.w	r2, r4, #26
 80058b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ba:	9305      	str	r3, [sp, #20]
 80058bc:	eba3 0309 	sub.w	r3, r3, r9
 80058c0:	455b      	cmp	r3, fp
 80058c2:	dc33      	bgt.n	800592c <_printf_float+0x384>
 80058c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c8:	429a      	cmp	r2, r3
 80058ca:	db3b      	blt.n	8005944 <_printf_float+0x39c>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07da      	lsls	r2, r3, #31
 80058d0:	d438      	bmi.n	8005944 <_printf_float+0x39c>
 80058d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d4:	9b05      	ldr	r3, [sp, #20]
 80058d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	eba2 0901 	sub.w	r9, r2, r1
 80058de:	4599      	cmp	r9, r3
 80058e0:	bfa8      	it	ge
 80058e2:	4699      	movge	r9, r3
 80058e4:	f1b9 0f00 	cmp.w	r9, #0
 80058e8:	dc35      	bgt.n	8005956 <_printf_float+0x3ae>
 80058ea:	f04f 0800 	mov.w	r8, #0
 80058ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058f2:	f104 0a1a 	add.w	sl, r4, #26
 80058f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	eba3 0309 	sub.w	r3, r3, r9
 8005900:	4543      	cmp	r3, r8
 8005902:	f77f af79 	ble.w	80057f8 <_printf_float+0x250>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f aeaa 	beq.w	800566a <_printf_float+0xc2>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	e7ec      	b.n	80058f6 <_printf_float+0x34e>
 800591c:	4613      	mov	r3, r2
 800591e:	4631      	mov	r1, r6
 8005920:	4642      	mov	r2, r8
 8005922:	4628      	mov	r0, r5
 8005924:	47b8      	blx	r7
 8005926:	3001      	adds	r0, #1
 8005928:	d1c0      	bne.n	80058ac <_printf_float+0x304>
 800592a:	e69e      	b.n	800566a <_printf_float+0xc2>
 800592c:	2301      	movs	r3, #1
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	9205      	str	r2, [sp, #20]
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f ae97 	beq.w	800566a <_printf_float+0xc2>
 800593c:	9a05      	ldr	r2, [sp, #20]
 800593e:	f10b 0b01 	add.w	fp, fp, #1
 8005942:	e7b9      	b.n	80058b8 <_printf_float+0x310>
 8005944:	ee18 3a10 	vmov	r3, s16
 8005948:	4652      	mov	r2, sl
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	d1be      	bne.n	80058d2 <_printf_float+0x32a>
 8005954:	e689      	b.n	800566a <_printf_float+0xc2>
 8005956:	9a05      	ldr	r2, [sp, #20]
 8005958:	464b      	mov	r3, r9
 800595a:	4442      	add	r2, r8
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	d1c1      	bne.n	80058ea <_printf_float+0x342>
 8005966:	e680      	b.n	800566a <_printf_float+0xc2>
 8005968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800596a:	2a01      	cmp	r2, #1
 800596c:	dc01      	bgt.n	8005972 <_printf_float+0x3ca>
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d538      	bpl.n	80059e4 <_printf_float+0x43c>
 8005972:	2301      	movs	r3, #1
 8005974:	4642      	mov	r2, r8
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f ae74 	beq.w	800566a <_printf_float+0xc2>
 8005982:	ee18 3a10 	vmov	r3, s16
 8005986:	4652      	mov	r2, sl
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f ae6b 	beq.w	800566a <_printf_float+0xc2>
 8005994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	f7fb f8b4 	bl	8000b08 <__aeabi_dcmpeq>
 80059a0:	b9d8      	cbnz	r0, 80059da <_printf_float+0x432>
 80059a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a4:	f108 0201 	add.w	r2, r8, #1
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	d10e      	bne.n	80059d2 <_printf_float+0x42a>
 80059b4:	e659      	b.n	800566a <_printf_float+0xc2>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae52 	beq.w	800566a <_printf_float+0xc2>
 80059c6:	f108 0801 	add.w	r8, r8, #1
 80059ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4543      	cmp	r3, r8
 80059d0:	dcf1      	bgt.n	80059b6 <_printf_float+0x40e>
 80059d2:	464b      	mov	r3, r9
 80059d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059d8:	e6dc      	b.n	8005794 <_printf_float+0x1ec>
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	f104 0a1a 	add.w	sl, r4, #26
 80059e2:	e7f2      	b.n	80059ca <_printf_float+0x422>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4642      	mov	r2, r8
 80059e8:	e7df      	b.n	80059aa <_printf_float+0x402>
 80059ea:	2301      	movs	r3, #1
 80059ec:	464a      	mov	r2, r9
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	f43f ae38 	beq.w	800566a <_printf_float+0xc2>
 80059fa:	f108 0801 	add.w	r8, r8, #1
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a02:	1a5b      	subs	r3, r3, r1
 8005a04:	4543      	cmp	r3, r8
 8005a06:	dcf0      	bgt.n	80059ea <_printf_float+0x442>
 8005a08:	e6fa      	b.n	8005800 <_printf_float+0x258>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	f104 0919 	add.w	r9, r4, #25
 8005a12:	e7f4      	b.n	80059fe <_printf_float+0x456>

08005a14 <_printf_common>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	4616      	mov	r6, r2
 8005a1a:	4699      	mov	r9, r3
 8005a1c:	688a      	ldr	r2, [r1, #8]
 8005a1e:	690b      	ldr	r3, [r1, #16]
 8005a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	bfb8      	it	lt
 8005a28:	4613      	movlt	r3, r2
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a30:	4607      	mov	r7, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	b10a      	cbz	r2, 8005a3a <_printf_common+0x26>
 8005a36:	3301      	adds	r3, #1
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	0699      	lsls	r1, r3, #26
 8005a3e:	bf42      	ittt	mi
 8005a40:	6833      	ldrmi	r3, [r6, #0]
 8005a42:	3302      	addmi	r3, #2
 8005a44:	6033      	strmi	r3, [r6, #0]
 8005a46:	6825      	ldr	r5, [r4, #0]
 8005a48:	f015 0506 	ands.w	r5, r5, #6
 8005a4c:	d106      	bne.n	8005a5c <_printf_common+0x48>
 8005a4e:	f104 0a19 	add.w	sl, r4, #25
 8005a52:	68e3      	ldr	r3, [r4, #12]
 8005a54:	6832      	ldr	r2, [r6, #0]
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	42ab      	cmp	r3, r5
 8005a5a:	dc26      	bgt.n	8005aaa <_printf_common+0x96>
 8005a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a60:	1e13      	subs	r3, r2, #0
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	bf18      	it	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	0692      	lsls	r2, r2, #26
 8005a6a:	d42b      	bmi.n	8005ac4 <_printf_common+0xb0>
 8005a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a70:	4649      	mov	r1, r9
 8005a72:	4638      	mov	r0, r7
 8005a74:	47c0      	blx	r8
 8005a76:	3001      	adds	r0, #1
 8005a78:	d01e      	beq.n	8005ab8 <_printf_common+0xa4>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	68e5      	ldr	r5, [r4, #12]
 8005a7e:	6832      	ldr	r2, [r6, #0]
 8005a80:	f003 0306 	and.w	r3, r3, #6
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	bf08      	it	eq
 8005a88:	1aad      	subeq	r5, r5, r2
 8005a8a:	68a3      	ldr	r3, [r4, #8]
 8005a8c:	6922      	ldr	r2, [r4, #16]
 8005a8e:	bf0c      	ite	eq
 8005a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a94:	2500      	movne	r5, #0
 8005a96:	4293      	cmp	r3, r2
 8005a98:	bfc4      	itt	gt
 8005a9a:	1a9b      	subgt	r3, r3, r2
 8005a9c:	18ed      	addgt	r5, r5, r3
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	341a      	adds	r4, #26
 8005aa2:	42b5      	cmp	r5, r6
 8005aa4:	d11a      	bne.n	8005adc <_printf_common+0xc8>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e008      	b.n	8005abc <_printf_common+0xa8>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4652      	mov	r2, sl
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	47c0      	blx	r8
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d103      	bne.n	8005ac0 <_printf_common+0xac>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	e7c6      	b.n	8005a52 <_printf_common+0x3e>
 8005ac4:	18e1      	adds	r1, r4, r3
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	2030      	movs	r0, #48	; 0x30
 8005aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ace:	4422      	add	r2, r4
 8005ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ad8:	3302      	adds	r3, #2
 8005ada:	e7c7      	b.n	8005a6c <_printf_common+0x58>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4622      	mov	r2, r4
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d0e6      	beq.n	8005ab8 <_printf_common+0xa4>
 8005aea:	3601      	adds	r6, #1
 8005aec:	e7d9      	b.n	8005aa2 <_printf_common+0x8e>
	...

08005af0 <_printf_i>:
 8005af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	460c      	mov	r4, r1
 8005af6:	4691      	mov	r9, r2
 8005af8:	7e27      	ldrb	r7, [r4, #24]
 8005afa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005afc:	2f78      	cmp	r7, #120	; 0x78
 8005afe:	4680      	mov	r8, r0
 8005b00:	469a      	mov	sl, r3
 8005b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b06:	d807      	bhi.n	8005b18 <_printf_i+0x28>
 8005b08:	2f62      	cmp	r7, #98	; 0x62
 8005b0a:	d80a      	bhi.n	8005b22 <_printf_i+0x32>
 8005b0c:	2f00      	cmp	r7, #0
 8005b0e:	f000 80d8 	beq.w	8005cc2 <_printf_i+0x1d2>
 8005b12:	2f58      	cmp	r7, #88	; 0x58
 8005b14:	f000 80a3 	beq.w	8005c5e <_printf_i+0x16e>
 8005b18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b20:	e03a      	b.n	8005b98 <_printf_i+0xa8>
 8005b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b26:	2b15      	cmp	r3, #21
 8005b28:	d8f6      	bhi.n	8005b18 <_printf_i+0x28>
 8005b2a:	a001      	add	r0, pc, #4	; (adr r0, 8005b30 <_printf_i+0x40>)
 8005b2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b9d 	.word	0x08005b9d
 8005b38:	08005b19 	.word	0x08005b19
 8005b3c:	08005b19 	.word	0x08005b19
 8005b40:	08005b19 	.word	0x08005b19
 8005b44:	08005b19 	.word	0x08005b19
 8005b48:	08005b9d 	.word	0x08005b9d
 8005b4c:	08005b19 	.word	0x08005b19
 8005b50:	08005b19 	.word	0x08005b19
 8005b54:	08005b19 	.word	0x08005b19
 8005b58:	08005b19 	.word	0x08005b19
 8005b5c:	08005ca9 	.word	0x08005ca9
 8005b60:	08005bcd 	.word	0x08005bcd
 8005b64:	08005c8b 	.word	0x08005c8b
 8005b68:	08005b19 	.word	0x08005b19
 8005b6c:	08005b19 	.word	0x08005b19
 8005b70:	08005ccb 	.word	0x08005ccb
 8005b74:	08005b19 	.word	0x08005b19
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005b19 	.word	0x08005b19
 8005b80:	08005b19 	.word	0x08005b19
 8005b84:	08005c93 	.word	0x08005c93
 8005b88:	680b      	ldr	r3, [r1, #0]
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	600a      	str	r2, [r1, #0]
 8005b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e0a3      	b.n	8005ce4 <_printf_i+0x1f4>
 8005b9c:	6825      	ldr	r5, [r4, #0]
 8005b9e:	6808      	ldr	r0, [r1, #0]
 8005ba0:	062e      	lsls	r6, r5, #24
 8005ba2:	f100 0304 	add.w	r3, r0, #4
 8005ba6:	d50a      	bpl.n	8005bbe <_printf_i+0xce>
 8005ba8:	6805      	ldr	r5, [r0, #0]
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	da03      	bge.n	8005bb8 <_printf_i+0xc8>
 8005bb0:	232d      	movs	r3, #45	; 0x2d
 8005bb2:	426d      	negs	r5, r5
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb8:	485e      	ldr	r0, [pc, #376]	; (8005d34 <_printf_i+0x244>)
 8005bba:	230a      	movs	r3, #10
 8005bbc:	e019      	b.n	8005bf2 <_printf_i+0x102>
 8005bbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bc2:	6805      	ldr	r5, [r0, #0]
 8005bc4:	600b      	str	r3, [r1, #0]
 8005bc6:	bf18      	it	ne
 8005bc8:	b22d      	sxthne	r5, r5
 8005bca:	e7ef      	b.n	8005bac <_printf_i+0xbc>
 8005bcc:	680b      	ldr	r3, [r1, #0]
 8005bce:	6825      	ldr	r5, [r4, #0]
 8005bd0:	1d18      	adds	r0, r3, #4
 8005bd2:	6008      	str	r0, [r1, #0]
 8005bd4:	0628      	lsls	r0, r5, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xec>
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	e002      	b.n	8005be2 <_printf_i+0xf2>
 8005bdc:	0669      	lsls	r1, r5, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xe8>
 8005be0:	881d      	ldrh	r5, [r3, #0]
 8005be2:	4854      	ldr	r0, [pc, #336]	; (8005d34 <_printf_i+0x244>)
 8005be4:	2f6f      	cmp	r7, #111	; 0x6f
 8005be6:	bf0c      	ite	eq
 8005be8:	2308      	moveq	r3, #8
 8005bea:	230a      	movne	r3, #10
 8005bec:	2100      	movs	r1, #0
 8005bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf2:	6866      	ldr	r6, [r4, #4]
 8005bf4:	60a6      	str	r6, [r4, #8]
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	bfa2      	ittt	ge
 8005bfa:	6821      	ldrge	r1, [r4, #0]
 8005bfc:	f021 0104 	bicge.w	r1, r1, #4
 8005c00:	6021      	strge	r1, [r4, #0]
 8005c02:	b90d      	cbnz	r5, 8005c08 <_printf_i+0x118>
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	d04d      	beq.n	8005ca4 <_printf_i+0x1b4>
 8005c08:	4616      	mov	r6, r2
 8005c0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c12:	5dc7      	ldrb	r7, [r0, r7]
 8005c14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c18:	462f      	mov	r7, r5
 8005c1a:	42bb      	cmp	r3, r7
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	d9f4      	bls.n	8005c0a <_printf_i+0x11a>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d10b      	bne.n	8005c3c <_printf_i+0x14c>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07df      	lsls	r7, r3, #31
 8005c28:	d508      	bpl.n	8005c3c <_printf_i+0x14c>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	bfde      	ittt	le
 8005c32:	2330      	movle	r3, #48	; 0x30
 8005c34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c38:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005c3c:	1b92      	subs	r2, r2, r6
 8005c3e:	6122      	str	r2, [r4, #16]
 8005c40:	f8cd a000 	str.w	sl, [sp]
 8005c44:	464b      	mov	r3, r9
 8005c46:	aa03      	add	r2, sp, #12
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff fee2 	bl	8005a14 <_printf_common>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d14c      	bne.n	8005cee <_printf_i+0x1fe>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c58:	b004      	add	sp, #16
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	4835      	ldr	r0, [pc, #212]	; (8005d34 <_printf_i+0x244>)
 8005c60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	680e      	ldr	r6, [r1, #0]
 8005c68:	061f      	lsls	r7, r3, #24
 8005c6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c6e:	600e      	str	r6, [r1, #0]
 8005c70:	d514      	bpl.n	8005c9c <_printf_i+0x1ac>
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	bf44      	itt	mi
 8005c76:	f043 0320 	orrmi.w	r3, r3, #32
 8005c7a:	6023      	strmi	r3, [r4, #0]
 8005c7c:	b91d      	cbnz	r5, 8005c86 <_printf_i+0x196>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	f023 0320 	bic.w	r3, r3, #32
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	2310      	movs	r3, #16
 8005c88:	e7b0      	b.n	8005bec <_printf_i+0xfc>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	f043 0320 	orr.w	r3, r3, #32
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	2378      	movs	r3, #120	; 0x78
 8005c94:	4828      	ldr	r0, [pc, #160]	; (8005d38 <_printf_i+0x248>)
 8005c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c9a:	e7e3      	b.n	8005c64 <_printf_i+0x174>
 8005c9c:	065e      	lsls	r6, r3, #25
 8005c9e:	bf48      	it	mi
 8005ca0:	b2ad      	uxthmi	r5, r5
 8005ca2:	e7e6      	b.n	8005c72 <_printf_i+0x182>
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	e7bb      	b.n	8005c20 <_printf_i+0x130>
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	6826      	ldr	r6, [r4, #0]
 8005cac:	6960      	ldr	r0, [r4, #20]
 8005cae:	1d1d      	adds	r5, r3, #4
 8005cb0:	600d      	str	r5, [r1, #0]
 8005cb2:	0635      	lsls	r5, r6, #24
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0x1cc>
 8005cb8:	6018      	str	r0, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0x1d2>
 8005cbc:	0671      	lsls	r1, r6, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0x1c8>
 8005cc0:	8018      	strh	r0, [r3, #0]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	4616      	mov	r6, r2
 8005cc8:	e7ba      	b.n	8005c40 <_printf_i+0x150>
 8005cca:	680b      	ldr	r3, [r1, #0]
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	600a      	str	r2, [r1, #0]
 8005cd0:	681e      	ldr	r6, [r3, #0]
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f7fa faa2 	bl	8000220 <memchr>
 8005cdc:	b108      	cbz	r0, 8005ce2 <_printf_i+0x1f2>
 8005cde:	1b80      	subs	r0, r0, r6
 8005ce0:	6060      	str	r0, [r4, #4]
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cec:	e7a8      	b.n	8005c40 <_printf_i+0x150>
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d0ab      	beq.n	8005c54 <_printf_i+0x164>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	079b      	lsls	r3, r3, #30
 8005d00:	d413      	bmi.n	8005d2a <_printf_i+0x23a>
 8005d02:	68e0      	ldr	r0, [r4, #12]
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	4298      	cmp	r0, r3
 8005d08:	bfb8      	it	lt
 8005d0a:	4618      	movlt	r0, r3
 8005d0c:	e7a4      	b.n	8005c58 <_printf_i+0x168>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4632      	mov	r2, r6
 8005d12:	4649      	mov	r1, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	47d0      	blx	sl
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d09b      	beq.n	8005c54 <_printf_i+0x164>
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	9903      	ldr	r1, [sp, #12]
 8005d22:	1a5b      	subs	r3, r3, r1
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dcf2      	bgt.n	8005d0e <_printf_i+0x21e>
 8005d28:	e7eb      	b.n	8005d02 <_printf_i+0x212>
 8005d2a:	2500      	movs	r5, #0
 8005d2c:	f104 0619 	add.w	r6, r4, #25
 8005d30:	e7f5      	b.n	8005d1e <_printf_i+0x22e>
 8005d32:	bf00      	nop
 8005d34:	0800821e 	.word	0x0800821e
 8005d38:	0800822f 	.word	0x0800822f

08005d3c <sniprintf>:
 8005d3c:	b40c      	push	{r2, r3}
 8005d3e:	b530      	push	{r4, r5, lr}
 8005d40:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <sniprintf+0x64>)
 8005d42:	1e0c      	subs	r4, r1, #0
 8005d44:	681d      	ldr	r5, [r3, #0]
 8005d46:	b09d      	sub	sp, #116	; 0x74
 8005d48:	da08      	bge.n	8005d5c <sniprintf+0x20>
 8005d4a:	238b      	movs	r3, #139	; 0x8b
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d52:	b01d      	add	sp, #116	; 0x74
 8005d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d58:	b002      	add	sp, #8
 8005d5a:	4770      	bx	lr
 8005d5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d64:	bf14      	ite	ne
 8005d66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005d6a:	4623      	moveq	r3, r4
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	9307      	str	r3, [sp, #28]
 8005d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d7e:	ab21      	add	r3, sp, #132	; 0x84
 8005d80:	a902      	add	r1, sp, #8
 8005d82:	4628      	mov	r0, r5
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f001 fb35 	bl	80073f4 <_svfiprintf_r>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	bfbc      	itt	lt
 8005d8e:	238b      	movlt	r3, #139	; 0x8b
 8005d90:	602b      	strlt	r3, [r5, #0]
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d0dd      	beq.n	8005d52 <sniprintf+0x16>
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	e7d9      	b.n	8005d52 <sniprintf+0x16>
 8005d9e:	bf00      	nop
 8005da0:	2000000c 	.word	0x2000000c

08005da4 <quorem>:
 8005da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	6903      	ldr	r3, [r0, #16]
 8005daa:	690c      	ldr	r4, [r1, #16]
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	4607      	mov	r7, r0
 8005db0:	f2c0 8081 	blt.w	8005eb6 <quorem+0x112>
 8005db4:	3c01      	subs	r4, #1
 8005db6:	f101 0814 	add.w	r8, r1, #20
 8005dba:	f100 0514 	add.w	r5, r0, #20
 8005dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ddc:	d331      	bcc.n	8005e42 <quorem+0x9e>
 8005dde:	f04f 0e00 	mov.w	lr, #0
 8005de2:	4640      	mov	r0, r8
 8005de4:	46ac      	mov	ip, r5
 8005de6:	46f2      	mov	sl, lr
 8005de8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dec:	b293      	uxth	r3, r2
 8005dee:	fb06 e303 	mla	r3, r6, r3, lr
 8005df2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ebaa 0303 	sub.w	r3, sl, r3
 8005dfc:	0c12      	lsrs	r2, r2, #16
 8005dfe:	f8dc a000 	ldr.w	sl, [ip]
 8005e02:	fb06 e202 	mla	r2, r6, r2, lr
 8005e06:	fa13 f38a 	uxtah	r3, r3, sl
 8005e0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e0e:	fa1f fa82 	uxth.w	sl, r2
 8005e12:	f8dc 2000 	ldr.w	r2, [ip]
 8005e16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e24:	4581      	cmp	r9, r0
 8005e26:	f84c 3b04 	str.w	r3, [ip], #4
 8005e2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e2e:	d2db      	bcs.n	8005de8 <quorem+0x44>
 8005e30:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e34:	b92b      	cbnz	r3, 8005e42 <quorem+0x9e>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	3b04      	subs	r3, #4
 8005e3a:	429d      	cmp	r5, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	d32e      	bcc.n	8005e9e <quorem+0xfa>
 8005e40:	613c      	str	r4, [r7, #16]
 8005e42:	4638      	mov	r0, r7
 8005e44:	f001 f8c0 	bl	8006fc8 <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	db24      	blt.n	8005e96 <quorem+0xf2>
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f04f 0c00 	mov.w	ip, #0
 8005e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e58:	f8d0 e000 	ldr.w	lr, [r0]
 8005e5c:	b293      	uxth	r3, r2
 8005e5e:	ebac 0303 	sub.w	r3, ip, r3
 8005e62:	0c12      	lsrs	r2, r2, #16
 8005e64:	fa13 f38e 	uxtah	r3, r3, lr
 8005e68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e76:	45c1      	cmp	r9, r8
 8005e78:	f840 3b04 	str.w	r3, [r0], #4
 8005e7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e80:	d2e8      	bcs.n	8005e54 <quorem+0xb0>
 8005e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e8a:	b922      	cbnz	r2, 8005e96 <quorem+0xf2>
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	d30a      	bcc.n	8005eaa <quorem+0x106>
 8005e94:	613c      	str	r4, [r7, #16]
 8005e96:	4630      	mov	r0, r6
 8005e98:	b003      	add	sp, #12
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	d1cc      	bne.n	8005e40 <quorem+0x9c>
 8005ea6:	3c01      	subs	r4, #1
 8005ea8:	e7c7      	b.n	8005e3a <quorem+0x96>
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d1f0      	bne.n	8005e94 <quorem+0xf0>
 8005eb2:	3c01      	subs	r4, #1
 8005eb4:	e7eb      	b.n	8005e8e <quorem+0xea>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e7ee      	b.n	8005e98 <quorem+0xf4>
 8005eba:	0000      	movs	r0, r0
 8005ebc:	0000      	movs	r0, r0
	...

08005ec0 <_dtoa_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	ed2d 8b02 	vpush	{d8}
 8005ec8:	ec57 6b10 	vmov	r6, r7, d0
 8005ecc:	b095      	sub	sp, #84	; 0x54
 8005ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ed4:	9105      	str	r1, [sp, #20]
 8005ed6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005eda:	4604      	mov	r4, r0
 8005edc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ee0:	b975      	cbnz	r5, 8005f00 <_dtoa_r+0x40>
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	f000 fddc 	bl	8006aa0 <malloc>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6260      	str	r0, [r4, #36]	; 0x24
 8005eec:	b920      	cbnz	r0, 8005ef8 <_dtoa_r+0x38>
 8005eee:	4bb2      	ldr	r3, [pc, #712]	; (80061b8 <_dtoa_r+0x2f8>)
 8005ef0:	21ea      	movs	r1, #234	; 0xea
 8005ef2:	48b2      	ldr	r0, [pc, #712]	; (80061bc <_dtoa_r+0x2fc>)
 8005ef4:	f001 fb8e 	bl	8007614 <__assert_func>
 8005ef8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005efc:	6005      	str	r5, [r0, #0]
 8005efe:	60c5      	str	r5, [r0, #12]
 8005f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	b151      	cbz	r1, 8005f1c <_dtoa_r+0x5c>
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	604a      	str	r2, [r1, #4]
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4093      	lsls	r3, r2
 8005f0e:	608b      	str	r3, [r1, #8]
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fe1b 	bl	8006b4c <_Bfree>
 8005f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	1e3b      	subs	r3, r7, #0
 8005f1e:	bfb9      	ittee	lt
 8005f20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	9303      	strlt	r3, [sp, #12]
 8005f26:	2300      	movge	r3, #0
 8005f28:	f8c8 3000 	strge.w	r3, [r8]
 8005f2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005f30:	4ba3      	ldr	r3, [pc, #652]	; (80061c0 <_dtoa_r+0x300>)
 8005f32:	bfbc      	itt	lt
 8005f34:	2201      	movlt	r2, #1
 8005f36:	f8c8 2000 	strlt.w	r2, [r8]
 8005f3a:	ea33 0309 	bics.w	r3, r3, r9
 8005f3e:	d11b      	bne.n	8005f78 <_dtoa_r+0xb8>
 8005f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f42:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f4c:	4333      	orrs	r3, r6
 8005f4e:	f000 857a 	beq.w	8006a46 <_dtoa_r+0xb86>
 8005f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f54:	b963      	cbnz	r3, 8005f70 <_dtoa_r+0xb0>
 8005f56:	4b9b      	ldr	r3, [pc, #620]	; (80061c4 <_dtoa_r+0x304>)
 8005f58:	e024      	b.n	8005fa4 <_dtoa_r+0xe4>
 8005f5a:	4b9b      	ldr	r3, [pc, #620]	; (80061c8 <_dtoa_r+0x308>)
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	9800      	ldr	r0, [sp, #0]
 8005f66:	b015      	add	sp, #84	; 0x54
 8005f68:	ecbd 8b02 	vpop	{d8}
 8005f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	4b94      	ldr	r3, [pc, #592]	; (80061c4 <_dtoa_r+0x304>)
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	3303      	adds	r3, #3
 8005f76:	e7f3      	b.n	8005f60 <_dtoa_r+0xa0>
 8005f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	ec51 0b17 	vmov	r0, r1, d7
 8005f82:	2300      	movs	r3, #0
 8005f84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005f88:	f7fa fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	b158      	cbz	r0, 8005fa8 <_dtoa_r+0xe8>
 8005f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f92:	2301      	movs	r3, #1
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8551 	beq.w	8006a40 <_dtoa_r+0xb80>
 8005f9e:	488b      	ldr	r0, [pc, #556]	; (80061cc <_dtoa_r+0x30c>)
 8005fa0:	6018      	str	r0, [r3, #0]
 8005fa2:	1e43      	subs	r3, r0, #1
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	e7dd      	b.n	8005f64 <_dtoa_r+0xa4>
 8005fa8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005fac:	aa12      	add	r2, sp, #72	; 0x48
 8005fae:	a913      	add	r1, sp, #76	; 0x4c
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f001 f8ad 	bl	8007110 <__d2b>
 8005fb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fba:	4683      	mov	fp, r0
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	d07c      	beq.n	80060ba <_dtoa_r+0x1fa>
 8005fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005fce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fda:	4b7d      	ldr	r3, [pc, #500]	; (80061d0 <_dtoa_r+0x310>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f971 	bl	80002c8 <__aeabi_dsub>
 8005fe6:	a36e      	add	r3, pc, #440	; (adr r3, 80061a0 <_dtoa_r+0x2e0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa fb24 	bl	8000638 <__aeabi_dmul>
 8005ff0:	a36d      	add	r3, pc, #436	; (adr r3, 80061a8 <_dtoa_r+0x2e8>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa f969 	bl	80002cc <__adddf3>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	460f      	mov	r7, r1
 8006000:	f7fa fab0 	bl	8000564 <__aeabi_i2d>
 8006004:	a36a      	add	r3, pc, #424	; (adr r3, 80061b0 <_dtoa_r+0x2f0>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f7fa fb15 	bl	8000638 <__aeabi_dmul>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa f959 	bl	80002cc <__adddf3>
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	f7fa fdbb 	bl	8000b98 <__aeabi_d2iz>
 8006022:	2200      	movs	r2, #0
 8006024:	4682      	mov	sl, r0
 8006026:	2300      	movs	r3, #0
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa fd76 	bl	8000b1c <__aeabi_dcmplt>
 8006030:	b148      	cbz	r0, 8006046 <_dtoa_r+0x186>
 8006032:	4650      	mov	r0, sl
 8006034:	f7fa fa96 	bl	8000564 <__aeabi_i2d>
 8006038:	4632      	mov	r2, r6
 800603a:	463b      	mov	r3, r7
 800603c:	f7fa fd64 	bl	8000b08 <__aeabi_dcmpeq>
 8006040:	b908      	cbnz	r0, 8006046 <_dtoa_r+0x186>
 8006042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006046:	f1ba 0f16 	cmp.w	sl, #22
 800604a:	d854      	bhi.n	80060f6 <_dtoa_r+0x236>
 800604c:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <_dtoa_r+0x314>)
 800604e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800605a:	f7fa fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d04b      	beq.n	80060fa <_dtoa_r+0x23a>
 8006062:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006066:	2300      	movs	r3, #0
 8006068:	930e      	str	r3, [sp, #56]	; 0x38
 800606a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800606c:	1b5d      	subs	r5, r3, r5
 800606e:	1e6b      	subs	r3, r5, #1
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	bf43      	ittte	mi
 8006074:	2300      	movmi	r3, #0
 8006076:	f1c5 0801 	rsbmi	r8, r5, #1
 800607a:	9304      	strmi	r3, [sp, #16]
 800607c:	f04f 0800 	movpl.w	r8, #0
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	db3b      	blt.n	80060fe <_dtoa_r+0x23e>
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800608c:	4453      	add	r3, sl
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	2300      	movs	r3, #0
 8006092:	9306      	str	r3, [sp, #24]
 8006094:	9b05      	ldr	r3, [sp, #20]
 8006096:	2b09      	cmp	r3, #9
 8006098:	d869      	bhi.n	800616e <_dtoa_r+0x2ae>
 800609a:	2b05      	cmp	r3, #5
 800609c:	bfc4      	itt	gt
 800609e:	3b04      	subgt	r3, #4
 80060a0:	9305      	strgt	r3, [sp, #20]
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	f1a3 0302 	sub.w	r3, r3, #2
 80060a8:	bfcc      	ite	gt
 80060aa:	2500      	movgt	r5, #0
 80060ac:	2501      	movle	r5, #1
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d869      	bhi.n	8006186 <_dtoa_r+0x2c6>
 80060b2:	e8df f003 	tbb	[pc, r3]
 80060b6:	4e2c      	.short	0x4e2c
 80060b8:	5a4c      	.short	0x5a4c
 80060ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80060be:	441d      	add	r5, r3
 80060c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	bfc1      	itttt	gt
 80060c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80060d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060d8:	bfda      	itte	le
 80060da:	f1c3 0320 	rsble	r3, r3, #32
 80060de:	fa06 f003 	lslle.w	r0, r6, r3
 80060e2:	4318      	orrgt	r0, r3
 80060e4:	f7fa fa2e 	bl	8000544 <__aeabi_ui2d>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4606      	mov	r6, r0
 80060ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060f0:	3d01      	subs	r5, #1
 80060f2:	9310      	str	r3, [sp, #64]	; 0x40
 80060f4:	e771      	b.n	8005fda <_dtoa_r+0x11a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7b6      	b.n	8006068 <_dtoa_r+0x1a8>
 80060fa:	900e      	str	r0, [sp, #56]	; 0x38
 80060fc:	e7b5      	b.n	800606a <_dtoa_r+0x1aa>
 80060fe:	f1ca 0300 	rsb	r3, sl, #0
 8006102:	9306      	str	r3, [sp, #24]
 8006104:	2300      	movs	r3, #0
 8006106:	eba8 080a 	sub.w	r8, r8, sl
 800610a:	930d      	str	r3, [sp, #52]	; 0x34
 800610c:	e7c2      	b.n	8006094 <_dtoa_r+0x1d4>
 800610e:	2300      	movs	r3, #0
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	dc39      	bgt.n	800618c <_dtoa_r+0x2cc>
 8006118:	f04f 0901 	mov.w	r9, #1
 800611c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006120:	464b      	mov	r3, r9
 8006122:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006128:	2200      	movs	r2, #0
 800612a:	6042      	str	r2, [r0, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	f102 0614 	add.w	r6, r2, #20
 8006132:	429e      	cmp	r6, r3
 8006134:	6841      	ldr	r1, [r0, #4]
 8006136:	d92f      	bls.n	8006198 <_dtoa_r+0x2d8>
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fcc7 	bl	8006acc <_Balloc>
 800613e:	9000      	str	r0, [sp, #0]
 8006140:	2800      	cmp	r0, #0
 8006142:	d14b      	bne.n	80061dc <_dtoa_r+0x31c>
 8006144:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <_dtoa_r+0x318>)
 8006146:	4602      	mov	r2, r0
 8006148:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800614c:	e6d1      	b.n	8005ef2 <_dtoa_r+0x32>
 800614e:	2301      	movs	r3, #1
 8006150:	e7de      	b.n	8006110 <_dtoa_r+0x250>
 8006152:	2300      	movs	r3, #0
 8006154:	9308      	str	r3, [sp, #32]
 8006156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006158:	eb0a 0903 	add.w	r9, sl, r3
 800615c:	f109 0301 	add.w	r3, r9, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	bfb8      	it	lt
 8006166:	2301      	movlt	r3, #1
 8006168:	e7dd      	b.n	8006126 <_dtoa_r+0x266>
 800616a:	2301      	movs	r3, #1
 800616c:	e7f2      	b.n	8006154 <_dtoa_r+0x294>
 800616e:	2501      	movs	r5, #1
 8006170:	2300      	movs	r3, #0
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	9508      	str	r5, [sp, #32]
 8006176:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800617a:	2200      	movs	r2, #0
 800617c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006180:	2312      	movs	r3, #18
 8006182:	9209      	str	r2, [sp, #36]	; 0x24
 8006184:	e7cf      	b.n	8006126 <_dtoa_r+0x266>
 8006186:	2301      	movs	r3, #1
 8006188:	9308      	str	r3, [sp, #32]
 800618a:	e7f4      	b.n	8006176 <_dtoa_r+0x2b6>
 800618c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006190:	f8cd 9004 	str.w	r9, [sp, #4]
 8006194:	464b      	mov	r3, r9
 8006196:	e7c6      	b.n	8006126 <_dtoa_r+0x266>
 8006198:	3101      	adds	r1, #1
 800619a:	6041      	str	r1, [r0, #4]
 800619c:	0052      	lsls	r2, r2, #1
 800619e:	e7c6      	b.n	800612e <_dtoa_r+0x26e>
 80061a0:	636f4361 	.word	0x636f4361
 80061a4:	3fd287a7 	.word	0x3fd287a7
 80061a8:	8b60c8b3 	.word	0x8b60c8b3
 80061ac:	3fc68a28 	.word	0x3fc68a28
 80061b0:	509f79fb 	.word	0x509f79fb
 80061b4:	3fd34413 	.word	0x3fd34413
 80061b8:	0800824d 	.word	0x0800824d
 80061bc:	08008264 	.word	0x08008264
 80061c0:	7ff00000 	.word	0x7ff00000
 80061c4:	08008249 	.word	0x08008249
 80061c8:	08008240 	.word	0x08008240
 80061cc:	0800821d 	.word	0x0800821d
 80061d0:	3ff80000 	.word	0x3ff80000
 80061d4:	08008360 	.word	0x08008360
 80061d8:	080082c3 	.word	0x080082c3
 80061dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061de:	9a00      	ldr	r2, [sp, #0]
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	9b01      	ldr	r3, [sp, #4]
 80061e4:	2b0e      	cmp	r3, #14
 80061e6:	f200 80ad 	bhi.w	8006344 <_dtoa_r+0x484>
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	f000 80aa 	beq.w	8006344 <_dtoa_r+0x484>
 80061f0:	f1ba 0f00 	cmp.w	sl, #0
 80061f4:	dd36      	ble.n	8006264 <_dtoa_r+0x3a4>
 80061f6:	4ac3      	ldr	r2, [pc, #780]	; (8006504 <_dtoa_r+0x644>)
 80061f8:	f00a 030f 	and.w	r3, sl, #15
 80061fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006200:	ed93 7b00 	vldr	d7, [r3]
 8006204:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006208:	ea4f 172a 	mov.w	r7, sl, asr #4
 800620c:	eeb0 8a47 	vmov.f32	s16, s14
 8006210:	eef0 8a67 	vmov.f32	s17, s15
 8006214:	d016      	beq.n	8006244 <_dtoa_r+0x384>
 8006216:	4bbc      	ldr	r3, [pc, #752]	; (8006508 <_dtoa_r+0x648>)
 8006218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800621c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006220:	f7fa fb34 	bl	800088c <__aeabi_ddiv>
 8006224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006228:	f007 070f 	and.w	r7, r7, #15
 800622c:	2503      	movs	r5, #3
 800622e:	4eb6      	ldr	r6, [pc, #728]	; (8006508 <_dtoa_r+0x648>)
 8006230:	b957      	cbnz	r7, 8006248 <_dtoa_r+0x388>
 8006232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006236:	ec53 2b18 	vmov	r2, r3, d8
 800623a:	f7fa fb27 	bl	800088c <__aeabi_ddiv>
 800623e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006242:	e029      	b.n	8006298 <_dtoa_r+0x3d8>
 8006244:	2502      	movs	r5, #2
 8006246:	e7f2      	b.n	800622e <_dtoa_r+0x36e>
 8006248:	07f9      	lsls	r1, r7, #31
 800624a:	d508      	bpl.n	800625e <_dtoa_r+0x39e>
 800624c:	ec51 0b18 	vmov	r0, r1, d8
 8006250:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006254:	f7fa f9f0 	bl	8000638 <__aeabi_dmul>
 8006258:	ec41 0b18 	vmov	d8, r0, r1
 800625c:	3501      	adds	r5, #1
 800625e:	107f      	asrs	r7, r7, #1
 8006260:	3608      	adds	r6, #8
 8006262:	e7e5      	b.n	8006230 <_dtoa_r+0x370>
 8006264:	f000 80a6 	beq.w	80063b4 <_dtoa_r+0x4f4>
 8006268:	f1ca 0600 	rsb	r6, sl, #0
 800626c:	4ba5      	ldr	r3, [pc, #660]	; (8006504 <_dtoa_r+0x644>)
 800626e:	4fa6      	ldr	r7, [pc, #664]	; (8006508 <_dtoa_r+0x648>)
 8006270:	f006 020f 	and.w	r2, r6, #15
 8006274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006280:	f7fa f9da 	bl	8000638 <__aeabi_dmul>
 8006284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006288:	1136      	asrs	r6, r6, #4
 800628a:	2300      	movs	r3, #0
 800628c:	2502      	movs	r5, #2
 800628e:	2e00      	cmp	r6, #0
 8006290:	f040 8085 	bne.w	800639e <_dtoa_r+0x4de>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1d2      	bne.n	800623e <_dtoa_r+0x37e>
 8006298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 808c 	beq.w	80063b8 <_dtoa_r+0x4f8>
 80062a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062a4:	4b99      	ldr	r3, [pc, #612]	; (800650c <_dtoa_r+0x64c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7fa fc36 	bl	8000b1c <__aeabi_dcmplt>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f000 8081 	beq.w	80063b8 <_dtoa_r+0x4f8>
 80062b6:	9b01      	ldr	r3, [sp, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d07d      	beq.n	80063b8 <_dtoa_r+0x4f8>
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	dd3c      	ble.n	800633c <_dtoa_r+0x47c>
 80062c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80062c6:	9307      	str	r3, [sp, #28]
 80062c8:	2200      	movs	r2, #0
 80062ca:	4b91      	ldr	r3, [pc, #580]	; (8006510 <_dtoa_r+0x650>)
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7fa f9b2 	bl	8000638 <__aeabi_dmul>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	3501      	adds	r5, #1
 80062da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80062de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7fa f93e 	bl	8000564 <__aeabi_i2d>
 80062e8:	4632      	mov	r2, r6
 80062ea:	463b      	mov	r3, r7
 80062ec:	f7fa f9a4 	bl	8000638 <__aeabi_dmul>
 80062f0:	4b88      	ldr	r3, [pc, #544]	; (8006514 <_dtoa_r+0x654>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	f7f9 ffea 	bl	80002cc <__adddf3>
 80062f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80062fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006304:	2b00      	cmp	r3, #0
 8006306:	d15c      	bne.n	80063c2 <_dtoa_r+0x502>
 8006308:	4b83      	ldr	r3, [pc, #524]	; (8006518 <_dtoa_r+0x658>)
 800630a:	2200      	movs	r2, #0
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7f9 ffda 	bl	80002c8 <__aeabi_dsub>
 8006314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	f7fa fc1c 	bl	8000b58 <__aeabi_dcmpgt>
 8006320:	2800      	cmp	r0, #0
 8006322:	f040 8296 	bne.w	8006852 <_dtoa_r+0x992>
 8006326:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800632a:	4630      	mov	r0, r6
 800632c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8006336:	2800      	cmp	r0, #0
 8006338:	f040 8288 	bne.w	800684c <_dtoa_r+0x98c>
 800633c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006346:	2b00      	cmp	r3, #0
 8006348:	f2c0 8158 	blt.w	80065fc <_dtoa_r+0x73c>
 800634c:	f1ba 0f0e 	cmp.w	sl, #14
 8006350:	f300 8154 	bgt.w	80065fc <_dtoa_r+0x73c>
 8006354:	4b6b      	ldr	r3, [pc, #428]	; (8006504 <_dtoa_r+0x644>)
 8006356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800635a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	f280 80e3 	bge.w	800652c <_dtoa_r+0x66c>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f300 80df 	bgt.w	800652c <_dtoa_r+0x66c>
 800636e:	f040 826d 	bne.w	800684c <_dtoa_r+0x98c>
 8006372:	4b69      	ldr	r3, [pc, #420]	; (8006518 <_dtoa_r+0x658>)
 8006374:	2200      	movs	r2, #0
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7fa f95d 	bl	8000638 <__aeabi_dmul>
 800637e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006382:	f7fa fbdf 	bl	8000b44 <__aeabi_dcmpge>
 8006386:	9e01      	ldr	r6, [sp, #4]
 8006388:	4637      	mov	r7, r6
 800638a:	2800      	cmp	r0, #0
 800638c:	f040 8243 	bne.w	8006816 <_dtoa_r+0x956>
 8006390:	9d00      	ldr	r5, [sp, #0]
 8006392:	2331      	movs	r3, #49	; 0x31
 8006394:	f805 3b01 	strb.w	r3, [r5], #1
 8006398:	f10a 0a01 	add.w	sl, sl, #1
 800639c:	e23f      	b.n	800681e <_dtoa_r+0x95e>
 800639e:	07f2      	lsls	r2, r6, #31
 80063a0:	d505      	bpl.n	80063ae <_dtoa_r+0x4ee>
 80063a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a6:	f7fa f947 	bl	8000638 <__aeabi_dmul>
 80063aa:	3501      	adds	r5, #1
 80063ac:	2301      	movs	r3, #1
 80063ae:	1076      	asrs	r6, r6, #1
 80063b0:	3708      	adds	r7, #8
 80063b2:	e76c      	b.n	800628e <_dtoa_r+0x3ce>
 80063b4:	2502      	movs	r5, #2
 80063b6:	e76f      	b.n	8006298 <_dtoa_r+0x3d8>
 80063b8:	9b01      	ldr	r3, [sp, #4]
 80063ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80063be:	930c      	str	r3, [sp, #48]	; 0x30
 80063c0:	e78d      	b.n	80062de <_dtoa_r+0x41e>
 80063c2:	9900      	ldr	r1, [sp, #0]
 80063c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063c8:	4b4e      	ldr	r3, [pc, #312]	; (8006504 <_dtoa_r+0x644>)
 80063ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063ce:	4401      	add	r1, r0
 80063d0:	9102      	str	r1, [sp, #8]
 80063d2:	9908      	ldr	r1, [sp, #32]
 80063d4:	eeb0 8a47 	vmov.f32	s16, s14
 80063d8:	eef0 8a67 	vmov.f32	s17, s15
 80063dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d045      	beq.n	8006474 <_dtoa_r+0x5b4>
 80063e8:	494c      	ldr	r1, [pc, #304]	; (800651c <_dtoa_r+0x65c>)
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7fa fa4e 	bl	800088c <__aeabi_ddiv>
 80063f0:	ec53 2b18 	vmov	r2, r3, d8
 80063f4:	f7f9 ff68 	bl	80002c8 <__aeabi_dsub>
 80063f8:	9d00      	ldr	r5, [sp, #0]
 80063fa:	ec41 0b18 	vmov	d8, r0, r1
 80063fe:	4639      	mov	r1, r7
 8006400:	4630      	mov	r0, r6
 8006402:	f7fa fbc9 	bl	8000b98 <__aeabi_d2iz>
 8006406:	900c      	str	r0, [sp, #48]	; 0x30
 8006408:	f7fa f8ac 	bl	8000564 <__aeabi_i2d>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7f9 ff58 	bl	80002c8 <__aeabi_dsub>
 8006418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800641a:	3330      	adds	r3, #48	; 0x30
 800641c:	f805 3b01 	strb.w	r3, [r5], #1
 8006420:	ec53 2b18 	vmov	r2, r3, d8
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	f7fa fb78 	bl	8000b1c <__aeabi_dcmplt>
 800642c:	2800      	cmp	r0, #0
 800642e:	d165      	bne.n	80064fc <_dtoa_r+0x63c>
 8006430:	4632      	mov	r2, r6
 8006432:	463b      	mov	r3, r7
 8006434:	4935      	ldr	r1, [pc, #212]	; (800650c <_dtoa_r+0x64c>)
 8006436:	2000      	movs	r0, #0
 8006438:	f7f9 ff46 	bl	80002c8 <__aeabi_dsub>
 800643c:	ec53 2b18 	vmov	r2, r3, d8
 8006440:	f7fa fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	f040 80b9 	bne.w	80065bc <_dtoa_r+0x6fc>
 800644a:	9b02      	ldr	r3, [sp, #8]
 800644c:	429d      	cmp	r5, r3
 800644e:	f43f af75 	beq.w	800633c <_dtoa_r+0x47c>
 8006452:	4b2f      	ldr	r3, [pc, #188]	; (8006510 <_dtoa_r+0x650>)
 8006454:	ec51 0b18 	vmov	r0, r1, d8
 8006458:	2200      	movs	r2, #0
 800645a:	f7fa f8ed 	bl	8000638 <__aeabi_dmul>
 800645e:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <_dtoa_r+0x650>)
 8006460:	ec41 0b18 	vmov	d8, r0, r1
 8006464:	2200      	movs	r2, #0
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa f8e5 	bl	8000638 <__aeabi_dmul>
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	e7c4      	b.n	80063fe <_dtoa_r+0x53e>
 8006474:	ec51 0b17 	vmov	r0, r1, d7
 8006478:	f7fa f8de 	bl	8000638 <__aeabi_dmul>
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	9d00      	ldr	r5, [sp, #0]
 8006480:	930c      	str	r3, [sp, #48]	; 0x30
 8006482:	ec41 0b18 	vmov	d8, r0, r1
 8006486:	4639      	mov	r1, r7
 8006488:	4630      	mov	r0, r6
 800648a:	f7fa fb85 	bl	8000b98 <__aeabi_d2iz>
 800648e:	9011      	str	r0, [sp, #68]	; 0x44
 8006490:	f7fa f868 	bl	8000564 <__aeabi_i2d>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f7f9 ff14 	bl	80002c8 <__aeabi_dsub>
 80064a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064a2:	3330      	adds	r3, #48	; 0x30
 80064a4:	f805 3b01 	strb.w	r3, [r5], #1
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	429d      	cmp	r5, r3
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	d134      	bne.n	8006520 <_dtoa_r+0x660>
 80064b6:	4b19      	ldr	r3, [pc, #100]	; (800651c <_dtoa_r+0x65c>)
 80064b8:	ec51 0b18 	vmov	r0, r1, d8
 80064bc:	f7f9 ff06 	bl	80002cc <__adddf3>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fb46 	bl	8000b58 <__aeabi_dcmpgt>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d175      	bne.n	80065bc <_dtoa_r+0x6fc>
 80064d0:	ec53 2b18 	vmov	r2, r3, d8
 80064d4:	4911      	ldr	r1, [pc, #68]	; (800651c <_dtoa_r+0x65c>)
 80064d6:	2000      	movs	r0, #0
 80064d8:	f7f9 fef6 	bl	80002c8 <__aeabi_dsub>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4630      	mov	r0, r6
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7fa fb1a 	bl	8000b1c <__aeabi_dcmplt>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f43f af27 	beq.w	800633c <_dtoa_r+0x47c>
 80064ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064f0:	1e6b      	subs	r3, r5, #1
 80064f2:	930c      	str	r3, [sp, #48]	; 0x30
 80064f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d0f8      	beq.n	80064ee <_dtoa_r+0x62e>
 80064fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006500:	e04a      	b.n	8006598 <_dtoa_r+0x6d8>
 8006502:	bf00      	nop
 8006504:	08008360 	.word	0x08008360
 8006508:	08008338 	.word	0x08008338
 800650c:	3ff00000 	.word	0x3ff00000
 8006510:	40240000 	.word	0x40240000
 8006514:	401c0000 	.word	0x401c0000
 8006518:	40140000 	.word	0x40140000
 800651c:	3fe00000 	.word	0x3fe00000
 8006520:	4baf      	ldr	r3, [pc, #700]	; (80067e0 <_dtoa_r+0x920>)
 8006522:	f7fa f889 	bl	8000638 <__aeabi_dmul>
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	e7ac      	b.n	8006486 <_dtoa_r+0x5c6>
 800652c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006530:	9d00      	ldr	r5, [sp, #0]
 8006532:	4642      	mov	r2, r8
 8006534:	464b      	mov	r3, r9
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	f7fa f9a7 	bl	800088c <__aeabi_ddiv>
 800653e:	f7fa fb2b 	bl	8000b98 <__aeabi_d2iz>
 8006542:	9002      	str	r0, [sp, #8]
 8006544:	f7fa f80e 	bl	8000564 <__aeabi_i2d>
 8006548:	4642      	mov	r2, r8
 800654a:	464b      	mov	r3, r9
 800654c:	f7fa f874 	bl	8000638 <__aeabi_dmul>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 feb6 	bl	80002c8 <__aeabi_dsub>
 800655c:	9e02      	ldr	r6, [sp, #8]
 800655e:	9f01      	ldr	r7, [sp, #4]
 8006560:	3630      	adds	r6, #48	; 0x30
 8006562:	f805 6b01 	strb.w	r6, [r5], #1
 8006566:	9e00      	ldr	r6, [sp, #0]
 8006568:	1bae      	subs	r6, r5, r6
 800656a:	42b7      	cmp	r7, r6
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	d137      	bne.n	80065e2 <_dtoa_r+0x722>
 8006572:	f7f9 feab 	bl	80002cc <__adddf3>
 8006576:	4642      	mov	r2, r8
 8006578:	464b      	mov	r3, r9
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	f7fa faeb 	bl	8000b58 <__aeabi_dcmpgt>
 8006582:	b9c8      	cbnz	r0, 80065b8 <_dtoa_r+0x6f8>
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7fa fabc 	bl	8000b08 <__aeabi_dcmpeq>
 8006590:	b110      	cbz	r0, 8006598 <_dtoa_r+0x6d8>
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	07d9      	lsls	r1, r3, #31
 8006596:	d40f      	bmi.n	80065b8 <_dtoa_r+0x6f8>
 8006598:	4620      	mov	r0, r4
 800659a:	4659      	mov	r1, fp
 800659c:	f000 fad6 	bl	8006b4c <_Bfree>
 80065a0:	2300      	movs	r3, #0
 80065a2:	702b      	strb	r3, [r5, #0]
 80065a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065a6:	f10a 0001 	add.w	r0, sl, #1
 80065aa:	6018      	str	r0, [r3, #0]
 80065ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f43f acd8 	beq.w	8005f64 <_dtoa_r+0xa4>
 80065b4:	601d      	str	r5, [r3, #0]
 80065b6:	e4d5      	b.n	8005f64 <_dtoa_r+0xa4>
 80065b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80065bc:	462b      	mov	r3, r5
 80065be:	461d      	mov	r5, r3
 80065c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065c4:	2a39      	cmp	r2, #57	; 0x39
 80065c6:	d108      	bne.n	80065da <_dtoa_r+0x71a>
 80065c8:	9a00      	ldr	r2, [sp, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d1f7      	bne.n	80065be <_dtoa_r+0x6fe>
 80065ce:	9a07      	ldr	r2, [sp, #28]
 80065d0:	9900      	ldr	r1, [sp, #0]
 80065d2:	3201      	adds	r2, #1
 80065d4:	9207      	str	r2, [sp, #28]
 80065d6:	2230      	movs	r2, #48	; 0x30
 80065d8:	700a      	strb	r2, [r1, #0]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	3201      	adds	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e78c      	b.n	80064fc <_dtoa_r+0x63c>
 80065e2:	4b7f      	ldr	r3, [pc, #508]	; (80067e0 <_dtoa_r+0x920>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	f7fa f827 	bl	8000638 <__aeabi_dmul>
 80065ea:	2200      	movs	r2, #0
 80065ec:	2300      	movs	r3, #0
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	f7fa fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d09b      	beq.n	8006532 <_dtoa_r+0x672>
 80065fa:	e7cd      	b.n	8006598 <_dtoa_r+0x6d8>
 80065fc:	9a08      	ldr	r2, [sp, #32]
 80065fe:	2a00      	cmp	r2, #0
 8006600:	f000 80c4 	beq.w	800678c <_dtoa_r+0x8cc>
 8006604:	9a05      	ldr	r2, [sp, #20]
 8006606:	2a01      	cmp	r2, #1
 8006608:	f300 80a8 	bgt.w	800675c <_dtoa_r+0x89c>
 800660c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800660e:	2a00      	cmp	r2, #0
 8006610:	f000 80a0 	beq.w	8006754 <_dtoa_r+0x894>
 8006614:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006618:	9e06      	ldr	r6, [sp, #24]
 800661a:	4645      	mov	r5, r8
 800661c:	9a04      	ldr	r2, [sp, #16]
 800661e:	2101      	movs	r1, #1
 8006620:	441a      	add	r2, r3
 8006622:	4620      	mov	r0, r4
 8006624:	4498      	add	r8, r3
 8006626:	9204      	str	r2, [sp, #16]
 8006628:	f000 fb4c 	bl	8006cc4 <__i2b>
 800662c:	4607      	mov	r7, r0
 800662e:	2d00      	cmp	r5, #0
 8006630:	dd0b      	ble.n	800664a <_dtoa_r+0x78a>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd08      	ble.n	800664a <_dtoa_r+0x78a>
 8006638:	42ab      	cmp	r3, r5
 800663a:	9a04      	ldr	r2, [sp, #16]
 800663c:	bfa8      	it	ge
 800663e:	462b      	movge	r3, r5
 8006640:	eba8 0803 	sub.w	r8, r8, r3
 8006644:	1aed      	subs	r5, r5, r3
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	b1fb      	cbz	r3, 800668e <_dtoa_r+0x7ce>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 809f 	beq.w	8006794 <_dtoa_r+0x8d4>
 8006656:	2e00      	cmp	r6, #0
 8006658:	dd11      	ble.n	800667e <_dtoa_r+0x7be>
 800665a:	4639      	mov	r1, r7
 800665c:	4632      	mov	r2, r6
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fbec 	bl	8006e3c <__pow5mult>
 8006664:	465a      	mov	r2, fp
 8006666:	4601      	mov	r1, r0
 8006668:	4607      	mov	r7, r0
 800666a:	4620      	mov	r0, r4
 800666c:	f000 fb40 	bl	8006cf0 <__multiply>
 8006670:	4659      	mov	r1, fp
 8006672:	9007      	str	r0, [sp, #28]
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fa69 	bl	8006b4c <_Bfree>
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	469b      	mov	fp, r3
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	1b9a      	subs	r2, r3, r6
 8006682:	d004      	beq.n	800668e <_dtoa_r+0x7ce>
 8006684:	4659      	mov	r1, fp
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fbd8 	bl	8006e3c <__pow5mult>
 800668c:	4683      	mov	fp, r0
 800668e:	2101      	movs	r1, #1
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fb17 	bl	8006cc4 <__i2b>
 8006696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006698:	2b00      	cmp	r3, #0
 800669a:	4606      	mov	r6, r0
 800669c:	dd7c      	ble.n	8006798 <_dtoa_r+0x8d8>
 800669e:	461a      	mov	r2, r3
 80066a0:	4601      	mov	r1, r0
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 fbca 	bl	8006e3c <__pow5mult>
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	4606      	mov	r6, r0
 80066ae:	dd76      	ble.n	800679e <_dtoa_r+0x8de>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9306      	str	r3, [sp, #24]
 80066b4:	6933      	ldr	r3, [r6, #16]
 80066b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066ba:	6918      	ldr	r0, [r3, #16]
 80066bc:	f000 fab2 	bl	8006c24 <__hi0bits>
 80066c0:	f1c0 0020 	rsb	r0, r0, #32
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	4418      	add	r0, r3
 80066c8:	f010 001f 	ands.w	r0, r0, #31
 80066cc:	f000 8086 	beq.w	80067dc <_dtoa_r+0x91c>
 80066d0:	f1c0 0320 	rsb	r3, r0, #32
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	dd7f      	ble.n	80067d8 <_dtoa_r+0x918>
 80066d8:	f1c0 001c 	rsb	r0, r0, #28
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	4403      	add	r3, r0
 80066e0:	4480      	add	r8, r0
 80066e2:	4405      	add	r5, r0
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f1b8 0f00 	cmp.w	r8, #0
 80066ea:	dd05      	ble.n	80066f8 <_dtoa_r+0x838>
 80066ec:	4659      	mov	r1, fp
 80066ee:	4642      	mov	r2, r8
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fbfd 	bl	8006ef0 <__lshift>
 80066f6:	4683      	mov	fp, r0
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x84a>
 80066fe:	4631      	mov	r1, r6
 8006700:	461a      	mov	r2, r3
 8006702:	4620      	mov	r0, r4
 8006704:	f000 fbf4 	bl	8006ef0 <__lshift>
 8006708:	4606      	mov	r6, r0
 800670a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d069      	beq.n	80067e4 <_dtoa_r+0x924>
 8006710:	4631      	mov	r1, r6
 8006712:	4658      	mov	r0, fp
 8006714:	f000 fc58 	bl	8006fc8 <__mcmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	da63      	bge.n	80067e4 <_dtoa_r+0x924>
 800671c:	2300      	movs	r3, #0
 800671e:	4659      	mov	r1, fp
 8006720:	220a      	movs	r2, #10
 8006722:	4620      	mov	r0, r4
 8006724:	f000 fa34 	bl	8006b90 <__multadd>
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800672e:	4683      	mov	fp, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 818f 	beq.w	8006a54 <_dtoa_r+0xb94>
 8006736:	4639      	mov	r1, r7
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	4620      	mov	r0, r4
 800673e:	f000 fa27 	bl	8006b90 <__multadd>
 8006742:	f1b9 0f00 	cmp.w	r9, #0
 8006746:	4607      	mov	r7, r0
 8006748:	f300 808e 	bgt.w	8006868 <_dtoa_r+0x9a8>
 800674c:	9b05      	ldr	r3, [sp, #20]
 800674e:	2b02      	cmp	r3, #2
 8006750:	dc50      	bgt.n	80067f4 <_dtoa_r+0x934>
 8006752:	e089      	b.n	8006868 <_dtoa_r+0x9a8>
 8006754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800675a:	e75d      	b.n	8006618 <_dtoa_r+0x758>
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	1e5e      	subs	r6, r3, #1
 8006760:	9b06      	ldr	r3, [sp, #24]
 8006762:	42b3      	cmp	r3, r6
 8006764:	bfbf      	itttt	lt
 8006766:	9b06      	ldrlt	r3, [sp, #24]
 8006768:	9606      	strlt	r6, [sp, #24]
 800676a:	1af2      	sublt	r2, r6, r3
 800676c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800676e:	bfb6      	itet	lt
 8006770:	189b      	addlt	r3, r3, r2
 8006772:	1b9e      	subge	r6, r3, r6
 8006774:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	bfb8      	it	lt
 800677a:	2600      	movlt	r6, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfb5      	itete	lt
 8006780:	eba8 0503 	sublt.w	r5, r8, r3
 8006784:	9b01      	ldrge	r3, [sp, #4]
 8006786:	2300      	movlt	r3, #0
 8006788:	4645      	movge	r5, r8
 800678a:	e747      	b.n	800661c <_dtoa_r+0x75c>
 800678c:	9e06      	ldr	r6, [sp, #24]
 800678e:	9f08      	ldr	r7, [sp, #32]
 8006790:	4645      	mov	r5, r8
 8006792:	e74c      	b.n	800662e <_dtoa_r+0x76e>
 8006794:	9a06      	ldr	r2, [sp, #24]
 8006796:	e775      	b.n	8006684 <_dtoa_r+0x7c4>
 8006798:	9b05      	ldr	r3, [sp, #20]
 800679a:	2b01      	cmp	r3, #1
 800679c:	dc18      	bgt.n	80067d0 <_dtoa_r+0x910>
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	b9b3      	cbnz	r3, 80067d0 <_dtoa_r+0x910>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a8:	b9a3      	cbnz	r3, 80067d4 <_dtoa_r+0x914>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b0:	0d1b      	lsrs	r3, r3, #20
 80067b2:	051b      	lsls	r3, r3, #20
 80067b4:	b12b      	cbz	r3, 80067c2 <_dtoa_r+0x902>
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	f108 0801 	add.w	r8, r8, #1
 80067c0:	2301      	movs	r3, #1
 80067c2:	9306      	str	r3, [sp, #24]
 80067c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f af74 	bne.w	80066b4 <_dtoa_r+0x7f4>
 80067cc:	2001      	movs	r0, #1
 80067ce:	e779      	b.n	80066c4 <_dtoa_r+0x804>
 80067d0:	2300      	movs	r3, #0
 80067d2:	e7f6      	b.n	80067c2 <_dtoa_r+0x902>
 80067d4:	9b02      	ldr	r3, [sp, #8]
 80067d6:	e7f4      	b.n	80067c2 <_dtoa_r+0x902>
 80067d8:	d085      	beq.n	80066e6 <_dtoa_r+0x826>
 80067da:	4618      	mov	r0, r3
 80067dc:	301c      	adds	r0, #28
 80067de:	e77d      	b.n	80066dc <_dtoa_r+0x81c>
 80067e0:	40240000 	.word	0x40240000
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dc38      	bgt.n	800685c <_dtoa_r+0x99c>
 80067ea:	9b05      	ldr	r3, [sp, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	dd35      	ble.n	800685c <_dtoa_r+0x99c>
 80067f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	d10d      	bne.n	8006816 <_dtoa_r+0x956>
 80067fa:	4631      	mov	r1, r6
 80067fc:	464b      	mov	r3, r9
 80067fe:	2205      	movs	r2, #5
 8006800:	4620      	mov	r0, r4
 8006802:	f000 f9c5 	bl	8006b90 <__multadd>
 8006806:	4601      	mov	r1, r0
 8006808:	4606      	mov	r6, r0
 800680a:	4658      	mov	r0, fp
 800680c:	f000 fbdc 	bl	8006fc8 <__mcmp>
 8006810:	2800      	cmp	r0, #0
 8006812:	f73f adbd 	bgt.w	8006390 <_dtoa_r+0x4d0>
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	9d00      	ldr	r5, [sp, #0]
 800681a:	ea6f 0a03 	mvn.w	sl, r3
 800681e:	f04f 0800 	mov.w	r8, #0
 8006822:	4631      	mov	r1, r6
 8006824:	4620      	mov	r0, r4
 8006826:	f000 f991 	bl	8006b4c <_Bfree>
 800682a:	2f00      	cmp	r7, #0
 800682c:	f43f aeb4 	beq.w	8006598 <_dtoa_r+0x6d8>
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d005      	beq.n	8006842 <_dtoa_r+0x982>
 8006836:	45b8      	cmp	r8, r7
 8006838:	d003      	beq.n	8006842 <_dtoa_r+0x982>
 800683a:	4641      	mov	r1, r8
 800683c:	4620      	mov	r0, r4
 800683e:	f000 f985 	bl	8006b4c <_Bfree>
 8006842:	4639      	mov	r1, r7
 8006844:	4620      	mov	r0, r4
 8006846:	f000 f981 	bl	8006b4c <_Bfree>
 800684a:	e6a5      	b.n	8006598 <_dtoa_r+0x6d8>
 800684c:	2600      	movs	r6, #0
 800684e:	4637      	mov	r7, r6
 8006850:	e7e1      	b.n	8006816 <_dtoa_r+0x956>
 8006852:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006858:	4637      	mov	r7, r6
 800685a:	e599      	b.n	8006390 <_dtoa_r+0x4d0>
 800685c:	9b08      	ldr	r3, [sp, #32]
 800685e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80fd 	beq.w	8006a62 <_dtoa_r+0xba2>
 8006868:	2d00      	cmp	r5, #0
 800686a:	dd05      	ble.n	8006878 <_dtoa_r+0x9b8>
 800686c:	4639      	mov	r1, r7
 800686e:	462a      	mov	r2, r5
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fb3d 	bl	8006ef0 <__lshift>
 8006876:	4607      	mov	r7, r0
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d05c      	beq.n	8006938 <_dtoa_r+0xa78>
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4620      	mov	r0, r4
 8006882:	f000 f923 	bl	8006acc <_Balloc>
 8006886:	4605      	mov	r5, r0
 8006888:	b928      	cbnz	r0, 8006896 <_dtoa_r+0x9d6>
 800688a:	4b80      	ldr	r3, [pc, #512]	; (8006a8c <_dtoa_r+0xbcc>)
 800688c:	4602      	mov	r2, r0
 800688e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006892:	f7ff bb2e 	b.w	8005ef2 <_dtoa_r+0x32>
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	3202      	adds	r2, #2
 800689a:	0092      	lsls	r2, r2, #2
 800689c:	f107 010c 	add.w	r1, r7, #12
 80068a0:	300c      	adds	r0, #12
 80068a2:	f000 f905 	bl	8006ab0 <memcpy>
 80068a6:	2201      	movs	r2, #1
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fb20 	bl	8006ef0 <__lshift>
 80068b0:	9b00      	ldr	r3, [sp, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	9b00      	ldr	r3, [sp, #0]
 80068b8:	444b      	add	r3, r9
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	46b8      	mov	r8, r7
 80068c4:	9306      	str	r3, [sp, #24]
 80068c6:	4607      	mov	r7, r0
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	4631      	mov	r1, r6
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4658      	mov	r0, fp
 80068d0:	9302      	str	r3, [sp, #8]
 80068d2:	f7ff fa67 	bl	8005da4 <quorem>
 80068d6:	4603      	mov	r3, r0
 80068d8:	3330      	adds	r3, #48	; 0x30
 80068da:	9004      	str	r0, [sp, #16]
 80068dc:	4641      	mov	r1, r8
 80068de:	4658      	mov	r0, fp
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	f000 fb71 	bl	8006fc8 <__mcmp>
 80068e6:	463a      	mov	r2, r7
 80068e8:	4681      	mov	r9, r0
 80068ea:	4631      	mov	r1, r6
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fb87 	bl	8007000 <__mdiff>
 80068f2:	68c2      	ldr	r2, [r0, #12]
 80068f4:	9b08      	ldr	r3, [sp, #32]
 80068f6:	4605      	mov	r5, r0
 80068f8:	bb02      	cbnz	r2, 800693c <_dtoa_r+0xa7c>
 80068fa:	4601      	mov	r1, r0
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fb63 	bl	8006fc8 <__mcmp>
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	4602      	mov	r2, r0
 8006906:	4629      	mov	r1, r5
 8006908:	4620      	mov	r0, r4
 800690a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800690e:	f000 f91d 	bl	8006b4c <_Bfree>
 8006912:	9b05      	ldr	r3, [sp, #20]
 8006914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006916:	9d01      	ldr	r5, [sp, #4]
 8006918:	ea43 0102 	orr.w	r1, r3, r2
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	430b      	orrs	r3, r1
 8006920:	9b08      	ldr	r3, [sp, #32]
 8006922:	d10d      	bne.n	8006940 <_dtoa_r+0xa80>
 8006924:	2b39      	cmp	r3, #57	; 0x39
 8006926:	d029      	beq.n	800697c <_dtoa_r+0xabc>
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	dd01      	ble.n	8006932 <_dtoa_r+0xa72>
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	3331      	adds	r3, #49	; 0x31
 8006932:	9a02      	ldr	r2, [sp, #8]
 8006934:	7013      	strb	r3, [r2, #0]
 8006936:	e774      	b.n	8006822 <_dtoa_r+0x962>
 8006938:	4638      	mov	r0, r7
 800693a:	e7b9      	b.n	80068b0 <_dtoa_r+0x9f0>
 800693c:	2201      	movs	r2, #1
 800693e:	e7e2      	b.n	8006906 <_dtoa_r+0xa46>
 8006940:	f1b9 0f00 	cmp.w	r9, #0
 8006944:	db06      	blt.n	8006954 <_dtoa_r+0xa94>
 8006946:	9905      	ldr	r1, [sp, #20]
 8006948:	ea41 0909 	orr.w	r9, r1, r9
 800694c:	9906      	ldr	r1, [sp, #24]
 800694e:	ea59 0101 	orrs.w	r1, r9, r1
 8006952:	d120      	bne.n	8006996 <_dtoa_r+0xad6>
 8006954:	2a00      	cmp	r2, #0
 8006956:	ddec      	ble.n	8006932 <_dtoa_r+0xa72>
 8006958:	4659      	mov	r1, fp
 800695a:	2201      	movs	r2, #1
 800695c:	4620      	mov	r0, r4
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	f000 fac6 	bl	8006ef0 <__lshift>
 8006964:	4631      	mov	r1, r6
 8006966:	4683      	mov	fp, r0
 8006968:	f000 fb2e 	bl	8006fc8 <__mcmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	dc02      	bgt.n	8006978 <_dtoa_r+0xab8>
 8006972:	d1de      	bne.n	8006932 <_dtoa_r+0xa72>
 8006974:	07da      	lsls	r2, r3, #31
 8006976:	d5dc      	bpl.n	8006932 <_dtoa_r+0xa72>
 8006978:	2b39      	cmp	r3, #57	; 0x39
 800697a:	d1d8      	bne.n	800692e <_dtoa_r+0xa6e>
 800697c:	9a02      	ldr	r2, [sp, #8]
 800697e:	2339      	movs	r3, #57	; 0x39
 8006980:	7013      	strb	r3, [r2, #0]
 8006982:	462b      	mov	r3, r5
 8006984:	461d      	mov	r5, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800698c:	2a39      	cmp	r2, #57	; 0x39
 800698e:	d050      	beq.n	8006a32 <_dtoa_r+0xb72>
 8006990:	3201      	adds	r2, #1
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e745      	b.n	8006822 <_dtoa_r+0x962>
 8006996:	2a00      	cmp	r2, #0
 8006998:	dd03      	ble.n	80069a2 <_dtoa_r+0xae2>
 800699a:	2b39      	cmp	r3, #57	; 0x39
 800699c:	d0ee      	beq.n	800697c <_dtoa_r+0xabc>
 800699e:	3301      	adds	r3, #1
 80069a0:	e7c7      	b.n	8006932 <_dtoa_r+0xa72>
 80069a2:	9a01      	ldr	r2, [sp, #4]
 80069a4:	9907      	ldr	r1, [sp, #28]
 80069a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069aa:	428a      	cmp	r2, r1
 80069ac:	d02a      	beq.n	8006a04 <_dtoa_r+0xb44>
 80069ae:	4659      	mov	r1, fp
 80069b0:	2300      	movs	r3, #0
 80069b2:	220a      	movs	r2, #10
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 f8eb 	bl	8006b90 <__multadd>
 80069ba:	45b8      	cmp	r8, r7
 80069bc:	4683      	mov	fp, r0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	f04f 020a 	mov.w	r2, #10
 80069c6:	4641      	mov	r1, r8
 80069c8:	4620      	mov	r0, r4
 80069ca:	d107      	bne.n	80069dc <_dtoa_r+0xb1c>
 80069cc:	f000 f8e0 	bl	8006b90 <__multadd>
 80069d0:	4680      	mov	r8, r0
 80069d2:	4607      	mov	r7, r0
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	3301      	adds	r3, #1
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	e775      	b.n	80068c8 <_dtoa_r+0xa08>
 80069dc:	f000 f8d8 	bl	8006b90 <__multadd>
 80069e0:	4639      	mov	r1, r7
 80069e2:	4680      	mov	r8, r0
 80069e4:	2300      	movs	r3, #0
 80069e6:	220a      	movs	r2, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f8d1 	bl	8006b90 <__multadd>
 80069ee:	4607      	mov	r7, r0
 80069f0:	e7f0      	b.n	80069d4 <_dtoa_r+0xb14>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	9a00      	ldr	r2, [sp, #0]
 80069f8:	bfcc      	ite	gt
 80069fa:	464d      	movgt	r5, r9
 80069fc:	2501      	movle	r5, #1
 80069fe:	4415      	add	r5, r2
 8006a00:	f04f 0800 	mov.w	r8, #0
 8006a04:	4659      	mov	r1, fp
 8006a06:	2201      	movs	r2, #1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	f000 fa70 	bl	8006ef0 <__lshift>
 8006a10:	4631      	mov	r1, r6
 8006a12:	4683      	mov	fp, r0
 8006a14:	f000 fad8 	bl	8006fc8 <__mcmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	dcb2      	bgt.n	8006982 <_dtoa_r+0xac2>
 8006a1c:	d102      	bne.n	8006a24 <_dtoa_r+0xb64>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	07db      	lsls	r3, r3, #31
 8006a22:	d4ae      	bmi.n	8006982 <_dtoa_r+0xac2>
 8006a24:	462b      	mov	r3, r5
 8006a26:	461d      	mov	r5, r3
 8006a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a2c:	2a30      	cmp	r2, #48	; 0x30
 8006a2e:	d0fa      	beq.n	8006a26 <_dtoa_r+0xb66>
 8006a30:	e6f7      	b.n	8006822 <_dtoa_r+0x962>
 8006a32:	9a00      	ldr	r2, [sp, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d1a5      	bne.n	8006984 <_dtoa_r+0xac4>
 8006a38:	f10a 0a01 	add.w	sl, sl, #1
 8006a3c:	2331      	movs	r3, #49	; 0x31
 8006a3e:	e779      	b.n	8006934 <_dtoa_r+0xa74>
 8006a40:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <_dtoa_r+0xbd0>)
 8006a42:	f7ff baaf 	b.w	8005fa4 <_dtoa_r+0xe4>
 8006a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f47f aa86 	bne.w	8005f5a <_dtoa_r+0x9a>
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <_dtoa_r+0xbd4>)
 8006a50:	f7ff baa8 	b.w	8005fa4 <_dtoa_r+0xe4>
 8006a54:	f1b9 0f00 	cmp.w	r9, #0
 8006a58:	dc03      	bgt.n	8006a62 <_dtoa_r+0xba2>
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f73f aec9 	bgt.w	80067f4 <_dtoa_r+0x934>
 8006a62:	9d00      	ldr	r5, [sp, #0]
 8006a64:	4631      	mov	r1, r6
 8006a66:	4658      	mov	r0, fp
 8006a68:	f7ff f99c 	bl	8005da4 <quorem>
 8006a6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006a70:	f805 3b01 	strb.w	r3, [r5], #1
 8006a74:	9a00      	ldr	r2, [sp, #0]
 8006a76:	1aaa      	subs	r2, r5, r2
 8006a78:	4591      	cmp	r9, r2
 8006a7a:	ddba      	ble.n	80069f2 <_dtoa_r+0xb32>
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	2300      	movs	r3, #0
 8006a80:	220a      	movs	r2, #10
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f884 	bl	8006b90 <__multadd>
 8006a88:	4683      	mov	fp, r0
 8006a8a:	e7eb      	b.n	8006a64 <_dtoa_r+0xba4>
 8006a8c:	080082c3 	.word	0x080082c3
 8006a90:	0800821c 	.word	0x0800821c
 8006a94:	08008240 	.word	0x08008240

08006a98 <_localeconv_r>:
 8006a98:	4800      	ldr	r0, [pc, #0]	; (8006a9c <_localeconv_r+0x4>)
 8006a9a:	4770      	bx	lr
 8006a9c:	20000160 	.word	0x20000160

08006aa0 <malloc>:
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <malloc+0xc>)
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	f000 bbef 	b.w	8007288 <_malloc_r>
 8006aaa:	bf00      	nop
 8006aac:	2000000c 	.word	0x2000000c

08006ab0 <memcpy>:
 8006ab0:	440a      	add	r2, r1
 8006ab2:	4291      	cmp	r1, r2
 8006ab4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ab8:	d100      	bne.n	8006abc <memcpy+0xc>
 8006aba:	4770      	bx	lr
 8006abc:	b510      	push	{r4, lr}
 8006abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d1f9      	bne.n	8006abe <memcpy+0xe>
 8006aca:	bd10      	pop	{r4, pc}

08006acc <_Balloc>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	b976      	cbnz	r6, 8006af4 <_Balloc+0x28>
 8006ad6:	2010      	movs	r0, #16
 8006ad8:	f7ff ffe2 	bl	8006aa0 <malloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae0:	b920      	cbnz	r0, 8006aec <_Balloc+0x20>
 8006ae2:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <_Balloc+0x78>)
 8006ae4:	4818      	ldr	r0, [pc, #96]	; (8006b48 <_Balloc+0x7c>)
 8006ae6:	2166      	movs	r1, #102	; 0x66
 8006ae8:	f000 fd94 	bl	8007614 <__assert_func>
 8006aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af0:	6006      	str	r6, [r0, #0]
 8006af2:	60c6      	str	r6, [r0, #12]
 8006af4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006af6:	68f3      	ldr	r3, [r6, #12]
 8006af8:	b183      	cbz	r3, 8006b1c <_Balloc+0x50>
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b02:	b9b8      	cbnz	r0, 8006b34 <_Balloc+0x68>
 8006b04:	2101      	movs	r1, #1
 8006b06:	fa01 f605 	lsl.w	r6, r1, r5
 8006b0a:	1d72      	adds	r2, r6, #5
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 fb5a 	bl	80071c8 <_calloc_r>
 8006b14:	b160      	cbz	r0, 8006b30 <_Balloc+0x64>
 8006b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b1a:	e00e      	b.n	8006b3a <_Balloc+0x6e>
 8006b1c:	2221      	movs	r2, #33	; 0x21
 8006b1e:	2104      	movs	r1, #4
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fb51 	bl	80071c8 <_calloc_r>
 8006b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b28:	60f0      	str	r0, [r6, #12]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e4      	bne.n	8006afa <_Balloc+0x2e>
 8006b30:	2000      	movs	r0, #0
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	6802      	ldr	r2, [r0, #0]
 8006b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b40:	e7f7      	b.n	8006b32 <_Balloc+0x66>
 8006b42:	bf00      	nop
 8006b44:	0800824d 	.word	0x0800824d
 8006b48:	080082d4 	.word	0x080082d4

08006b4c <_Bfree>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b50:	4605      	mov	r5, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b976      	cbnz	r6, 8006b74 <_Bfree+0x28>
 8006b56:	2010      	movs	r0, #16
 8006b58:	f7ff ffa2 	bl	8006aa0 <malloc>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6268      	str	r0, [r5, #36]	; 0x24
 8006b60:	b920      	cbnz	r0, 8006b6c <_Bfree+0x20>
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <_Bfree+0x3c>)
 8006b64:	4809      	ldr	r0, [pc, #36]	; (8006b8c <_Bfree+0x40>)
 8006b66:	218a      	movs	r1, #138	; 0x8a
 8006b68:	f000 fd54 	bl	8007614 <__assert_func>
 8006b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b70:	6006      	str	r6, [r0, #0]
 8006b72:	60c6      	str	r6, [r0, #12]
 8006b74:	b13c      	cbz	r4, 8006b86 <_Bfree+0x3a>
 8006b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b78:	6862      	ldr	r2, [r4, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b80:	6021      	str	r1, [r4, #0]
 8006b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	0800824d 	.word	0x0800824d
 8006b8c:	080082d4 	.word	0x080082d4

08006b90 <__multadd>:
 8006b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b94:	690e      	ldr	r6, [r1, #16]
 8006b96:	4607      	mov	r7, r0
 8006b98:	4698      	mov	r8, r3
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	f101 0014 	add.w	r0, r1, #20
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6805      	ldr	r5, [r0, #0]
 8006ba4:	b2a9      	uxth	r1, r5
 8006ba6:	fb02 8101 	mla	r1, r2, r1, r8
 8006baa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006bae:	0c2d      	lsrs	r5, r5, #16
 8006bb0:	fb02 c505 	mla	r5, r2, r5, ip
 8006bb4:	b289      	uxth	r1, r1
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006bbc:	429e      	cmp	r6, r3
 8006bbe:	f840 1b04 	str.w	r1, [r0], #4
 8006bc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006bc6:	dcec      	bgt.n	8006ba2 <__multadd+0x12>
 8006bc8:	f1b8 0f00 	cmp.w	r8, #0
 8006bcc:	d022      	beq.n	8006c14 <__multadd+0x84>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	42b3      	cmp	r3, r6
 8006bd2:	dc19      	bgt.n	8006c08 <__multadd+0x78>
 8006bd4:	6861      	ldr	r1, [r4, #4]
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	3101      	adds	r1, #1
 8006bda:	f7ff ff77 	bl	8006acc <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__multadd+0x5e>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <__multadd+0x8c>)
 8006be6:	480e      	ldr	r0, [pc, #56]	; (8006c20 <__multadd+0x90>)
 8006be8:	21b5      	movs	r1, #181	; 0xb5
 8006bea:	f000 fd13 	bl	8007614 <__assert_func>
 8006bee:	6922      	ldr	r2, [r4, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	f104 010c 	add.w	r1, r4, #12
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f7ff ff59 	bl	8006ab0 <memcpy>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff ffa3 	bl	8006b4c <_Bfree>
 8006c06:	462c      	mov	r4, r5
 8006c08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006c0c:	3601      	adds	r6, #1
 8006c0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006c12:	6126      	str	r6, [r4, #16]
 8006c14:	4620      	mov	r0, r4
 8006c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1a:	bf00      	nop
 8006c1c:	080082c3 	.word	0x080082c3
 8006c20:	080082d4 	.word	0x080082d4

08006c24 <__hi0bits>:
 8006c24:	0c03      	lsrs	r3, r0, #16
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	b9d3      	cbnz	r3, 8006c60 <__hi0bits+0x3c>
 8006c2a:	0400      	lsls	r0, r0, #16
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c32:	bf04      	itt	eq
 8006c34:	0200      	lsleq	r0, r0, #8
 8006c36:	3308      	addeq	r3, #8
 8006c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c3c:	bf04      	itt	eq
 8006c3e:	0100      	lsleq	r0, r0, #4
 8006c40:	3304      	addeq	r3, #4
 8006c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c46:	bf04      	itt	eq
 8006c48:	0080      	lsleq	r0, r0, #2
 8006c4a:	3302      	addeq	r3, #2
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	db05      	blt.n	8006c5c <__hi0bits+0x38>
 8006c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c54:	f103 0301 	add.w	r3, r3, #1
 8006c58:	bf08      	it	eq
 8006c5a:	2320      	moveq	r3, #32
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	4770      	bx	lr
 8006c60:	2300      	movs	r3, #0
 8006c62:	e7e4      	b.n	8006c2e <__hi0bits+0xa>

08006c64 <__lo0bits>:
 8006c64:	6803      	ldr	r3, [r0, #0]
 8006c66:	f013 0207 	ands.w	r2, r3, #7
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	d00b      	beq.n	8006c86 <__lo0bits+0x22>
 8006c6e:	07da      	lsls	r2, r3, #31
 8006c70:	d424      	bmi.n	8006cbc <__lo0bits+0x58>
 8006c72:	0798      	lsls	r0, r3, #30
 8006c74:	bf49      	itett	mi
 8006c76:	085b      	lsrmi	r3, r3, #1
 8006c78:	089b      	lsrpl	r3, r3, #2
 8006c7a:	2001      	movmi	r0, #1
 8006c7c:	600b      	strmi	r3, [r1, #0]
 8006c7e:	bf5c      	itt	pl
 8006c80:	600b      	strpl	r3, [r1, #0]
 8006c82:	2002      	movpl	r0, #2
 8006c84:	4770      	bx	lr
 8006c86:	b298      	uxth	r0, r3
 8006c88:	b9b0      	cbnz	r0, 8006cb8 <__lo0bits+0x54>
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c92:	bf04      	itt	eq
 8006c94:	0a1b      	lsreq	r3, r3, #8
 8006c96:	3008      	addeq	r0, #8
 8006c98:	071a      	lsls	r2, r3, #28
 8006c9a:	bf04      	itt	eq
 8006c9c:	091b      	lsreq	r3, r3, #4
 8006c9e:	3004      	addeq	r0, #4
 8006ca0:	079a      	lsls	r2, r3, #30
 8006ca2:	bf04      	itt	eq
 8006ca4:	089b      	lsreq	r3, r3, #2
 8006ca6:	3002      	addeq	r0, #2
 8006ca8:	07da      	lsls	r2, r3, #31
 8006caa:	d403      	bmi.n	8006cb4 <__lo0bits+0x50>
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	f100 0001 	add.w	r0, r0, #1
 8006cb2:	d005      	beq.n	8006cc0 <__lo0bits+0x5c>
 8006cb4:	600b      	str	r3, [r1, #0]
 8006cb6:	4770      	bx	lr
 8006cb8:	4610      	mov	r0, r2
 8006cba:	e7e8      	b.n	8006c8e <__lo0bits+0x2a>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4770      	bx	lr
 8006cc0:	2020      	movs	r0, #32
 8006cc2:	4770      	bx	lr

08006cc4 <__i2b>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	2101      	movs	r1, #1
 8006cca:	f7ff feff 	bl	8006acc <_Balloc>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	b928      	cbnz	r0, 8006cde <__i2b+0x1a>
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <__i2b+0x24>)
 8006cd4:	4805      	ldr	r0, [pc, #20]	; (8006cec <__i2b+0x28>)
 8006cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cda:	f000 fc9b 	bl	8007614 <__assert_func>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	6144      	str	r4, [r0, #20]
 8006ce2:	6103      	str	r3, [r0, #16]
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	080082c3 	.word	0x080082c3
 8006cec:	080082d4 	.word	0x080082d4

08006cf0 <__multiply>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	690a      	ldr	r2, [r1, #16]
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	bfb8      	it	lt
 8006cfe:	460b      	movlt	r3, r1
 8006d00:	460d      	mov	r5, r1
 8006d02:	bfbc      	itt	lt
 8006d04:	4625      	movlt	r5, r4
 8006d06:	461c      	movlt	r4, r3
 8006d08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d10:	68ab      	ldr	r3, [r5, #8]
 8006d12:	6869      	ldr	r1, [r5, #4]
 8006d14:	eb0a 0709 	add.w	r7, sl, r9
 8006d18:	42bb      	cmp	r3, r7
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	bfb8      	it	lt
 8006d1e:	3101      	addlt	r1, #1
 8006d20:	f7ff fed4 	bl	8006acc <_Balloc>
 8006d24:	b930      	cbnz	r0, 8006d34 <__multiply+0x44>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <__multiply+0x144>)
 8006d2a:	4843      	ldr	r0, [pc, #268]	; (8006e38 <__multiply+0x148>)
 8006d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8006d30:	f000 fc70 	bl	8007614 <__assert_func>
 8006d34:	f100 0614 	add.w	r6, r0, #20
 8006d38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006d3c:	4633      	mov	r3, r6
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4543      	cmp	r3, r8
 8006d42:	d31e      	bcc.n	8006d82 <__multiply+0x92>
 8006d44:	f105 0c14 	add.w	ip, r5, #20
 8006d48:	f104 0314 	add.w	r3, r4, #20
 8006d4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006d50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	ebac 0205 	sub.w	r2, ip, r5
 8006d5a:	3a15      	subs	r2, #21
 8006d5c:	f022 0203 	bic.w	r2, r2, #3
 8006d60:	3204      	adds	r2, #4
 8006d62:	f105 0115 	add.w	r1, r5, #21
 8006d66:	458c      	cmp	ip, r1
 8006d68:	bf38      	it	cc
 8006d6a:	2204      	movcc	r2, #4
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9a02      	ldr	r2, [sp, #8]
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d808      	bhi.n	8006d88 <__multiply+0x98>
 8006d76:	2f00      	cmp	r7, #0
 8006d78:	dc55      	bgt.n	8006e26 <__multiply+0x136>
 8006d7a:	6107      	str	r7, [r0, #16]
 8006d7c:	b005      	add	sp, #20
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	f843 2b04 	str.w	r2, [r3], #4
 8006d86:	e7db      	b.n	8006d40 <__multiply+0x50>
 8006d88:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d8c:	f1ba 0f00 	cmp.w	sl, #0
 8006d90:	d020      	beq.n	8006dd4 <__multiply+0xe4>
 8006d92:	f105 0e14 	add.w	lr, r5, #20
 8006d96:	46b1      	mov	r9, r6
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006d9e:	f8d9 b000 	ldr.w	fp, [r9]
 8006da2:	b2a1      	uxth	r1, r4
 8006da4:	fa1f fb8b 	uxth.w	fp, fp
 8006da8:	fb0a b101 	mla	r1, sl, r1, fp
 8006dac:	4411      	add	r1, r2
 8006dae:	f8d9 2000 	ldr.w	r2, [r9]
 8006db2:	0c24      	lsrs	r4, r4, #16
 8006db4:	0c12      	lsrs	r2, r2, #16
 8006db6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006dba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006dbe:	b289      	uxth	r1, r1
 8006dc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006dc4:	45f4      	cmp	ip, lr
 8006dc6:	f849 1b04 	str.w	r1, [r9], #4
 8006dca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006dce:	d8e4      	bhi.n	8006d9a <__multiply+0xaa>
 8006dd0:	9901      	ldr	r1, [sp, #4]
 8006dd2:	5072      	str	r2, [r6, r1]
 8006dd4:	9a03      	ldr	r2, [sp, #12]
 8006dd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	d01f      	beq.n	8006e22 <__multiply+0x132>
 8006de2:	6834      	ldr	r4, [r6, #0]
 8006de4:	f105 0114 	add.w	r1, r5, #20
 8006de8:	46b6      	mov	lr, r6
 8006dea:	f04f 0a00 	mov.w	sl, #0
 8006dee:	880a      	ldrh	r2, [r1, #0]
 8006df0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006df4:	fb09 b202 	mla	r2, r9, r2, fp
 8006df8:	4492      	add	sl, r2
 8006dfa:	b2a4      	uxth	r4, r4
 8006dfc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006e00:	f84e 4b04 	str.w	r4, [lr], #4
 8006e04:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e08:	f8be 2000 	ldrh.w	r2, [lr]
 8006e0c:	0c24      	lsrs	r4, r4, #16
 8006e0e:	fb09 2404 	mla	r4, r9, r4, r2
 8006e12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e16:	458c      	cmp	ip, r1
 8006e18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e1c:	d8e7      	bhi.n	8006dee <__multiply+0xfe>
 8006e1e:	9a01      	ldr	r2, [sp, #4]
 8006e20:	50b4      	str	r4, [r6, r2]
 8006e22:	3604      	adds	r6, #4
 8006e24:	e7a3      	b.n	8006d6e <__multiply+0x7e>
 8006e26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1a5      	bne.n	8006d7a <__multiply+0x8a>
 8006e2e:	3f01      	subs	r7, #1
 8006e30:	e7a1      	b.n	8006d76 <__multiply+0x86>
 8006e32:	bf00      	nop
 8006e34:	080082c3 	.word	0x080082c3
 8006e38:	080082d4 	.word	0x080082d4

08006e3c <__pow5mult>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	4615      	mov	r5, r2
 8006e42:	f012 0203 	ands.w	r2, r2, #3
 8006e46:	4606      	mov	r6, r0
 8006e48:	460f      	mov	r7, r1
 8006e4a:	d007      	beq.n	8006e5c <__pow5mult+0x20>
 8006e4c:	4c25      	ldr	r4, [pc, #148]	; (8006ee4 <__pow5mult+0xa8>)
 8006e4e:	3a01      	subs	r2, #1
 8006e50:	2300      	movs	r3, #0
 8006e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e56:	f7ff fe9b 	bl	8006b90 <__multadd>
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	10ad      	asrs	r5, r5, #2
 8006e5e:	d03d      	beq.n	8006edc <__pow5mult+0xa0>
 8006e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e62:	b97c      	cbnz	r4, 8006e84 <__pow5mult+0x48>
 8006e64:	2010      	movs	r0, #16
 8006e66:	f7ff fe1b 	bl	8006aa0 <malloc>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8006e6e:	b928      	cbnz	r0, 8006e7c <__pow5mult+0x40>
 8006e70:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <__pow5mult+0xac>)
 8006e72:	481e      	ldr	r0, [pc, #120]	; (8006eec <__pow5mult+0xb0>)
 8006e74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e78:	f000 fbcc 	bl	8007614 <__assert_func>
 8006e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e80:	6004      	str	r4, [r0, #0]
 8006e82:	60c4      	str	r4, [r0, #12]
 8006e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e8c:	b94c      	cbnz	r4, 8006ea2 <__pow5mult+0x66>
 8006e8e:	f240 2171 	movw	r1, #625	; 0x271
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ff16 	bl	8006cc4 <__i2b>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	f04f 0900 	mov.w	r9, #0
 8006ea6:	07eb      	lsls	r3, r5, #31
 8006ea8:	d50a      	bpl.n	8006ec0 <__pow5mult+0x84>
 8006eaa:	4639      	mov	r1, r7
 8006eac:	4622      	mov	r2, r4
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7ff ff1e 	bl	8006cf0 <__multiply>
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4680      	mov	r8, r0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff fe47 	bl	8006b4c <_Bfree>
 8006ebe:	4647      	mov	r7, r8
 8006ec0:	106d      	asrs	r5, r5, #1
 8006ec2:	d00b      	beq.n	8006edc <__pow5mult+0xa0>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	b938      	cbnz	r0, 8006ed8 <__pow5mult+0x9c>
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff ff0f 	bl	8006cf0 <__multiply>
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	f8c0 9000 	str.w	r9, [r0]
 8006ed8:	4604      	mov	r4, r0
 8006eda:	e7e4      	b.n	8006ea6 <__pow5mult+0x6a>
 8006edc:	4638      	mov	r0, r7
 8006ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08008428 	.word	0x08008428
 8006ee8:	0800824d 	.word	0x0800824d
 8006eec:	080082d4 	.word	0x080082d4

08006ef0 <__lshift>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	6849      	ldr	r1, [r1, #4]
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006efe:	68a3      	ldr	r3, [r4, #8]
 8006f00:	4607      	mov	r7, r0
 8006f02:	4691      	mov	r9, r2
 8006f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f08:	f108 0601 	add.w	r6, r8, #1
 8006f0c:	42b3      	cmp	r3, r6
 8006f0e:	db0b      	blt.n	8006f28 <__lshift+0x38>
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fddb 	bl	8006acc <_Balloc>
 8006f16:	4605      	mov	r5, r0
 8006f18:	b948      	cbnz	r0, 8006f2e <__lshift+0x3e>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <__lshift+0xd0>)
 8006f1e:	4829      	ldr	r0, [pc, #164]	; (8006fc4 <__lshift+0xd4>)
 8006f20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f24:	f000 fb76 	bl	8007614 <__assert_func>
 8006f28:	3101      	adds	r1, #1
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	e7ee      	b.n	8006f0c <__lshift+0x1c>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f100 0114 	add.w	r1, r0, #20
 8006f34:	f100 0210 	add.w	r2, r0, #16
 8006f38:	4618      	mov	r0, r3
 8006f3a:	4553      	cmp	r3, sl
 8006f3c:	db33      	blt.n	8006fa6 <__lshift+0xb6>
 8006f3e:	6920      	ldr	r0, [r4, #16]
 8006f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f44:	f104 0314 	add.w	r3, r4, #20
 8006f48:	f019 091f 	ands.w	r9, r9, #31
 8006f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f54:	d02b      	beq.n	8006fae <__lshift+0xbe>
 8006f56:	f1c9 0e20 	rsb	lr, r9, #32
 8006f5a:	468a      	mov	sl, r1
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	fa00 f009 	lsl.w	r0, r0, r9
 8006f64:	4302      	orrs	r2, r0
 8006f66:	f84a 2b04 	str.w	r2, [sl], #4
 8006f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6e:	459c      	cmp	ip, r3
 8006f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f74:	d8f3      	bhi.n	8006f5e <__lshift+0x6e>
 8006f76:	ebac 0304 	sub.w	r3, ip, r4
 8006f7a:	3b15      	subs	r3, #21
 8006f7c:	f023 0303 	bic.w	r3, r3, #3
 8006f80:	3304      	adds	r3, #4
 8006f82:	f104 0015 	add.w	r0, r4, #21
 8006f86:	4584      	cmp	ip, r0
 8006f88:	bf38      	it	cc
 8006f8a:	2304      	movcc	r3, #4
 8006f8c:	50ca      	str	r2, [r1, r3]
 8006f8e:	b10a      	cbz	r2, 8006f94 <__lshift+0xa4>
 8006f90:	f108 0602 	add.w	r6, r8, #2
 8006f94:	3e01      	subs	r6, #1
 8006f96:	4638      	mov	r0, r7
 8006f98:	612e      	str	r6, [r5, #16]
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	f7ff fdd6 	bl	8006b4c <_Bfree>
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006faa:	3301      	adds	r3, #1
 8006fac:	e7c5      	b.n	8006f3a <__lshift+0x4a>
 8006fae:	3904      	subs	r1, #4
 8006fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fb8:	459c      	cmp	ip, r3
 8006fba:	d8f9      	bhi.n	8006fb0 <__lshift+0xc0>
 8006fbc:	e7ea      	b.n	8006f94 <__lshift+0xa4>
 8006fbe:	bf00      	nop
 8006fc0:	080082c3 	.word	0x080082c3
 8006fc4:	080082d4 	.word	0x080082d4

08006fc8 <__mcmp>:
 8006fc8:	b530      	push	{r4, r5, lr}
 8006fca:	6902      	ldr	r2, [r0, #16]
 8006fcc:	690c      	ldr	r4, [r1, #16]
 8006fce:	1b12      	subs	r2, r2, r4
 8006fd0:	d10e      	bne.n	8006ff0 <__mcmp+0x28>
 8006fd2:	f100 0314 	add.w	r3, r0, #20
 8006fd6:	3114      	adds	r1, #20
 8006fd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fe0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fe4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fe8:	42a5      	cmp	r5, r4
 8006fea:	d003      	beq.n	8006ff4 <__mcmp+0x2c>
 8006fec:	d305      	bcc.n	8006ffa <__mcmp+0x32>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	bd30      	pop	{r4, r5, pc}
 8006ff4:	4283      	cmp	r3, r0
 8006ff6:	d3f3      	bcc.n	8006fe0 <__mcmp+0x18>
 8006ff8:	e7fa      	b.n	8006ff0 <__mcmp+0x28>
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ffe:	e7f7      	b.n	8006ff0 <__mcmp+0x28>

08007000 <__mdiff>:
 8007000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	460c      	mov	r4, r1
 8007006:	4606      	mov	r6, r0
 8007008:	4611      	mov	r1, r2
 800700a:	4620      	mov	r0, r4
 800700c:	4617      	mov	r7, r2
 800700e:	f7ff ffdb 	bl	8006fc8 <__mcmp>
 8007012:	1e05      	subs	r5, r0, #0
 8007014:	d110      	bne.n	8007038 <__mdiff+0x38>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	f7ff fd57 	bl	8006acc <_Balloc>
 800701e:	b930      	cbnz	r0, 800702e <__mdiff+0x2e>
 8007020:	4b39      	ldr	r3, [pc, #228]	; (8007108 <__mdiff+0x108>)
 8007022:	4602      	mov	r2, r0
 8007024:	f240 2132 	movw	r1, #562	; 0x232
 8007028:	4838      	ldr	r0, [pc, #224]	; (800710c <__mdiff+0x10c>)
 800702a:	f000 faf3 	bl	8007614 <__assert_func>
 800702e:	2301      	movs	r3, #1
 8007030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007038:	bfa4      	itt	ge
 800703a:	463b      	movge	r3, r7
 800703c:	4627      	movge	r7, r4
 800703e:	4630      	mov	r0, r6
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	bfa6      	itte	ge
 8007044:	461c      	movge	r4, r3
 8007046:	2500      	movge	r5, #0
 8007048:	2501      	movlt	r5, #1
 800704a:	f7ff fd3f 	bl	8006acc <_Balloc>
 800704e:	b920      	cbnz	r0, 800705a <__mdiff+0x5a>
 8007050:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <__mdiff+0x108>)
 8007052:	4602      	mov	r2, r0
 8007054:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007058:	e7e6      	b.n	8007028 <__mdiff+0x28>
 800705a:	693e      	ldr	r6, [r7, #16]
 800705c:	60c5      	str	r5, [r0, #12]
 800705e:	6925      	ldr	r5, [r4, #16]
 8007060:	f107 0114 	add.w	r1, r7, #20
 8007064:	f104 0914 	add.w	r9, r4, #20
 8007068:	f100 0e14 	add.w	lr, r0, #20
 800706c:	f107 0210 	add.w	r2, r7, #16
 8007070:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007074:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007078:	46f2      	mov	sl, lr
 800707a:	2700      	movs	r7, #0
 800707c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007084:	fa1f f883 	uxth.w	r8, r3
 8007088:	fa17 f78b 	uxtah	r7, r7, fp
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	eba7 0808 	sub.w	r8, r7, r8
 8007092:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007096:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800709a:	fa1f f888 	uxth.w	r8, r8
 800709e:	141f      	asrs	r7, r3, #16
 80070a0:	454d      	cmp	r5, r9
 80070a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070a6:	f84a 3b04 	str.w	r3, [sl], #4
 80070aa:	d8e7      	bhi.n	800707c <__mdiff+0x7c>
 80070ac:	1b2b      	subs	r3, r5, r4
 80070ae:	3b15      	subs	r3, #21
 80070b0:	f023 0303 	bic.w	r3, r3, #3
 80070b4:	3304      	adds	r3, #4
 80070b6:	3415      	adds	r4, #21
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	bf38      	it	cc
 80070bc:	2304      	movcc	r3, #4
 80070be:	4419      	add	r1, r3
 80070c0:	4473      	add	r3, lr
 80070c2:	469e      	mov	lr, r3
 80070c4:	460d      	mov	r5, r1
 80070c6:	4565      	cmp	r5, ip
 80070c8:	d30e      	bcc.n	80070e8 <__mdiff+0xe8>
 80070ca:	f10c 0203 	add.w	r2, ip, #3
 80070ce:	1a52      	subs	r2, r2, r1
 80070d0:	f022 0203 	bic.w	r2, r2, #3
 80070d4:	3903      	subs	r1, #3
 80070d6:	458c      	cmp	ip, r1
 80070d8:	bf38      	it	cc
 80070da:	2200      	movcc	r2, #0
 80070dc:	441a      	add	r2, r3
 80070de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070e2:	b17b      	cbz	r3, 8007104 <__mdiff+0x104>
 80070e4:	6106      	str	r6, [r0, #16]
 80070e6:	e7a5      	b.n	8007034 <__mdiff+0x34>
 80070e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80070ec:	fa17 f488 	uxtah	r4, r7, r8
 80070f0:	1422      	asrs	r2, r4, #16
 80070f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80070f6:	b2a4      	uxth	r4, r4
 80070f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80070fc:	f84e 4b04 	str.w	r4, [lr], #4
 8007100:	1417      	asrs	r7, r2, #16
 8007102:	e7e0      	b.n	80070c6 <__mdiff+0xc6>
 8007104:	3e01      	subs	r6, #1
 8007106:	e7ea      	b.n	80070de <__mdiff+0xde>
 8007108:	080082c3 	.word	0x080082c3
 800710c:	080082d4 	.word	0x080082d4

08007110 <__d2b>:
 8007110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4689      	mov	r9, r1
 8007116:	2101      	movs	r1, #1
 8007118:	ec57 6b10 	vmov	r6, r7, d0
 800711c:	4690      	mov	r8, r2
 800711e:	f7ff fcd5 	bl	8006acc <_Balloc>
 8007122:	4604      	mov	r4, r0
 8007124:	b930      	cbnz	r0, 8007134 <__d2b+0x24>
 8007126:	4602      	mov	r2, r0
 8007128:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <__d2b+0xb0>)
 800712a:	4826      	ldr	r0, [pc, #152]	; (80071c4 <__d2b+0xb4>)
 800712c:	f240 310a 	movw	r1, #778	; 0x30a
 8007130:	f000 fa70 	bl	8007614 <__assert_func>
 8007134:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800713c:	bb35      	cbnz	r5, 800718c <__d2b+0x7c>
 800713e:	2e00      	cmp	r6, #0
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	d028      	beq.n	8007196 <__d2b+0x86>
 8007144:	4668      	mov	r0, sp
 8007146:	9600      	str	r6, [sp, #0]
 8007148:	f7ff fd8c 	bl	8006c64 <__lo0bits>
 800714c:	9900      	ldr	r1, [sp, #0]
 800714e:	b300      	cbz	r0, 8007192 <__d2b+0x82>
 8007150:	9a01      	ldr	r2, [sp, #4]
 8007152:	f1c0 0320 	rsb	r3, r0, #32
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	430b      	orrs	r3, r1
 800715c:	40c2      	lsrs	r2, r0
 800715e:	6163      	str	r3, [r4, #20]
 8007160:	9201      	str	r2, [sp, #4]
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	61a3      	str	r3, [r4, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf14      	ite	ne
 800716a:	2202      	movne	r2, #2
 800716c:	2201      	moveq	r2, #1
 800716e:	6122      	str	r2, [r4, #16]
 8007170:	b1d5      	cbz	r5, 80071a8 <__d2b+0x98>
 8007172:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007176:	4405      	add	r5, r0
 8007178:	f8c9 5000 	str.w	r5, [r9]
 800717c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007180:	f8c8 0000 	str.w	r0, [r8]
 8007184:	4620      	mov	r0, r4
 8007186:	b003      	add	sp, #12
 8007188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800718c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007190:	e7d5      	b.n	800713e <__d2b+0x2e>
 8007192:	6161      	str	r1, [r4, #20]
 8007194:	e7e5      	b.n	8007162 <__d2b+0x52>
 8007196:	a801      	add	r0, sp, #4
 8007198:	f7ff fd64 	bl	8006c64 <__lo0bits>
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	6163      	str	r3, [r4, #20]
 80071a0:	2201      	movs	r2, #1
 80071a2:	6122      	str	r2, [r4, #16]
 80071a4:	3020      	adds	r0, #32
 80071a6:	e7e3      	b.n	8007170 <__d2b+0x60>
 80071a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071b0:	f8c9 0000 	str.w	r0, [r9]
 80071b4:	6918      	ldr	r0, [r3, #16]
 80071b6:	f7ff fd35 	bl	8006c24 <__hi0bits>
 80071ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071be:	e7df      	b.n	8007180 <__d2b+0x70>
 80071c0:	080082c3 	.word	0x080082c3
 80071c4:	080082d4 	.word	0x080082d4

080071c8 <_calloc_r>:
 80071c8:	b513      	push	{r0, r1, r4, lr}
 80071ca:	434a      	muls	r2, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	f000 f85a 	bl	8007288 <_malloc_r>
 80071d4:	4604      	mov	r4, r0
 80071d6:	b118      	cbz	r0, 80071e0 <_calloc_r+0x18>
 80071d8:	9a01      	ldr	r2, [sp, #4]
 80071da:	2100      	movs	r1, #0
 80071dc:	f7fe f93c 	bl	8005458 <memset>
 80071e0:	4620      	mov	r0, r4
 80071e2:	b002      	add	sp, #8
 80071e4:	bd10      	pop	{r4, pc}
	...

080071e8 <_free_r>:
 80071e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ea:	2900      	cmp	r1, #0
 80071ec:	d048      	beq.n	8007280 <_free_r+0x98>
 80071ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f2:	9001      	str	r0, [sp, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f1a1 0404 	sub.w	r4, r1, #4
 80071fa:	bfb8      	it	lt
 80071fc:	18e4      	addlt	r4, r4, r3
 80071fe:	f000 fa65 	bl	80076cc <__malloc_lock>
 8007202:	4a20      	ldr	r2, [pc, #128]	; (8007284 <_free_r+0x9c>)
 8007204:	9801      	ldr	r0, [sp, #4]
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	4615      	mov	r5, r2
 800720a:	b933      	cbnz	r3, 800721a <_free_r+0x32>
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	6014      	str	r4, [r2, #0]
 8007210:	b003      	add	sp, #12
 8007212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007216:	f000 ba5f 	b.w	80076d8 <__malloc_unlock>
 800721a:	42a3      	cmp	r3, r4
 800721c:	d90b      	bls.n	8007236 <_free_r+0x4e>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	1862      	adds	r2, r4, r1
 8007222:	4293      	cmp	r3, r2
 8007224:	bf04      	itt	eq
 8007226:	681a      	ldreq	r2, [r3, #0]
 8007228:	685b      	ldreq	r3, [r3, #4]
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	bf04      	itt	eq
 800722e:	1852      	addeq	r2, r2, r1
 8007230:	6022      	streq	r2, [r4, #0]
 8007232:	602c      	str	r4, [r5, #0]
 8007234:	e7ec      	b.n	8007210 <_free_r+0x28>
 8007236:	461a      	mov	r2, r3
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b10b      	cbz	r3, 8007240 <_free_r+0x58>
 800723c:	42a3      	cmp	r3, r4
 800723e:	d9fa      	bls.n	8007236 <_free_r+0x4e>
 8007240:	6811      	ldr	r1, [r2, #0]
 8007242:	1855      	adds	r5, r2, r1
 8007244:	42a5      	cmp	r5, r4
 8007246:	d10b      	bne.n	8007260 <_free_r+0x78>
 8007248:	6824      	ldr	r4, [r4, #0]
 800724a:	4421      	add	r1, r4
 800724c:	1854      	adds	r4, r2, r1
 800724e:	42a3      	cmp	r3, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	d1dd      	bne.n	8007210 <_free_r+0x28>
 8007254:	681c      	ldr	r4, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	6053      	str	r3, [r2, #4]
 800725a:	4421      	add	r1, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	e7d7      	b.n	8007210 <_free_r+0x28>
 8007260:	d902      	bls.n	8007268 <_free_r+0x80>
 8007262:	230c      	movs	r3, #12
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	e7d3      	b.n	8007210 <_free_r+0x28>
 8007268:	6825      	ldr	r5, [r4, #0]
 800726a:	1961      	adds	r1, r4, r5
 800726c:	428b      	cmp	r3, r1
 800726e:	bf04      	itt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	bf04      	itt	eq
 8007278:	1949      	addeq	r1, r1, r5
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	6054      	str	r4, [r2, #4]
 800727e:	e7c7      	b.n	8007210 <_free_r+0x28>
 8007280:	b003      	add	sp, #12
 8007282:	bd30      	pop	{r4, r5, pc}
 8007284:	20000264 	.word	0x20000264

08007288 <_malloc_r>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	1ccd      	adds	r5, r1, #3
 800728c:	f025 0503 	bic.w	r5, r5, #3
 8007290:	3508      	adds	r5, #8
 8007292:	2d0c      	cmp	r5, #12
 8007294:	bf38      	it	cc
 8007296:	250c      	movcc	r5, #12
 8007298:	2d00      	cmp	r5, #0
 800729a:	4606      	mov	r6, r0
 800729c:	db01      	blt.n	80072a2 <_malloc_r+0x1a>
 800729e:	42a9      	cmp	r1, r5
 80072a0:	d903      	bls.n	80072aa <_malloc_r+0x22>
 80072a2:	230c      	movs	r3, #12
 80072a4:	6033      	str	r3, [r6, #0]
 80072a6:	2000      	movs	r0, #0
 80072a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072aa:	f000 fa0f 	bl	80076cc <__malloc_lock>
 80072ae:	4921      	ldr	r1, [pc, #132]	; (8007334 <_malloc_r+0xac>)
 80072b0:	680a      	ldr	r2, [r1, #0]
 80072b2:	4614      	mov	r4, r2
 80072b4:	b99c      	cbnz	r4, 80072de <_malloc_r+0x56>
 80072b6:	4f20      	ldr	r7, [pc, #128]	; (8007338 <_malloc_r+0xb0>)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	b923      	cbnz	r3, 80072c6 <_malloc_r+0x3e>
 80072bc:	4621      	mov	r1, r4
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f998 	bl	80075f4 <_sbrk_r>
 80072c4:	6038      	str	r0, [r7, #0]
 80072c6:	4629      	mov	r1, r5
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f993 	bl	80075f4 <_sbrk_r>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d123      	bne.n	800731a <_malloc_r+0x92>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	4630      	mov	r0, r6
 80072d8:	f000 f9fe 	bl	80076d8 <__malloc_unlock>
 80072dc:	e7e3      	b.n	80072a6 <_malloc_r+0x1e>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1b5b      	subs	r3, r3, r5
 80072e2:	d417      	bmi.n	8007314 <_malloc_r+0x8c>
 80072e4:	2b0b      	cmp	r3, #11
 80072e6:	d903      	bls.n	80072f0 <_malloc_r+0x68>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	441c      	add	r4, r3
 80072ec:	6025      	str	r5, [r4, #0]
 80072ee:	e004      	b.n	80072fa <_malloc_r+0x72>
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	42a2      	cmp	r2, r4
 80072f4:	bf0c      	ite	eq
 80072f6:	600b      	streq	r3, [r1, #0]
 80072f8:	6053      	strne	r3, [r2, #4]
 80072fa:	4630      	mov	r0, r6
 80072fc:	f000 f9ec 	bl	80076d8 <__malloc_unlock>
 8007300:	f104 000b 	add.w	r0, r4, #11
 8007304:	1d23      	adds	r3, r4, #4
 8007306:	f020 0007 	bic.w	r0, r0, #7
 800730a:	1ac2      	subs	r2, r0, r3
 800730c:	d0cc      	beq.n	80072a8 <_malloc_r+0x20>
 800730e:	1a1b      	subs	r3, r3, r0
 8007310:	50a3      	str	r3, [r4, r2]
 8007312:	e7c9      	b.n	80072a8 <_malloc_r+0x20>
 8007314:	4622      	mov	r2, r4
 8007316:	6864      	ldr	r4, [r4, #4]
 8007318:	e7cc      	b.n	80072b4 <_malloc_r+0x2c>
 800731a:	1cc4      	adds	r4, r0, #3
 800731c:	f024 0403 	bic.w	r4, r4, #3
 8007320:	42a0      	cmp	r0, r4
 8007322:	d0e3      	beq.n	80072ec <_malloc_r+0x64>
 8007324:	1a21      	subs	r1, r4, r0
 8007326:	4630      	mov	r0, r6
 8007328:	f000 f964 	bl	80075f4 <_sbrk_r>
 800732c:	3001      	adds	r0, #1
 800732e:	d1dd      	bne.n	80072ec <_malloc_r+0x64>
 8007330:	e7cf      	b.n	80072d2 <_malloc_r+0x4a>
 8007332:	bf00      	nop
 8007334:	20000264 	.word	0x20000264
 8007338:	20000268 	.word	0x20000268

0800733c <__ssputs_r>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	688e      	ldr	r6, [r1, #8]
 8007342:	429e      	cmp	r6, r3
 8007344:	4682      	mov	sl, r0
 8007346:	460c      	mov	r4, r1
 8007348:	4690      	mov	r8, r2
 800734a:	461f      	mov	r7, r3
 800734c:	d838      	bhi.n	80073c0 <__ssputs_r+0x84>
 800734e:	898a      	ldrh	r2, [r1, #12]
 8007350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007354:	d032      	beq.n	80073bc <__ssputs_r+0x80>
 8007356:	6825      	ldr	r5, [r4, #0]
 8007358:	6909      	ldr	r1, [r1, #16]
 800735a:	eba5 0901 	sub.w	r9, r5, r1
 800735e:	6965      	ldr	r5, [r4, #20]
 8007360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007368:	3301      	adds	r3, #1
 800736a:	444b      	add	r3, r9
 800736c:	106d      	asrs	r5, r5, #1
 800736e:	429d      	cmp	r5, r3
 8007370:	bf38      	it	cc
 8007372:	461d      	movcc	r5, r3
 8007374:	0553      	lsls	r3, r2, #21
 8007376:	d531      	bpl.n	80073dc <__ssputs_r+0xa0>
 8007378:	4629      	mov	r1, r5
 800737a:	f7ff ff85 	bl	8007288 <_malloc_r>
 800737e:	4606      	mov	r6, r0
 8007380:	b950      	cbnz	r0, 8007398 <__ssputs_r+0x5c>
 8007382:	230c      	movs	r3, #12
 8007384:	f8ca 3000 	str.w	r3, [sl]
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	6921      	ldr	r1, [r4, #16]
 800739a:	464a      	mov	r2, r9
 800739c:	f7ff fb88 	bl	8006ab0 <memcpy>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	6126      	str	r6, [r4, #16]
 80073ae:	6165      	str	r5, [r4, #20]
 80073b0:	444e      	add	r6, r9
 80073b2:	eba5 0509 	sub.w	r5, r5, r9
 80073b6:	6026      	str	r6, [r4, #0]
 80073b8:	60a5      	str	r5, [r4, #8]
 80073ba:	463e      	mov	r6, r7
 80073bc:	42be      	cmp	r6, r7
 80073be:	d900      	bls.n	80073c2 <__ssputs_r+0x86>
 80073c0:	463e      	mov	r6, r7
 80073c2:	4632      	mov	r2, r6
 80073c4:	6820      	ldr	r0, [r4, #0]
 80073c6:	4641      	mov	r1, r8
 80073c8:	f000 f966 	bl	8007698 <memmove>
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	6822      	ldr	r2, [r4, #0]
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	4432      	add	r2, r6
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	2000      	movs	r0, #0
 80073da:	e7db      	b.n	8007394 <__ssputs_r+0x58>
 80073dc:	462a      	mov	r2, r5
 80073de:	f000 f981 	bl	80076e4 <_realloc_r>
 80073e2:	4606      	mov	r6, r0
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d1e1      	bne.n	80073ac <__ssputs_r+0x70>
 80073e8:	6921      	ldr	r1, [r4, #16]
 80073ea:	4650      	mov	r0, sl
 80073ec:	f7ff fefc 	bl	80071e8 <_free_r>
 80073f0:	e7c7      	b.n	8007382 <__ssputs_r+0x46>
	...

080073f4 <_svfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	4698      	mov	r8, r3
 80073fa:	898b      	ldrh	r3, [r1, #12]
 80073fc:	061b      	lsls	r3, r3, #24
 80073fe:	b09d      	sub	sp, #116	; 0x74
 8007400:	4607      	mov	r7, r0
 8007402:	460d      	mov	r5, r1
 8007404:	4614      	mov	r4, r2
 8007406:	d50e      	bpl.n	8007426 <_svfiprintf_r+0x32>
 8007408:	690b      	ldr	r3, [r1, #16]
 800740a:	b963      	cbnz	r3, 8007426 <_svfiprintf_r+0x32>
 800740c:	2140      	movs	r1, #64	; 0x40
 800740e:	f7ff ff3b 	bl	8007288 <_malloc_r>
 8007412:	6028      	str	r0, [r5, #0]
 8007414:	6128      	str	r0, [r5, #16]
 8007416:	b920      	cbnz	r0, 8007422 <_svfiprintf_r+0x2e>
 8007418:	230c      	movs	r3, #12
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007420:	e0d1      	b.n	80075c6 <_svfiprintf_r+0x1d2>
 8007422:	2340      	movs	r3, #64	; 0x40
 8007424:	616b      	str	r3, [r5, #20]
 8007426:	2300      	movs	r3, #0
 8007428:	9309      	str	r3, [sp, #36]	; 0x24
 800742a:	2320      	movs	r3, #32
 800742c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007430:	f8cd 800c 	str.w	r8, [sp, #12]
 8007434:	2330      	movs	r3, #48	; 0x30
 8007436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075e0 <_svfiprintf_r+0x1ec>
 800743a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800743e:	f04f 0901 	mov.w	r9, #1
 8007442:	4623      	mov	r3, r4
 8007444:	469a      	mov	sl, r3
 8007446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744a:	b10a      	cbz	r2, 8007450 <_svfiprintf_r+0x5c>
 800744c:	2a25      	cmp	r2, #37	; 0x25
 800744e:	d1f9      	bne.n	8007444 <_svfiprintf_r+0x50>
 8007450:	ebba 0b04 	subs.w	fp, sl, r4
 8007454:	d00b      	beq.n	800746e <_svfiprintf_r+0x7a>
 8007456:	465b      	mov	r3, fp
 8007458:	4622      	mov	r2, r4
 800745a:	4629      	mov	r1, r5
 800745c:	4638      	mov	r0, r7
 800745e:	f7ff ff6d 	bl	800733c <__ssputs_r>
 8007462:	3001      	adds	r0, #1
 8007464:	f000 80aa 	beq.w	80075bc <_svfiprintf_r+0x1c8>
 8007468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746a:	445a      	add	r2, fp
 800746c:	9209      	str	r2, [sp, #36]	; 0x24
 800746e:	f89a 3000 	ldrb.w	r3, [sl]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80a2 	beq.w	80075bc <_svfiprintf_r+0x1c8>
 8007478:	2300      	movs	r3, #0
 800747a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800747e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007482:	f10a 0a01 	add.w	sl, sl, #1
 8007486:	9304      	str	r3, [sp, #16]
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800748e:	931a      	str	r3, [sp, #104]	; 0x68
 8007490:	4654      	mov	r4, sl
 8007492:	2205      	movs	r2, #5
 8007494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007498:	4851      	ldr	r0, [pc, #324]	; (80075e0 <_svfiprintf_r+0x1ec>)
 800749a:	f7f8 fec1 	bl	8000220 <memchr>
 800749e:	9a04      	ldr	r2, [sp, #16]
 80074a0:	b9d8      	cbnz	r0, 80074da <_svfiprintf_r+0xe6>
 80074a2:	06d0      	lsls	r0, r2, #27
 80074a4:	bf44      	itt	mi
 80074a6:	2320      	movmi	r3, #32
 80074a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ac:	0711      	lsls	r1, r2, #28
 80074ae:	bf44      	itt	mi
 80074b0:	232b      	movmi	r3, #43	; 0x2b
 80074b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ba:	2b2a      	cmp	r3, #42	; 0x2a
 80074bc:	d015      	beq.n	80074ea <_svfiprintf_r+0xf6>
 80074be:	9a07      	ldr	r2, [sp, #28]
 80074c0:	4654      	mov	r4, sl
 80074c2:	2000      	movs	r0, #0
 80074c4:	f04f 0c0a 	mov.w	ip, #10
 80074c8:	4621      	mov	r1, r4
 80074ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ce:	3b30      	subs	r3, #48	; 0x30
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d94e      	bls.n	8007572 <_svfiprintf_r+0x17e>
 80074d4:	b1b0      	cbz	r0, 8007504 <_svfiprintf_r+0x110>
 80074d6:	9207      	str	r2, [sp, #28]
 80074d8:	e014      	b.n	8007504 <_svfiprintf_r+0x110>
 80074da:	eba0 0308 	sub.w	r3, r0, r8
 80074de:	fa09 f303 	lsl.w	r3, r9, r3
 80074e2:	4313      	orrs	r3, r2
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	46a2      	mov	sl, r4
 80074e8:	e7d2      	b.n	8007490 <_svfiprintf_r+0x9c>
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	1d19      	adds	r1, r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	9103      	str	r1, [sp, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfbb      	ittet	lt
 80074f6:	425b      	neglt	r3, r3
 80074f8:	f042 0202 	orrlt.w	r2, r2, #2
 80074fc:	9307      	strge	r3, [sp, #28]
 80074fe:	9307      	strlt	r3, [sp, #28]
 8007500:	bfb8      	it	lt
 8007502:	9204      	strlt	r2, [sp, #16]
 8007504:	7823      	ldrb	r3, [r4, #0]
 8007506:	2b2e      	cmp	r3, #46	; 0x2e
 8007508:	d10c      	bne.n	8007524 <_svfiprintf_r+0x130>
 800750a:	7863      	ldrb	r3, [r4, #1]
 800750c:	2b2a      	cmp	r3, #42	; 0x2a
 800750e:	d135      	bne.n	800757c <_svfiprintf_r+0x188>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	9203      	str	r2, [sp, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	bfb8      	it	lt
 800751c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007520:	3402      	adds	r4, #2
 8007522:	9305      	str	r3, [sp, #20]
 8007524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075f0 <_svfiprintf_r+0x1fc>
 8007528:	7821      	ldrb	r1, [r4, #0]
 800752a:	2203      	movs	r2, #3
 800752c:	4650      	mov	r0, sl
 800752e:	f7f8 fe77 	bl	8000220 <memchr>
 8007532:	b140      	cbz	r0, 8007546 <_svfiprintf_r+0x152>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	eba0 000a 	sub.w	r0, r0, sl
 800753a:	fa03 f000 	lsl.w	r0, r3, r0
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	4303      	orrs	r3, r0
 8007542:	3401      	adds	r4, #1
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754a:	4826      	ldr	r0, [pc, #152]	; (80075e4 <_svfiprintf_r+0x1f0>)
 800754c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007550:	2206      	movs	r2, #6
 8007552:	f7f8 fe65 	bl	8000220 <memchr>
 8007556:	2800      	cmp	r0, #0
 8007558:	d038      	beq.n	80075cc <_svfiprintf_r+0x1d8>
 800755a:	4b23      	ldr	r3, [pc, #140]	; (80075e8 <_svfiprintf_r+0x1f4>)
 800755c:	bb1b      	cbnz	r3, 80075a6 <_svfiprintf_r+0x1b2>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	3307      	adds	r3, #7
 8007562:	f023 0307 	bic.w	r3, r3, #7
 8007566:	3308      	adds	r3, #8
 8007568:	9303      	str	r3, [sp, #12]
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	4433      	add	r3, r6
 800756e:	9309      	str	r3, [sp, #36]	; 0x24
 8007570:	e767      	b.n	8007442 <_svfiprintf_r+0x4e>
 8007572:	fb0c 3202 	mla	r2, ip, r2, r3
 8007576:	460c      	mov	r4, r1
 8007578:	2001      	movs	r0, #1
 800757a:	e7a5      	b.n	80074c8 <_svfiprintf_r+0xd4>
 800757c:	2300      	movs	r3, #0
 800757e:	3401      	adds	r4, #1
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	4619      	mov	r1, r3
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	4620      	mov	r0, r4
 800758a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800758e:	3a30      	subs	r2, #48	; 0x30
 8007590:	2a09      	cmp	r2, #9
 8007592:	d903      	bls.n	800759c <_svfiprintf_r+0x1a8>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0c5      	beq.n	8007524 <_svfiprintf_r+0x130>
 8007598:	9105      	str	r1, [sp, #20]
 800759a:	e7c3      	b.n	8007524 <_svfiprintf_r+0x130>
 800759c:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a0:	4604      	mov	r4, r0
 80075a2:	2301      	movs	r3, #1
 80075a4:	e7f0      	b.n	8007588 <_svfiprintf_r+0x194>
 80075a6:	ab03      	add	r3, sp, #12
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <_svfiprintf_r+0x1f8>)
 80075ae:	a904      	add	r1, sp, #16
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7fd fff9 	bl	80055a8 <_printf_float>
 80075b6:	1c42      	adds	r2, r0, #1
 80075b8:	4606      	mov	r6, r0
 80075ba:	d1d6      	bne.n	800756a <_svfiprintf_r+0x176>
 80075bc:	89ab      	ldrh	r3, [r5, #12]
 80075be:	065b      	lsls	r3, r3, #25
 80075c0:	f53f af2c 	bmi.w	800741c <_svfiprintf_r+0x28>
 80075c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c6:	b01d      	add	sp, #116	; 0x74
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <_svfiprintf_r+0x1f8>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	4638      	mov	r0, r7
 80075d8:	f7fe fa8a 	bl	8005af0 <_printf_i>
 80075dc:	e7eb      	b.n	80075b6 <_svfiprintf_r+0x1c2>
 80075de:	bf00      	nop
 80075e0:	08008434 	.word	0x08008434
 80075e4:	0800843e 	.word	0x0800843e
 80075e8:	080055a9 	.word	0x080055a9
 80075ec:	0800733d 	.word	0x0800733d
 80075f0:	0800843a 	.word	0x0800843a

080075f4 <_sbrk_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	; (8007610 <_sbrk_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fa fa3e 	bl	8001a80 <_sbrk>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_sbrk_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_sbrk_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	200005d4 	.word	0x200005d4

08007614 <__assert_func>:
 8007614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007616:	4614      	mov	r4, r2
 8007618:	461a      	mov	r2, r3
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <__assert_func+0x2c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4605      	mov	r5, r0
 8007620:	68d8      	ldr	r0, [r3, #12]
 8007622:	b14c      	cbz	r4, 8007638 <__assert_func+0x24>
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <__assert_func+0x30>)
 8007626:	9100      	str	r1, [sp, #0]
 8007628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800762c:	4906      	ldr	r1, [pc, #24]	; (8007648 <__assert_func+0x34>)
 800762e:	462b      	mov	r3, r5
 8007630:	f000 f80e 	bl	8007650 <fiprintf>
 8007634:	f000 faa4 	bl	8007b80 <abort>
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <__assert_func+0x38>)
 800763a:	461c      	mov	r4, r3
 800763c:	e7f3      	b.n	8007626 <__assert_func+0x12>
 800763e:	bf00      	nop
 8007640:	2000000c 	.word	0x2000000c
 8007644:	08008445 	.word	0x08008445
 8007648:	08008452 	.word	0x08008452
 800764c:	08008480 	.word	0x08008480

08007650 <fiprintf>:
 8007650:	b40e      	push	{r1, r2, r3}
 8007652:	b503      	push	{r0, r1, lr}
 8007654:	4601      	mov	r1, r0
 8007656:	ab03      	add	r3, sp, #12
 8007658:	4805      	ldr	r0, [pc, #20]	; (8007670 <fiprintf+0x20>)
 800765a:	f853 2b04 	ldr.w	r2, [r3], #4
 800765e:	6800      	ldr	r0, [r0, #0]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f000 f88f 	bl	8007784 <_vfiprintf_r>
 8007666:	b002      	add	sp, #8
 8007668:	f85d eb04 	ldr.w	lr, [sp], #4
 800766c:	b003      	add	sp, #12
 800766e:	4770      	bx	lr
 8007670:	2000000c 	.word	0x2000000c

08007674 <__ascii_mbtowc>:
 8007674:	b082      	sub	sp, #8
 8007676:	b901      	cbnz	r1, 800767a <__ascii_mbtowc+0x6>
 8007678:	a901      	add	r1, sp, #4
 800767a:	b142      	cbz	r2, 800768e <__ascii_mbtowc+0x1a>
 800767c:	b14b      	cbz	r3, 8007692 <__ascii_mbtowc+0x1e>
 800767e:	7813      	ldrb	r3, [r2, #0]
 8007680:	600b      	str	r3, [r1, #0]
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	1e10      	subs	r0, r2, #0
 8007686:	bf18      	it	ne
 8007688:	2001      	movne	r0, #1
 800768a:	b002      	add	sp, #8
 800768c:	4770      	bx	lr
 800768e:	4610      	mov	r0, r2
 8007690:	e7fb      	b.n	800768a <__ascii_mbtowc+0x16>
 8007692:	f06f 0001 	mvn.w	r0, #1
 8007696:	e7f8      	b.n	800768a <__ascii_mbtowc+0x16>

08007698 <memmove>:
 8007698:	4288      	cmp	r0, r1
 800769a:	b510      	push	{r4, lr}
 800769c:	eb01 0402 	add.w	r4, r1, r2
 80076a0:	d902      	bls.n	80076a8 <memmove+0x10>
 80076a2:	4284      	cmp	r4, r0
 80076a4:	4623      	mov	r3, r4
 80076a6:	d807      	bhi.n	80076b8 <memmove+0x20>
 80076a8:	1e43      	subs	r3, r0, #1
 80076aa:	42a1      	cmp	r1, r4
 80076ac:	d008      	beq.n	80076c0 <memmove+0x28>
 80076ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076b6:	e7f8      	b.n	80076aa <memmove+0x12>
 80076b8:	4402      	add	r2, r0
 80076ba:	4601      	mov	r1, r0
 80076bc:	428a      	cmp	r2, r1
 80076be:	d100      	bne.n	80076c2 <memmove+0x2a>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ca:	e7f7      	b.n	80076bc <memmove+0x24>

080076cc <__malloc_lock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__malloc_lock+0x8>)
 80076ce:	f000 bc17 	b.w	8007f00 <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	200005dc 	.word	0x200005dc

080076d8 <__malloc_unlock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_unlock+0x8>)
 80076da:	f000 bc12 	b.w	8007f02 <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	200005dc 	.word	0x200005dc

080076e4 <_realloc_r>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	4614      	mov	r4, r2
 80076ea:	460e      	mov	r6, r1
 80076ec:	b921      	cbnz	r1, 80076f8 <_realloc_r+0x14>
 80076ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076f2:	4611      	mov	r1, r2
 80076f4:	f7ff bdc8 	b.w	8007288 <_malloc_r>
 80076f8:	b922      	cbnz	r2, 8007704 <_realloc_r+0x20>
 80076fa:	f7ff fd75 	bl	80071e8 <_free_r>
 80076fe:	4625      	mov	r5, r4
 8007700:	4628      	mov	r0, r5
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	f000 fc62 	bl	8007fcc <_malloc_usable_size_r>
 8007708:	42a0      	cmp	r0, r4
 800770a:	d20f      	bcs.n	800772c <_realloc_r+0x48>
 800770c:	4621      	mov	r1, r4
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff fdba 	bl	8007288 <_malloc_r>
 8007714:	4605      	mov	r5, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d0f2      	beq.n	8007700 <_realloc_r+0x1c>
 800771a:	4631      	mov	r1, r6
 800771c:	4622      	mov	r2, r4
 800771e:	f7ff f9c7 	bl	8006ab0 <memcpy>
 8007722:	4631      	mov	r1, r6
 8007724:	4638      	mov	r0, r7
 8007726:	f7ff fd5f 	bl	80071e8 <_free_r>
 800772a:	e7e9      	b.n	8007700 <_realloc_r+0x1c>
 800772c:	4635      	mov	r5, r6
 800772e:	e7e7      	b.n	8007700 <_realloc_r+0x1c>

08007730 <__sfputc_r>:
 8007730:	6893      	ldr	r3, [r2, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	b410      	push	{r4}
 8007738:	6093      	str	r3, [r2, #8]
 800773a:	da08      	bge.n	800774e <__sfputc_r+0x1e>
 800773c:	6994      	ldr	r4, [r2, #24]
 800773e:	42a3      	cmp	r3, r4
 8007740:	db01      	blt.n	8007746 <__sfputc_r+0x16>
 8007742:	290a      	cmp	r1, #10
 8007744:	d103      	bne.n	800774e <__sfputc_r+0x1e>
 8007746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800774a:	f000 b94b 	b.w	80079e4 <__swbuf_r>
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	1c58      	adds	r0, r3, #1
 8007752:	6010      	str	r0, [r2, #0]
 8007754:	7019      	strb	r1, [r3, #0]
 8007756:	4608      	mov	r0, r1
 8007758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800775c:	4770      	bx	lr

0800775e <__sfputs_r>:
 800775e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007760:	4606      	mov	r6, r0
 8007762:	460f      	mov	r7, r1
 8007764:	4614      	mov	r4, r2
 8007766:	18d5      	adds	r5, r2, r3
 8007768:	42ac      	cmp	r4, r5
 800776a:	d101      	bne.n	8007770 <__sfputs_r+0x12>
 800776c:	2000      	movs	r0, #0
 800776e:	e007      	b.n	8007780 <__sfputs_r+0x22>
 8007770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007774:	463a      	mov	r2, r7
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ffda 	bl	8007730 <__sfputc_r>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d1f3      	bne.n	8007768 <__sfputs_r+0xa>
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007784 <_vfiprintf_r>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	460d      	mov	r5, r1
 800778a:	b09d      	sub	sp, #116	; 0x74
 800778c:	4614      	mov	r4, r2
 800778e:	4698      	mov	r8, r3
 8007790:	4606      	mov	r6, r0
 8007792:	b118      	cbz	r0, 800779c <_vfiprintf_r+0x18>
 8007794:	6983      	ldr	r3, [r0, #24]
 8007796:	b90b      	cbnz	r3, 800779c <_vfiprintf_r+0x18>
 8007798:	f000 fb14 	bl	8007dc4 <__sinit>
 800779c:	4b89      	ldr	r3, [pc, #548]	; (80079c4 <_vfiprintf_r+0x240>)
 800779e:	429d      	cmp	r5, r3
 80077a0:	d11b      	bne.n	80077da <_vfiprintf_r+0x56>
 80077a2:	6875      	ldr	r5, [r6, #4]
 80077a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077a6:	07d9      	lsls	r1, r3, #31
 80077a8:	d405      	bmi.n	80077b6 <_vfiprintf_r+0x32>
 80077aa:	89ab      	ldrh	r3, [r5, #12]
 80077ac:	059a      	lsls	r2, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_vfiprintf_r+0x32>
 80077b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077b2:	f000 fba5 	bl	8007f00 <__retarget_lock_acquire_recursive>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	071b      	lsls	r3, r3, #28
 80077ba:	d501      	bpl.n	80077c0 <_vfiprintf_r+0x3c>
 80077bc:	692b      	ldr	r3, [r5, #16]
 80077be:	b9eb      	cbnz	r3, 80077fc <_vfiprintf_r+0x78>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 f96e 	bl	8007aa4 <__swsetup_r>
 80077c8:	b1c0      	cbz	r0, 80077fc <_vfiprintf_r+0x78>
 80077ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077cc:	07dc      	lsls	r4, r3, #31
 80077ce:	d50e      	bpl.n	80077ee <_vfiprintf_r+0x6a>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d4:	b01d      	add	sp, #116	; 0x74
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	4b7b      	ldr	r3, [pc, #492]	; (80079c8 <_vfiprintf_r+0x244>)
 80077dc:	429d      	cmp	r5, r3
 80077de:	d101      	bne.n	80077e4 <_vfiprintf_r+0x60>
 80077e0:	68b5      	ldr	r5, [r6, #8]
 80077e2:	e7df      	b.n	80077a4 <_vfiprintf_r+0x20>
 80077e4:	4b79      	ldr	r3, [pc, #484]	; (80079cc <_vfiprintf_r+0x248>)
 80077e6:	429d      	cmp	r5, r3
 80077e8:	bf08      	it	eq
 80077ea:	68f5      	ldreq	r5, [r6, #12]
 80077ec:	e7da      	b.n	80077a4 <_vfiprintf_r+0x20>
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	0598      	lsls	r0, r3, #22
 80077f2:	d4ed      	bmi.n	80077d0 <_vfiprintf_r+0x4c>
 80077f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f6:	f000 fb84 	bl	8007f02 <__retarget_lock_release_recursive>
 80077fa:	e7e9      	b.n	80077d0 <_vfiprintf_r+0x4c>
 80077fc:	2300      	movs	r3, #0
 80077fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007800:	2320      	movs	r3, #32
 8007802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007806:	f8cd 800c 	str.w	r8, [sp, #12]
 800780a:	2330      	movs	r3, #48	; 0x30
 800780c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079d0 <_vfiprintf_r+0x24c>
 8007810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007814:	f04f 0901 	mov.w	r9, #1
 8007818:	4623      	mov	r3, r4
 800781a:	469a      	mov	sl, r3
 800781c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007820:	b10a      	cbz	r2, 8007826 <_vfiprintf_r+0xa2>
 8007822:	2a25      	cmp	r2, #37	; 0x25
 8007824:	d1f9      	bne.n	800781a <_vfiprintf_r+0x96>
 8007826:	ebba 0b04 	subs.w	fp, sl, r4
 800782a:	d00b      	beq.n	8007844 <_vfiprintf_r+0xc0>
 800782c:	465b      	mov	r3, fp
 800782e:	4622      	mov	r2, r4
 8007830:	4629      	mov	r1, r5
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff ff93 	bl	800775e <__sfputs_r>
 8007838:	3001      	adds	r0, #1
 800783a:	f000 80aa 	beq.w	8007992 <_vfiprintf_r+0x20e>
 800783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007840:	445a      	add	r2, fp
 8007842:	9209      	str	r2, [sp, #36]	; 0x24
 8007844:	f89a 3000 	ldrb.w	r3, [sl]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80a2 	beq.w	8007992 <_vfiprintf_r+0x20e>
 800784e:	2300      	movs	r3, #0
 8007850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007858:	f10a 0a01 	add.w	sl, sl, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	9307      	str	r3, [sp, #28]
 8007860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007864:	931a      	str	r3, [sp, #104]	; 0x68
 8007866:	4654      	mov	r4, sl
 8007868:	2205      	movs	r2, #5
 800786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786e:	4858      	ldr	r0, [pc, #352]	; (80079d0 <_vfiprintf_r+0x24c>)
 8007870:	f7f8 fcd6 	bl	8000220 <memchr>
 8007874:	9a04      	ldr	r2, [sp, #16]
 8007876:	b9d8      	cbnz	r0, 80078b0 <_vfiprintf_r+0x12c>
 8007878:	06d1      	lsls	r1, r2, #27
 800787a:	bf44      	itt	mi
 800787c:	2320      	movmi	r3, #32
 800787e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007882:	0713      	lsls	r3, r2, #28
 8007884:	bf44      	itt	mi
 8007886:	232b      	movmi	r3, #43	; 0x2b
 8007888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788c:	f89a 3000 	ldrb.w	r3, [sl]
 8007890:	2b2a      	cmp	r3, #42	; 0x2a
 8007892:	d015      	beq.n	80078c0 <_vfiprintf_r+0x13c>
 8007894:	9a07      	ldr	r2, [sp, #28]
 8007896:	4654      	mov	r4, sl
 8007898:	2000      	movs	r0, #0
 800789a:	f04f 0c0a 	mov.w	ip, #10
 800789e:	4621      	mov	r1, r4
 80078a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a4:	3b30      	subs	r3, #48	; 0x30
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d94e      	bls.n	8007948 <_vfiprintf_r+0x1c4>
 80078aa:	b1b0      	cbz	r0, 80078da <_vfiprintf_r+0x156>
 80078ac:	9207      	str	r2, [sp, #28]
 80078ae:	e014      	b.n	80078da <_vfiprintf_r+0x156>
 80078b0:	eba0 0308 	sub.w	r3, r0, r8
 80078b4:	fa09 f303 	lsl.w	r3, r9, r3
 80078b8:	4313      	orrs	r3, r2
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	46a2      	mov	sl, r4
 80078be:	e7d2      	b.n	8007866 <_vfiprintf_r+0xe2>
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	1d19      	adds	r1, r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	9103      	str	r1, [sp, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bfbb      	ittet	lt
 80078cc:	425b      	neglt	r3, r3
 80078ce:	f042 0202 	orrlt.w	r2, r2, #2
 80078d2:	9307      	strge	r3, [sp, #28]
 80078d4:	9307      	strlt	r3, [sp, #28]
 80078d6:	bfb8      	it	lt
 80078d8:	9204      	strlt	r2, [sp, #16]
 80078da:	7823      	ldrb	r3, [r4, #0]
 80078dc:	2b2e      	cmp	r3, #46	; 0x2e
 80078de:	d10c      	bne.n	80078fa <_vfiprintf_r+0x176>
 80078e0:	7863      	ldrb	r3, [r4, #1]
 80078e2:	2b2a      	cmp	r3, #42	; 0x2a
 80078e4:	d135      	bne.n	8007952 <_vfiprintf_r+0x1ce>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	1d1a      	adds	r2, r3, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	9203      	str	r2, [sp, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078f6:	3402      	adds	r4, #2
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079e0 <_vfiprintf_r+0x25c>
 80078fe:	7821      	ldrb	r1, [r4, #0]
 8007900:	2203      	movs	r2, #3
 8007902:	4650      	mov	r0, sl
 8007904:	f7f8 fc8c 	bl	8000220 <memchr>
 8007908:	b140      	cbz	r0, 800791c <_vfiprintf_r+0x198>
 800790a:	2340      	movs	r3, #64	; 0x40
 800790c:	eba0 000a 	sub.w	r0, r0, sl
 8007910:	fa03 f000 	lsl.w	r0, r3, r0
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	4303      	orrs	r3, r0
 8007918:	3401      	adds	r4, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	482c      	ldr	r0, [pc, #176]	; (80079d4 <_vfiprintf_r+0x250>)
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007926:	2206      	movs	r2, #6
 8007928:	f7f8 fc7a 	bl	8000220 <memchr>
 800792c:	2800      	cmp	r0, #0
 800792e:	d03f      	beq.n	80079b0 <_vfiprintf_r+0x22c>
 8007930:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <_vfiprintf_r+0x254>)
 8007932:	bb1b      	cbnz	r3, 800797c <_vfiprintf_r+0x1f8>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	3307      	adds	r3, #7
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	3308      	adds	r3, #8
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	443b      	add	r3, r7
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	e767      	b.n	8007818 <_vfiprintf_r+0x94>
 8007948:	fb0c 3202 	mla	r2, ip, r2, r3
 800794c:	460c      	mov	r4, r1
 800794e:	2001      	movs	r0, #1
 8007950:	e7a5      	b.n	800789e <_vfiprintf_r+0x11a>
 8007952:	2300      	movs	r3, #0
 8007954:	3401      	adds	r4, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	4619      	mov	r1, r3
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4620      	mov	r0, r4
 8007960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007964:	3a30      	subs	r2, #48	; 0x30
 8007966:	2a09      	cmp	r2, #9
 8007968:	d903      	bls.n	8007972 <_vfiprintf_r+0x1ee>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c5      	beq.n	80078fa <_vfiprintf_r+0x176>
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	e7c3      	b.n	80078fa <_vfiprintf_r+0x176>
 8007972:	fb0c 2101 	mla	r1, ip, r1, r2
 8007976:	4604      	mov	r4, r0
 8007978:	2301      	movs	r3, #1
 800797a:	e7f0      	b.n	800795e <_vfiprintf_r+0x1da>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b16      	ldr	r3, [pc, #88]	; (80079dc <_vfiprintf_r+0x258>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4630      	mov	r0, r6
 8007988:	f7fd fe0e 	bl	80055a8 <_printf_float>
 800798c:	4607      	mov	r7, r0
 800798e:	1c78      	adds	r0, r7, #1
 8007990:	d1d6      	bne.n	8007940 <_vfiprintf_r+0x1bc>
 8007992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	d405      	bmi.n	80079a4 <_vfiprintf_r+0x220>
 8007998:	89ab      	ldrh	r3, [r5, #12]
 800799a:	059a      	lsls	r2, r3, #22
 800799c:	d402      	bmi.n	80079a4 <_vfiprintf_r+0x220>
 800799e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079a0:	f000 faaf 	bl	8007f02 <__retarget_lock_release_recursive>
 80079a4:	89ab      	ldrh	r3, [r5, #12]
 80079a6:	065b      	lsls	r3, r3, #25
 80079a8:	f53f af12 	bmi.w	80077d0 <_vfiprintf_r+0x4c>
 80079ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ae:	e711      	b.n	80077d4 <_vfiprintf_r+0x50>
 80079b0:	ab03      	add	r3, sp, #12
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	462a      	mov	r2, r5
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <_vfiprintf_r+0x258>)
 80079b8:	a904      	add	r1, sp, #16
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7fe f898 	bl	8005af0 <_printf_i>
 80079c0:	e7e4      	b.n	800798c <_vfiprintf_r+0x208>
 80079c2:	bf00      	nop
 80079c4:	080085ac 	.word	0x080085ac
 80079c8:	080085cc 	.word	0x080085cc
 80079cc:	0800858c 	.word	0x0800858c
 80079d0:	08008434 	.word	0x08008434
 80079d4:	0800843e 	.word	0x0800843e
 80079d8:	080055a9 	.word	0x080055a9
 80079dc:	0800775f 	.word	0x0800775f
 80079e0:	0800843a 	.word	0x0800843a

080079e4 <__swbuf_r>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	460e      	mov	r6, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	4605      	mov	r5, r0
 80079ec:	b118      	cbz	r0, 80079f6 <__swbuf_r+0x12>
 80079ee:	6983      	ldr	r3, [r0, #24]
 80079f0:	b90b      	cbnz	r3, 80079f6 <__swbuf_r+0x12>
 80079f2:	f000 f9e7 	bl	8007dc4 <__sinit>
 80079f6:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <__swbuf_r+0x98>)
 80079f8:	429c      	cmp	r4, r3
 80079fa:	d12b      	bne.n	8007a54 <__swbuf_r+0x70>
 80079fc:	686c      	ldr	r4, [r5, #4]
 80079fe:	69a3      	ldr	r3, [r4, #24]
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	071a      	lsls	r2, r3, #28
 8007a06:	d52f      	bpl.n	8007a68 <__swbuf_r+0x84>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	b36b      	cbz	r3, 8007a68 <__swbuf_r+0x84>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	6820      	ldr	r0, [r4, #0]
 8007a10:	1ac0      	subs	r0, r0, r3
 8007a12:	6963      	ldr	r3, [r4, #20]
 8007a14:	b2f6      	uxtb	r6, r6
 8007a16:	4283      	cmp	r3, r0
 8007a18:	4637      	mov	r7, r6
 8007a1a:	dc04      	bgt.n	8007a26 <__swbuf_r+0x42>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f93c 	bl	8007c9c <_fflush_r>
 8007a24:	bb30      	cbnz	r0, 8007a74 <__swbuf_r+0x90>
 8007a26:	68a3      	ldr	r3, [r4, #8]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	60a3      	str	r3, [r4, #8]
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	701e      	strb	r6, [r3, #0]
 8007a34:	6963      	ldr	r3, [r4, #20]
 8007a36:	3001      	adds	r0, #1
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	d004      	beq.n	8007a46 <__swbuf_r+0x62>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	07db      	lsls	r3, r3, #31
 8007a40:	d506      	bpl.n	8007a50 <__swbuf_r+0x6c>
 8007a42:	2e0a      	cmp	r6, #10
 8007a44:	d104      	bne.n	8007a50 <__swbuf_r+0x6c>
 8007a46:	4621      	mov	r1, r4
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 f927 	bl	8007c9c <_fflush_r>
 8007a4e:	b988      	cbnz	r0, 8007a74 <__swbuf_r+0x90>
 8007a50:	4638      	mov	r0, r7
 8007a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <__swbuf_r+0x9c>)
 8007a56:	429c      	cmp	r4, r3
 8007a58:	d101      	bne.n	8007a5e <__swbuf_r+0x7a>
 8007a5a:	68ac      	ldr	r4, [r5, #8]
 8007a5c:	e7cf      	b.n	80079fe <__swbuf_r+0x1a>
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <__swbuf_r+0xa0>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	bf08      	it	eq
 8007a64:	68ec      	ldreq	r4, [r5, #12]
 8007a66:	e7ca      	b.n	80079fe <__swbuf_r+0x1a>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 f81a 	bl	8007aa4 <__swsetup_r>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d0cb      	beq.n	8007a0c <__swbuf_r+0x28>
 8007a74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a78:	e7ea      	b.n	8007a50 <__swbuf_r+0x6c>
 8007a7a:	bf00      	nop
 8007a7c:	080085ac 	.word	0x080085ac
 8007a80:	080085cc 	.word	0x080085cc
 8007a84:	0800858c 	.word	0x0800858c

08007a88 <__ascii_wctomb>:
 8007a88:	b149      	cbz	r1, 8007a9e <__ascii_wctomb+0x16>
 8007a8a:	2aff      	cmp	r2, #255	; 0xff
 8007a8c:	bf85      	ittet	hi
 8007a8e:	238a      	movhi	r3, #138	; 0x8a
 8007a90:	6003      	strhi	r3, [r0, #0]
 8007a92:	700a      	strbls	r2, [r1, #0]
 8007a94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a98:	bf98      	it	ls
 8007a9a:	2001      	movls	r0, #1
 8007a9c:	4770      	bx	lr
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4770      	bx	lr
	...

08007aa4 <__swsetup_r>:
 8007aa4:	4b32      	ldr	r3, [pc, #200]	; (8007b70 <__swsetup_r+0xcc>)
 8007aa6:	b570      	push	{r4, r5, r6, lr}
 8007aa8:	681d      	ldr	r5, [r3, #0]
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	b125      	cbz	r5, 8007aba <__swsetup_r+0x16>
 8007ab0:	69ab      	ldr	r3, [r5, #24]
 8007ab2:	b913      	cbnz	r3, 8007aba <__swsetup_r+0x16>
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 f985 	bl	8007dc4 <__sinit>
 8007aba:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <__swsetup_r+0xd0>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d10f      	bne.n	8007ae0 <__swsetup_r+0x3c>
 8007ac0:	686c      	ldr	r4, [r5, #4]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac8:	0719      	lsls	r1, r3, #28
 8007aca:	d42c      	bmi.n	8007b26 <__swsetup_r+0x82>
 8007acc:	06dd      	lsls	r5, r3, #27
 8007ace:	d411      	bmi.n	8007af4 <__swsetup_r+0x50>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ade:	e03e      	b.n	8007b5e <__swsetup_r+0xba>
 8007ae0:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <__swsetup_r+0xd4>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <__swsetup_r+0x46>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7eb      	b.n	8007ac2 <__swsetup_r+0x1e>
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <__swsetup_r+0xd8>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7e6      	b.n	8007ac2 <__swsetup_r+0x1e>
 8007af4:	0758      	lsls	r0, r3, #29
 8007af6:	d512      	bpl.n	8007b1e <__swsetup_r+0x7a>
 8007af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afa:	b141      	cbz	r1, 8007b0e <__swsetup_r+0x6a>
 8007afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b00:	4299      	cmp	r1, r3
 8007b02:	d002      	beq.n	8007b0a <__swsetup_r+0x66>
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7ff fb6f 	bl	80071e8 <_free_r>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	2300      	movs	r3, #0
 8007b18:	6063      	str	r3, [r4, #4]
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f043 0308 	orr.w	r3, r3, #8
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	b94b      	cbnz	r3, 8007b3e <__swsetup_r+0x9a>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b34:	d003      	beq.n	8007b3e <__swsetup_r+0x9a>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f000 fa07 	bl	8007f4c <__smakebuf_r>
 8007b3e:	89a0      	ldrh	r0, [r4, #12]
 8007b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b44:	f010 0301 	ands.w	r3, r0, #1
 8007b48:	d00a      	beq.n	8007b60 <__swsetup_r+0xbc>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	425b      	negs	r3, r3
 8007b52:	61a3      	str	r3, [r4, #24]
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b943      	cbnz	r3, 8007b6a <__swsetup_r+0xc6>
 8007b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b5c:	d1ba      	bne.n	8007ad4 <__swsetup_r+0x30>
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	0781      	lsls	r1, r0, #30
 8007b62:	bf58      	it	pl
 8007b64:	6963      	ldrpl	r3, [r4, #20]
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	e7f4      	b.n	8007b54 <__swsetup_r+0xb0>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e7f7      	b.n	8007b5e <__swsetup_r+0xba>
 8007b6e:	bf00      	nop
 8007b70:	2000000c 	.word	0x2000000c
 8007b74:	080085ac 	.word	0x080085ac
 8007b78:	080085cc 	.word	0x080085cc
 8007b7c:	0800858c 	.word	0x0800858c

08007b80 <abort>:
 8007b80:	b508      	push	{r3, lr}
 8007b82:	2006      	movs	r0, #6
 8007b84:	f000 fa52 	bl	800802c <raise>
 8007b88:	2001      	movs	r0, #1
 8007b8a:	f7f9 ff01 	bl	8001990 <_exit>
	...

08007b90 <__sflush_r>:
 8007b90:	898a      	ldrh	r2, [r1, #12]
 8007b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	4605      	mov	r5, r0
 8007b98:	0710      	lsls	r0, r2, #28
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	d458      	bmi.n	8007c50 <__sflush_r+0xc0>
 8007b9e:	684b      	ldr	r3, [r1, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	dc05      	bgt.n	8007bb0 <__sflush_r+0x20>
 8007ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dc02      	bgt.n	8007bb0 <__sflush_r+0x20>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d0f9      	beq.n	8007baa <__sflush_r+0x1a>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bbc:	682f      	ldr	r7, [r5, #0]
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	d032      	beq.n	8007c28 <__sflush_r+0x98>
 8007bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	075a      	lsls	r2, r3, #29
 8007bc8:	d505      	bpl.n	8007bd6 <__sflush_r+0x46>
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	1ac0      	subs	r0, r0, r3
 8007bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bd0:	b10b      	cbz	r3, 8007bd6 <__sflush_r+0x46>
 8007bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd4:	1ac0      	subs	r0, r0, r3
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4602      	mov	r2, r0
 8007bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bdc:	6a21      	ldr	r1, [r4, #32]
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b0      	blx	r6
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	d106      	bne.n	8007bf6 <__sflush_r+0x66>
 8007be8:	6829      	ldr	r1, [r5, #0]
 8007bea:	291d      	cmp	r1, #29
 8007bec:	d82c      	bhi.n	8007c48 <__sflush_r+0xb8>
 8007bee:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <__sflush_r+0x108>)
 8007bf0:	40ca      	lsrs	r2, r1
 8007bf2:	07d6      	lsls	r6, r2, #31
 8007bf4:	d528      	bpl.n	8007c48 <__sflush_r+0xb8>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6062      	str	r2, [r4, #4]
 8007bfa:	04d9      	lsls	r1, r3, #19
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	d504      	bpl.n	8007c0c <__sflush_r+0x7c>
 8007c02:	1c42      	adds	r2, r0, #1
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0x7a>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	b903      	cbnz	r3, 8007c0c <__sflush_r+0x7c>
 8007c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0e:	602f      	str	r7, [r5, #0]
 8007c10:	2900      	cmp	r1, #0
 8007c12:	d0ca      	beq.n	8007baa <__sflush_r+0x1a>
 8007c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <__sflush_r+0x92>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff fae3 	bl	80071e8 <_free_r>
 8007c22:	2000      	movs	r0, #0
 8007c24:	6360      	str	r0, [r4, #52]	; 0x34
 8007c26:	e7c1      	b.n	8007bac <__sflush_r+0x1c>
 8007c28:	6a21      	ldr	r1, [r4, #32]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b0      	blx	r6
 8007c30:	1c41      	adds	r1, r0, #1
 8007c32:	d1c7      	bne.n	8007bc4 <__sflush_r+0x34>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c4      	beq.n	8007bc4 <__sflush_r+0x34>
 8007c3a:	2b1d      	cmp	r3, #29
 8007c3c:	d001      	beq.n	8007c42 <__sflush_r+0xb2>
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d101      	bne.n	8007c46 <__sflush_r+0xb6>
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	e7b1      	b.n	8007baa <__sflush_r+0x1a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	e7ad      	b.n	8007bac <__sflush_r+0x1c>
 8007c50:	690f      	ldr	r7, [r1, #16]
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	d0a9      	beq.n	8007baa <__sflush_r+0x1a>
 8007c56:	0793      	lsls	r3, r2, #30
 8007c58:	680e      	ldr	r6, [r1, #0]
 8007c5a:	bf08      	it	eq
 8007c5c:	694b      	ldreq	r3, [r1, #20]
 8007c5e:	600f      	str	r7, [r1, #0]
 8007c60:	bf18      	it	ne
 8007c62:	2300      	movne	r3, #0
 8007c64:	eba6 0807 	sub.w	r8, r6, r7
 8007c68:	608b      	str	r3, [r1, #8]
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	dd9c      	ble.n	8007baa <__sflush_r+0x1a>
 8007c70:	6a21      	ldr	r1, [r4, #32]
 8007c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c74:	4643      	mov	r3, r8
 8007c76:	463a      	mov	r2, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b0      	blx	r6
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	dc06      	bgt.n	8007c8e <__sflush_r+0xfe>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c8c:	e78e      	b.n	8007bac <__sflush_r+0x1c>
 8007c8e:	4407      	add	r7, r0
 8007c90:	eba8 0800 	sub.w	r8, r8, r0
 8007c94:	e7e9      	b.n	8007c6a <__sflush_r+0xda>
 8007c96:	bf00      	nop
 8007c98:	20400001 	.word	0x20400001

08007c9c <_fflush_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b913      	cbnz	r3, 8007cac <_fflush_r+0x10>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	4628      	mov	r0, r5
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	b118      	cbz	r0, 8007cb6 <_fflush_r+0x1a>
 8007cae:	6983      	ldr	r3, [r0, #24]
 8007cb0:	b90b      	cbnz	r3, 8007cb6 <_fflush_r+0x1a>
 8007cb2:	f000 f887 	bl	8007dc4 <__sinit>
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <_fflush_r+0x6c>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d11b      	bne.n	8007cf4 <_fflush_r+0x58>
 8007cbc:	686c      	ldr	r4, [r5, #4]
 8007cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0ef      	beq.n	8007ca6 <_fflush_r+0xa>
 8007cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc8:	07d0      	lsls	r0, r2, #31
 8007cca:	d404      	bmi.n	8007cd6 <_fflush_r+0x3a>
 8007ccc:	0599      	lsls	r1, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_fflush_r+0x3a>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cd2:	f000 f915 	bl	8007f00 <__retarget_lock_acquire_recursive>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7ff ff59 	bl	8007b90 <__sflush_r>
 8007cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce0:	07da      	lsls	r2, r3, #31
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	d4e0      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d4dd      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cee:	f000 f908 	bl	8007f02 <__retarget_lock_release_recursive>
 8007cf2:	e7d9      	b.n	8007ca8 <_fflush_r+0xc>
 8007cf4:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <_fflush_r+0x70>)
 8007cf6:	429c      	cmp	r4, r3
 8007cf8:	d101      	bne.n	8007cfe <_fflush_r+0x62>
 8007cfa:	68ac      	ldr	r4, [r5, #8]
 8007cfc:	e7df      	b.n	8007cbe <_fflush_r+0x22>
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <_fflush_r+0x74>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	bf08      	it	eq
 8007d04:	68ec      	ldreq	r4, [r5, #12]
 8007d06:	e7da      	b.n	8007cbe <_fflush_r+0x22>
 8007d08:	080085ac 	.word	0x080085ac
 8007d0c:	080085cc 	.word	0x080085cc
 8007d10:	0800858c 	.word	0x0800858c

08007d14 <std>:
 8007d14:	2300      	movs	r3, #0
 8007d16:	b510      	push	{r4, lr}
 8007d18:	4604      	mov	r4, r0
 8007d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d22:	6083      	str	r3, [r0, #8]
 8007d24:	8181      	strh	r1, [r0, #12]
 8007d26:	6643      	str	r3, [r0, #100]	; 0x64
 8007d28:	81c2      	strh	r2, [r0, #14]
 8007d2a:	6183      	str	r3, [r0, #24]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	2208      	movs	r2, #8
 8007d30:	305c      	adds	r0, #92	; 0x5c
 8007d32:	f7fd fb91 	bl	8005458 <memset>
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <std+0x38>)
 8007d38:	6263      	str	r3, [r4, #36]	; 0x24
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <std+0x3c>)
 8007d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d3e:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <std+0x40>)
 8007d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d42:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <std+0x44>)
 8007d44:	6224      	str	r4, [r4, #32]
 8007d46:	6323      	str	r3, [r4, #48]	; 0x30
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08008065 	.word	0x08008065
 8007d50:	08008087 	.word	0x08008087
 8007d54:	080080bf 	.word	0x080080bf
 8007d58:	080080e3 	.word	0x080080e3

08007d5c <_cleanup_r>:
 8007d5c:	4901      	ldr	r1, [pc, #4]	; (8007d64 <_cleanup_r+0x8>)
 8007d5e:	f000 b8af 	b.w	8007ec0 <_fwalk_reent>
 8007d62:	bf00      	nop
 8007d64:	08007c9d 	.word	0x08007c9d

08007d68 <__sfmoreglue>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	1e4a      	subs	r2, r1, #1
 8007d6c:	2568      	movs	r5, #104	; 0x68
 8007d6e:	4355      	muls	r5, r2
 8007d70:	460e      	mov	r6, r1
 8007d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d76:	f7ff fa87 	bl	8007288 <_malloc_r>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	b140      	cbz	r0, 8007d90 <__sfmoreglue+0x28>
 8007d7e:	2100      	movs	r1, #0
 8007d80:	e9c0 1600 	strd	r1, r6, [r0]
 8007d84:	300c      	adds	r0, #12
 8007d86:	60a0      	str	r0, [r4, #8]
 8007d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d8c:	f7fd fb64 	bl	8005458 <memset>
 8007d90:	4620      	mov	r0, r4
 8007d92:	bd70      	pop	{r4, r5, r6, pc}

08007d94 <__sfp_lock_acquire>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__sfp_lock_acquire+0x8>)
 8007d96:	f000 b8b3 	b.w	8007f00 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	200005e0 	.word	0x200005e0

08007da0 <__sfp_lock_release>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__sfp_lock_release+0x8>)
 8007da2:	f000 b8ae 	b.w	8007f02 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	200005e0 	.word	0x200005e0

08007dac <__sinit_lock_acquire>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__sinit_lock_acquire+0x8>)
 8007dae:	f000 b8a7 	b.w	8007f00 <__retarget_lock_acquire_recursive>
 8007db2:	bf00      	nop
 8007db4:	200005db 	.word	0x200005db

08007db8 <__sinit_lock_release>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__sinit_lock_release+0x8>)
 8007dba:	f000 b8a2 	b.w	8007f02 <__retarget_lock_release_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200005db 	.word	0x200005db

08007dc4 <__sinit>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	f7ff fff0 	bl	8007dac <__sinit_lock_acquire>
 8007dcc:	69a3      	ldr	r3, [r4, #24]
 8007dce:	b11b      	cbz	r3, 8007dd8 <__sinit+0x14>
 8007dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd4:	f7ff bff0 	b.w	8007db8 <__sinit_lock_release>
 8007dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <__sinit+0x68>)
 8007de0:	4a13      	ldr	r2, [pc, #76]	; (8007e30 <__sinit+0x6c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	bf04      	itt	eq
 8007dea:	2301      	moveq	r3, #1
 8007dec:	61a3      	streq	r3, [r4, #24]
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 f820 	bl	8007e34 <__sfp>
 8007df4:	6060      	str	r0, [r4, #4]
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 f81c 	bl	8007e34 <__sfp>
 8007dfc:	60a0      	str	r0, [r4, #8]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f818 	bl	8007e34 <__sfp>
 8007e04:	2200      	movs	r2, #0
 8007e06:	60e0      	str	r0, [r4, #12]
 8007e08:	2104      	movs	r1, #4
 8007e0a:	6860      	ldr	r0, [r4, #4]
 8007e0c:	f7ff ff82 	bl	8007d14 <std>
 8007e10:	68a0      	ldr	r0, [r4, #8]
 8007e12:	2201      	movs	r2, #1
 8007e14:	2109      	movs	r1, #9
 8007e16:	f7ff ff7d 	bl	8007d14 <std>
 8007e1a:	68e0      	ldr	r0, [r4, #12]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	2112      	movs	r1, #18
 8007e20:	f7ff ff78 	bl	8007d14 <std>
 8007e24:	2301      	movs	r3, #1
 8007e26:	61a3      	str	r3, [r4, #24]
 8007e28:	e7d2      	b.n	8007dd0 <__sinit+0xc>
 8007e2a:	bf00      	nop
 8007e2c:	08008208 	.word	0x08008208
 8007e30:	08007d5d 	.word	0x08007d5d

08007e34 <__sfp>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	4607      	mov	r7, r0
 8007e38:	f7ff ffac 	bl	8007d94 <__sfp_lock_acquire>
 8007e3c:	4b1e      	ldr	r3, [pc, #120]	; (8007eb8 <__sfp+0x84>)
 8007e3e:	681e      	ldr	r6, [r3, #0]
 8007e40:	69b3      	ldr	r3, [r6, #24]
 8007e42:	b913      	cbnz	r3, 8007e4a <__sfp+0x16>
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7ff ffbd 	bl	8007dc4 <__sinit>
 8007e4a:	3648      	adds	r6, #72	; 0x48
 8007e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	d503      	bpl.n	8007e5c <__sfp+0x28>
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	b30b      	cbz	r3, 8007e9c <__sfp+0x68>
 8007e58:	6836      	ldr	r6, [r6, #0]
 8007e5a:	e7f7      	b.n	8007e4c <__sfp+0x18>
 8007e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e60:	b9d5      	cbnz	r5, 8007e98 <__sfp+0x64>
 8007e62:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <__sfp+0x88>)
 8007e64:	60e3      	str	r3, [r4, #12]
 8007e66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e6c:	f000 f847 	bl	8007efe <__retarget_lock_init_recursive>
 8007e70:	f7ff ff96 	bl	8007da0 <__sfp_lock_release>
 8007e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e7c:	6025      	str	r5, [r4, #0]
 8007e7e:	61a5      	str	r5, [r4, #24]
 8007e80:	2208      	movs	r2, #8
 8007e82:	4629      	mov	r1, r5
 8007e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e88:	f7fd fae6 	bl	8005458 <memset>
 8007e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e94:	4620      	mov	r0, r4
 8007e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e98:	3468      	adds	r4, #104	; 0x68
 8007e9a:	e7d9      	b.n	8007e50 <__sfp+0x1c>
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7ff ff62 	bl	8007d68 <__sfmoreglue>
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	6030      	str	r0, [r6, #0]
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1d5      	bne.n	8007e58 <__sfp+0x24>
 8007eac:	f7ff ff78 	bl	8007da0 <__sfp_lock_release>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	e7ee      	b.n	8007e94 <__sfp+0x60>
 8007eb6:	bf00      	nop
 8007eb8:	08008208 	.word	0x08008208
 8007ebc:	ffff0001 	.word	0xffff0001

08007ec0 <_fwalk_reent>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	4688      	mov	r8, r1
 8007ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ecc:	2700      	movs	r7, #0
 8007ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed6:	d505      	bpl.n	8007ee4 <_fwalk_reent+0x24>
 8007ed8:	6824      	ldr	r4, [r4, #0]
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	d1f7      	bne.n	8007ece <_fwalk_reent+0xe>
 8007ede:	4638      	mov	r0, r7
 8007ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee4:	89ab      	ldrh	r3, [r5, #12]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d907      	bls.n	8007efa <_fwalk_reent+0x3a>
 8007eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	d003      	beq.n	8007efa <_fwalk_reent+0x3a>
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	47c0      	blx	r8
 8007ef8:	4307      	orrs	r7, r0
 8007efa:	3568      	adds	r5, #104	; 0x68
 8007efc:	e7e9      	b.n	8007ed2 <_fwalk_reent+0x12>

08007efe <__retarget_lock_init_recursive>:
 8007efe:	4770      	bx	lr

08007f00 <__retarget_lock_acquire_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_release_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <__swhatbuf_r>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	460e      	mov	r6, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	b096      	sub	sp, #88	; 0x58
 8007f10:	4614      	mov	r4, r2
 8007f12:	461d      	mov	r5, r3
 8007f14:	da07      	bge.n	8007f26 <__swhatbuf_r+0x22>
 8007f16:	2300      	movs	r3, #0
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	89b3      	ldrh	r3, [r6, #12]
 8007f1c:	061a      	lsls	r2, r3, #24
 8007f1e:	d410      	bmi.n	8007f42 <__swhatbuf_r+0x3e>
 8007f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f24:	e00e      	b.n	8007f44 <__swhatbuf_r+0x40>
 8007f26:	466a      	mov	r2, sp
 8007f28:	f000 f902 	bl	8008130 <_fstat_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	dbf2      	blt.n	8007f16 <__swhatbuf_r+0x12>
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f3a:	425a      	negs	r2, r3
 8007f3c:	415a      	adcs	r2, r3
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	e7ee      	b.n	8007f20 <__swhatbuf_r+0x1c>
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2000      	movs	r0, #0
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	b016      	add	sp, #88	; 0x58
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}

08007f4c <__smakebuf_r>:
 8007f4c:	898b      	ldrh	r3, [r1, #12]
 8007f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f50:	079d      	lsls	r5, r3, #30
 8007f52:	4606      	mov	r6, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	d507      	bpl.n	8007f68 <__smakebuf_r+0x1c>
 8007f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	6123      	str	r3, [r4, #16]
 8007f60:	2301      	movs	r3, #1
 8007f62:	6163      	str	r3, [r4, #20]
 8007f64:	b002      	add	sp, #8
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	ab01      	add	r3, sp, #4
 8007f6a:	466a      	mov	r2, sp
 8007f6c:	f7ff ffca 	bl	8007f04 <__swhatbuf_r>
 8007f70:	9900      	ldr	r1, [sp, #0]
 8007f72:	4605      	mov	r5, r0
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff f987 	bl	8007288 <_malloc_r>
 8007f7a:	b948      	cbnz	r0, 8007f90 <__smakebuf_r+0x44>
 8007f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f80:	059a      	lsls	r2, r3, #22
 8007f82:	d4ef      	bmi.n	8007f64 <__smakebuf_r+0x18>
 8007f84:	f023 0303 	bic.w	r3, r3, #3
 8007f88:	f043 0302 	orr.w	r3, r3, #2
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	e7e3      	b.n	8007f58 <__smakebuf_r+0xc>
 8007f90:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <__smakebuf_r+0x7c>)
 8007f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	6163      	str	r3, [r4, #20]
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	6120      	str	r0, [r4, #16]
 8007fa6:	b15b      	cbz	r3, 8007fc0 <__smakebuf_r+0x74>
 8007fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fac:	4630      	mov	r0, r6
 8007fae:	f000 f8d1 	bl	8008154 <_isatty_r>
 8007fb2:	b128      	cbz	r0, 8007fc0 <__smakebuf_r+0x74>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	89a0      	ldrh	r0, [r4, #12]
 8007fc2:	4305      	orrs	r5, r0
 8007fc4:	81a5      	strh	r5, [r4, #12]
 8007fc6:	e7cd      	b.n	8007f64 <__smakebuf_r+0x18>
 8007fc8:	08007d5d 	.word	0x08007d5d

08007fcc <_malloc_usable_size_r>:
 8007fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd0:	1f18      	subs	r0, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfbc      	itt	lt
 8007fd6:	580b      	ldrlt	r3, [r1, r0]
 8007fd8:	18c0      	addlt	r0, r0, r3
 8007fda:	4770      	bx	lr

08007fdc <_raise_r>:
 8007fdc:	291f      	cmp	r1, #31
 8007fde:	b538      	push	{r3, r4, r5, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	d904      	bls.n	8007ff0 <_raise_r+0x14>
 8007fe6:	2316      	movs	r3, #22
 8007fe8:	6003      	str	r3, [r0, #0]
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ff2:	b112      	cbz	r2, 8007ffa <_raise_r+0x1e>
 8007ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ff8:	b94b      	cbnz	r3, 800800e <_raise_r+0x32>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 f830 	bl	8008060 <_getpid_r>
 8008000:	462a      	mov	r2, r5
 8008002:	4601      	mov	r1, r0
 8008004:	4620      	mov	r0, r4
 8008006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800a:	f000 b817 	b.w	800803c <_kill_r>
 800800e:	2b01      	cmp	r3, #1
 8008010:	d00a      	beq.n	8008028 <_raise_r+0x4c>
 8008012:	1c59      	adds	r1, r3, #1
 8008014:	d103      	bne.n	800801e <_raise_r+0x42>
 8008016:	2316      	movs	r3, #22
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	2001      	movs	r0, #1
 800801c:	e7e7      	b.n	8007fee <_raise_r+0x12>
 800801e:	2400      	movs	r4, #0
 8008020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008024:	4628      	mov	r0, r5
 8008026:	4798      	blx	r3
 8008028:	2000      	movs	r0, #0
 800802a:	e7e0      	b.n	8007fee <_raise_r+0x12>

0800802c <raise>:
 800802c:	4b02      	ldr	r3, [pc, #8]	; (8008038 <raise+0xc>)
 800802e:	4601      	mov	r1, r0
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	f7ff bfd3 	b.w	8007fdc <_raise_r>
 8008036:	bf00      	nop
 8008038:	2000000c 	.word	0x2000000c

0800803c <_kill_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	; (800805c <_kill_r+0x20>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	4611      	mov	r1, r2
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f7f9 fc91 	bl	8001970 <_kill>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d102      	bne.n	8008058 <_kill_r+0x1c>
 8008052:	682b      	ldr	r3, [r5, #0]
 8008054:	b103      	cbz	r3, 8008058 <_kill_r+0x1c>
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	bf00      	nop
 800805c:	200005d4 	.word	0x200005d4

08008060 <_getpid_r>:
 8008060:	f7f9 bc7e 	b.w	8001960 <_getpid>

08008064 <__sread>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	f000 f894 	bl	8008198 <_read_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	bfab      	itete	ge
 8008074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008076:	89a3      	ldrhlt	r3, [r4, #12]
 8008078:	181b      	addge	r3, r3, r0
 800807a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800807e:	bfac      	ite	ge
 8008080:	6563      	strge	r3, [r4, #84]	; 0x54
 8008082:	81a3      	strhlt	r3, [r4, #12]
 8008084:	bd10      	pop	{r4, pc}

08008086 <__swrite>:
 8008086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	461f      	mov	r7, r3
 800808c:	898b      	ldrh	r3, [r1, #12]
 800808e:	05db      	lsls	r3, r3, #23
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4616      	mov	r6, r2
 8008096:	d505      	bpl.n	80080a4 <__swrite+0x1e>
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	2302      	movs	r3, #2
 800809e:	2200      	movs	r2, #0
 80080a0:	f000 f868 	bl	8008174 <_lseek_r>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	4628      	mov	r0, r5
 80080b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ba:	f000 b817 	b.w	80080ec <_write_r>

080080be <__sseek>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 f855 	bl	8008174 <_lseek_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	bf15      	itete	ne
 80080d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080da:	81a3      	strheq	r3, [r4, #12]
 80080dc:	bf18      	it	ne
 80080de:	81a3      	strhne	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__sclose>:
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 b813 	b.w	8008110 <_close_r>
	...

080080ec <_write_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	; (800810c <_write_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7f9 fc6f 	bl	80019de <_write>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_write_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_write_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200005d4 	.word	0x200005d4

08008110 <_close_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	; (800812c <_close_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7f9 fc7b 	bl	8001a16 <_close>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_close_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_close_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	200005d4 	.word	0x200005d4

08008130 <_fstat_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	; (8008150 <_fstat_r+0x20>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f7f9 fc76 	bl	8001a2e <_fstat>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d102      	bne.n	800814c <_fstat_r+0x1c>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	b103      	cbz	r3, 800814c <_fstat_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	200005d4 	.word	0x200005d4

08008154 <_isatty_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_isatty_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f9 fc75 	bl	8001a4e <_isatty>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_isatty_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_isatty_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	200005d4 	.word	0x200005d4

08008174 <_lseek_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	; (8008194 <_lseek_r+0x20>)
 8008178:	4604      	mov	r4, r0
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	2200      	movs	r2, #0
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7f9 fc6e 	bl	8001a64 <_lseek>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_lseek_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_lseek_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	200005d4 	.word	0x200005d4

08008198 <_read_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_read_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 fbfc 	bl	80019a4 <_read>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_read_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_read_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200005d4 	.word	0x200005d4

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
